{"version":3,"sources":["jquery.flot.min.js","jquery.flot.resize.min.js","jquery.flot.time.min.js","jquery.flot.categories.min.js","jquery.flot.spline.min.js","jquery.flot.selection.min.js","jquery.flot.hiddengraphs.js","jquery.flot.fillbetween.js","jquery.flot.navigate.min.js","jquery.flot.dashes.js","jquery.flot.grow.js","jquery-deparam.js","days.js","chart.js","data.js"],"names":["$","color","make","r","g","b","a","o","add","c","d","i","length","charAt","normalize","scale","f","toString","join","clamp","min","value","max","parseInt","clone","extract","elem","css","toLowerCase","parent","nodeName","get","parse","str","res","m","exec","parseFloat","name","trim","lookupColors","aqua","azure","beige","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightcyan","lightgreen","lightgrey","lightpink","lightyellow","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","white","yellow","jQuery","hasOwnProperty","Object","prototype","Canvas","cls","container","element","children","document","createElement","className","direction","position","left","top","appendTo","getContext","window","G_vmlCanvasManager","Error","initElement","this","context","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","resize","width","height","textContainer","text","_textCache","Plot","placeholder","data_","options_","plugins","series","options","colors","legend","show","noColumns","labelFormatter","labelBoxBorderColor","margin","backgroundColor","backgroundOpacity","sorted","xaxis","mode","font","tickColor","transform","inverseTransform","autoscaleMargin","ticks","tickFormatter","labelWidth","labelHeight","reserveSpace","tickLength","alignTicksWithAxis","tickDecimals","tickSize","minTickSize","yaxis","xaxes","yaxes","points","radius","lineWidth","fill","fillColor","symbol","lines","steps","bars","barWidth","align","horizontal","zero","shadowSize","highlightColor","grid","aboveData","borderColor","labelMargin","axisMargin","borderWidth","minBorderMargin","markings","markingsColor","markingsLineWidth","clickable","hoverable","autoHighlight","mouseActiveRadius","interaction","redrawOverlayInterval","hooks","surface","overlay","eventHolder","ctx","octx","plotOffset","right","bottom","plotWidth","plotHeight","processOptions","processRawData","processDatapoints","processOffset","drawBackground","drawSeries","draw","bindEvents","drawOverlay","shutdown","plot","setData","setupGrid","getPlaceholder","getCanvas","getPlotOffset","offset","getData","getAxes","each","concat","_","axis","n","getXAxes","getYAxes","c2p","canvasToAxisCoords","p2c","pos","key","used","getOptions","highlight","unhighlight","triggerRedrawOverlay","pointOffset","point","axisNumber","x","y","destroy","removeData","empty","highlights","classes","p","init","extend","opts","axisOptions","axisCount","fontSizeDefault","fontSize","replace","fontDefaults","style","size","Math","round","variant","weight","family","lineHeight","noTicks","x2axis","y2axis","coloredAreas","coloredAreasColor","getOrCreateAxis","executeHooks","filter","hasClass","remove","unbind","existing","data","hook","args","apply","neededColors","s","push","parseData","maxIndex","sc","colorPool","colorPoolSize","variation","colori","v","j","k","ps","val","format","delta","autoscale","topSentry","Number","POSITIVE_INFINITY","bottomSentry","NEGATIVE_INFINITY","fakeInfinity","MAX_VALUE","updateAxis","datamin","datamax","allAxes","datapoints","number","required","defaultValue","pointsize","insertSteps","nullify","isNaN","Infinity","xmin","ymin","xmax","ymax","obj","coord","grep","undefined","x1","y1","axes","redrawTimeout","clearTimeout","onMouseMove","onMouseLeave","onClick","showGrid","axisOpts","widen","allocatedAxes","setupTickGeneration","sqrt","dec","floor","log","LN10","maxDec","otherAxis","magn","pow","norm","tickGenerator","prev","base","start","NaN","factor","formatted","decimal","indexOf","precision","substr","isFunction","niceTicks","extraDec","ts","test","toFixed","setTicks","oticks","label","t","measureTickLabels","maxWidth","legacyStyles","layer","info","getTextInfo","lw","lh","isXAxis","padding","innermost","outermost","first","found","box","allocateAxisBoxFirstPhase","minMargin","margins","ceil","identity","it","abs","tick","halign","valign","removeText","addText","html","find","ascending","fragments","entries","rowStarted","lf","sort","reverse","entry","table","div","prependTo","clear","save","translate","fillStyle","getColorOrGradient","fillRect","restore","drawGrid","drawSeriesLines","sw","angle","plotLine","xoffset","yoffset","axisx","axisy","prevx","prevy","beginPath","x2","y2","moveTo","lineTo","stroke","lineJoin","strokeStyle","PI","sin","cos","getFillStyle","areaOpen","ypos","segmentStart","segmentEnd","x1old","x2old","plotLineArea","barLeft","fillStyleCallback","barRight","drawBar","plotBars","drawSeriesBars","drawSeriesPoints","w","plotPoints","shadow","arc","closePath","render","extractRange","ranges","tmp","from","to","bc","xequal","subPixel","xrange","yrange","yequal","bw","yoff","xoff","strokeRect","drawLeft","drawRight","drawTop","drawBottom","filloptions","seriesColor","mousemove","bind","click","e","triggerClickHoverEvent","eventname","event","seriesFilter","canvasX","pageX","canvasY","pageY","item","mouseX","mouseY","maxDistance","smallestDistance","mx","my","maxx","maxy","dist","dx","dy","datapoint","slice","dataIndex","seriesIndex","findNearbyItem","h","auto","trigger","setTimeout","pointRadius","hi","drawBarHighlight","indexOfHighlight","splice","spec","defaultColor","gradient","createLinearGradient","l","co","brightness","opacity","addColorStop","fn","detach","parentNode","removeChild","clearRect","layerKey","cache","call","styleKey","getTextLayer","layerCache","hide","styleCache","positions","active","rendered","append","font-size","insertAfter","addClass","textStyle","max-width","outerWidth","outerHeight","text-align","version","u","is","requestAnimationFrame","special","setup","teardown","cancelAnimationFrame","arguments","handler","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","Date","getTime","webkitCancelRequestAnimationFrame","mozCancelRequestAnimationFrame","oCancelRequestAnimationFrame","msCancelRequestAnimationFrame","onResize","floorInBase","formatDate","fmt","monthNames","dayNames","strftime","leftPad","pad","escape","hours","getHours","isAM","hours12","getDay","getMonth","getDate","getMinutes","getSeconds","getFullYear","makeUtcWrapper","addProxyMethod","sourceObj","sourceMethod","targetObj","targetMethod","utc","date","props","dateGenerator","timezone","timezoneJS","setTimezone","setTime","timeUnitSize","second","minute","hour","day","month","quarter","year","baseSpec","specMonths","specQuarters","axisName","minSize","unit","step","carry","setSeconds","setMinutes","setHours","setMonth","setFullYear","setMilliseconds","setDate","end","timeformat","useQuarters","span","suffix","twelveHourClock","hourCode","xCategories","yCategories","categoriesTickGenerator","categories","setupCategoriesForAxis","isArray","transformPointsOnAxis","formatColumn","index","getNextIndex","getControlPoints","x0","y0","tension","d01","fa","fb","line","queue","type","cpoints","drawSpline","splines","idx","cp","len","pts","drawLine","plength","console","selection","savedhandlers","mouseUpHandler","updateSelection","getSelection","onMouseDown","which","body","focus","onselectstart","ondrag","setSelectionPos","selectionIsSane","triggerSelectedEvent","one","c1","c2","p1","p2","clearSelection","preventEvent","setSelection","range","mousedown","shape","drawnOnce","plotLabelClicked","switchedOn","plotdata","findPlotSeries","switchedOff","oldShow","oldColor","setHidden","setSetupRedraw","hidden","setHideAction","mouseenter","mouseleave","next","hideable","plotLabelHandlers","off","fillBetween","other","allseries","id","findBottomSeries","px","intery","qx","qy","otherps","otherpoints","newpoints","withlines","withbottom","withsteps","fromgap","py","dragTarget","dragProxy","proxy","cursorOffsetX","cursorOffsetY","offsetX","offsetY","dragging","target","not","distance","drop","allowed","dispatch","result","unselectable","MozUserSelect","drag","attachEvent","detachEvent","dragstart","dragend","fix","wheelDelta","detail","HORIZONTAL_AXIS","wheelDeltaY","wheelDeltaX","unshift","handle","fixHooks","mouseHooks","mousewheel","addEventListener","onmousewheel","removeEventListener","unmousewheel","onZoomClick","zoomOut","center","zoom","onMouseWheel","preventDefault","prevCursor","prevPageX","prevPageY","panTimeout","onDragStart","pan","cursor","onDrag","frameRate","onDragEnd","amount","xf","yf","minmax","zr","zoomRange","pr","panRange","interactive","plotDashes","dashOnLength","dashRemainder","dashOn","dashOffLength","dashes","dashLength","segmentLength","dashOffset","ax1","ay1","ax2","ay2","deltaX","deltaY","remainder","ysign","growfunc","valueIndex","done","plt","opt","growingLoop","growing","startTime","actualStep","grow","growings","stepMode","stepDirection","dataOrg","timeDiff","stepDelay","pluginName","isPluginRegistered","canvascontext","growingIndex","temp","constructor","deparam","require","exports","module","jquery","define","amd","global","eval","params","coerce","coerce_types","true","false","null","split","forEach","param","decodeURIComponent","cur","keys","keys_last","shift","months","en","de","ru","es","fr","pl","pt","nl","days","CustomChart","config","seriesData","markLines","chart","settings","that","markingsOffset","backgrounds","_yFormatter","afterComma","useComma","_tickXFormatter","object","now","timeFormatDate","timeFormatTime","systemLang","timeFormat","_tickYFormatter","showLabels","animation","barLabels","chartType","el","barFontSize","barFontColor","num","fs","fc","vl","smoothing","$title","titleId","title","titlePos","decodeURI","titleColor","titleSize","parts","bg","option","xMin","xMax","spaceLength","isLine","thickness","order","barColor","shadowsize","avg","noBorder","hoverDetail","border_width","border_color","legColumns","legBg","legBgOpacity","ii","yaxe","xaxe","commonYAxis","yaxi","y_labels_color","yticks","grid_color","xaxi","x_labels_color","xticks","q","curvedLines","monotonicFit","mm","chartId","$div","tooltipId","$tooltip","yOffset","fadeIn","display","border","background-color","cbOnZoom","zoomTimeout","update","newSeriesData","newMarkingsData","newTicks","num_","getRange","setRange","minMaxArr","resetZoom","time","positionX","disconnectTimeout","sessionId","path","location","href","sysLang","JSON","stringify","_ids","ids","_colors","names","_names","units","_units","aggregate","strokeWidth","aggregateType","aggregateSpan","relativeEnd","art","instance","noedit","timeType","timeArt","liveInterval","navOptions","socketURL","socketSESSION","divId","lastX","mouseDown","lastWidth","isApp","subscribes","subscribed","self","app","socketUrl","protocol","hostname","socketSession","socket","io","connect","query","reconnection limit","max reconnection attempts","upgrade","socketForceWebSockets","rememberUpgrade","transports","addTime","plusOrMinus","isOffsetInMinutes","getStartStop","monthRange","_now","minusMonth","zoomed","zMax","zMin","ignoreNull","count","start_time","map","endTime","end_time","minutes","getElementById","clientWidth","xmove","readOneChart","callback","multiplicator","emit","err","stepIgnore","_sessionId","error","warn","_series","readValue","state","prepareChart","onZoom","readData","on","touches","originalEvent","live","startLiveUpdate","_readOneLine","cb","common","readTicks","readMarkings","oid","oidl","_readData","subscribeAll","_ticks","open","setInterval","_index","updateLive","ready","rd","i1","cnt","window_bg"],"mappings":"CAMA,SAAAA,GAAAA,EAAAC,MAAA,GAAAD,EAAAC,MAAAC,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAA,GAAA,OAAAA,EAAAJ,EAAAA,GAAA,EAAAI,EAAAH,EAAAA,GAAA,EAAAG,EAAAF,EAAAA,GAAA,EAAAE,EAAAD,EAAA,MAAAA,EAAAA,EAAA,EAAAC,EAAAC,IAAA,SAAAC,EAAAC,GAAA,IAAA,IAAAC,EAAA,EAAAA,EAAAF,EAAAG,SAAAD,EAAAJ,EAAAE,EAAAI,OAAAF,KAAAD,EAAA,OAAAH,EAAAO,aAAAP,EAAAQ,MAAA,SAAAN,EAAAO,GAAA,IAAA,IAAAL,EAAA,EAAAA,EAAAF,EAAAG,SAAAD,EAAAJ,EAAAE,EAAAI,OAAAF,KAAAK,EAAA,OAAAT,EAAAO,aAAAP,EAAAU,SAAA,WAAA,OAAA,GAAAV,EAAAD,EAAA,OAAA,CAAAC,EAAAJ,EAAAI,EAAAH,EAAAG,EAAAF,GAAAa,KAAA,KAAA,IAAA,QAAA,CAAAX,EAAAJ,EAAAI,EAAAH,EAAAG,EAAAF,EAAAE,EAAAD,GAAAY,KAAA,KAAA,KAAAX,EAAAO,UAAA,WAAA,SAAAK,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAD,EAAAA,EAAAE,EAAAD,EAAAC,EAAAD,EAAA,OAAAd,EAAAJ,EAAAgB,EAAA,EAAAI,SAAAhB,EAAAJ,GAAA,KAAAI,EAAAH,EAAAe,EAAA,EAAAI,SAAAhB,EAAAH,GAAA,KAAAG,EAAAF,EAAAc,EAAA,EAAAI,SAAAhB,EAAAF,GAAA,KAAAE,EAAAD,EAAAa,EAAA,EAAAZ,EAAAD,EAAA,GAAAC,GAAAA,EAAAiB,MAAA,WAAA,OAAAxB,EAAAC,MAAAC,KAAAK,EAAAJ,EAAAI,EAAAF,EAAAE,EAAAH,EAAAG,EAAAD,IAAAC,EAAAO,aAAAd,EAAAC,MAAAwB,QAAA,SAAAC,EAAAC,GAAA,IAAA,IAAAlB,GAAA,KAAAA,EAAAiB,EAAAC,IAAAA,GAAAC,gBAAA,eAAAnB,MAAAiB,EAAAA,EAAAG,UAAAjB,SAAAZ,EAAA8B,SAAAJ,EAAAK,IAAA,GAAA,WAAA,OAAA/B,EAAAC,MAAA+B,MAAAvB,EAAA,oBAAAA,EAAA,cAAAA,IAAAT,EAAAC,MAAA+B,MAAA,SAAAC,GAAA,IAAAC,EAAAC,EAAAnC,EAAAC,MAAAC,KAAA,GAAAgC,EAAA,kEAAAE,KAAAH,GAAA,OAAAE,EAAAZ,SAAAW,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAA,KAAA,GAAAA,EAAA,+FAAAE,KAAAH,GAAA,OAAAE,EAAAZ,SAAAW,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAA,IAAAG,WAAAH,EAAA,KAAA,GAAAA,EAAA,mGAAAE,KAAAH,GAAA,OAAAE,EAAA,KAAAE,WAAAH,EAAA,IAAA,KAAAG,WAAAH,EAAA,IAAA,KAAAG,WAAAH,EAAA,KAAA,GAAAA,EAAA,gIAAAE,KAAAH,GAAA,OAAAE,EAAA,KAAAE,WAAAH,EAAA,IAAA,KAAAG,WAAAH,EAAA,IAAA,KAAAG,WAAAH,EAAA,IAAAG,WAAAH,EAAA,KAAA,GAAAA,EAAA,oDAAAE,KAAAH,GAAA,OAAAE,EAAAZ,SAAAW,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAA,KAAA,GAAAA,EAAA,2CAAAE,KAAAH,GAAA,OAAAE,EAAAZ,SAAAW,EAAA,GAAAA,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAAA,EAAA,GAAA,IAAAX,SAAAW,EAAA,GAAAA,EAAA,GAAA,KAAAI,EAAAtC,EAAAuC,KAAAN,GAAAL,cAAA,MAAA,eAAAU,EAAAH,EAAA,IAAA,IAAA,IAAA,GAAAA,GAAAD,EAAAM,EAAAF,IAAA,CAAA,EAAA,EAAA,IAAA,GAAAJ,EAAA,GAAAA,EAAA,KAAA,IAAAM,EAAA,CAAAC,KAAA,CAAA,EAAA,IAAA,KAAAC,MAAA,CAAA,IAAA,IAAA,KAAAC,MAAA,CAAA,IAAA,IAAA,KAAAC,MAAA,CAAA,EAAA,EAAA,GAAAC,KAAA,CAAA,EAAA,EAAA,KAAAC,MAAA,CAAA,IAAA,GAAA,IAAAC,KAAA,CAAA,EAAA,IAAA,KAAAC,SAAA,CAAA,EAAA,EAAA,KAAAC,SAAA,CAAA,EAAA,IAAA,KAAAC,SAAA,CAAA,IAAA,IAAA,KAAAC,UAAA,CAAA,EAAA,IAAA,GAAAC,UAAA,CAAA,IAAA,IAAA,KAAAC,YAAA,CAAA,IAAA,EAAA,KAAAC,epF,GAAA,IAAAqF,EAAAC,OAAAC,UAAAF,eAAA,SAAAG,EAAAC,EAAAC,GAAA,IAAAC,EAAAD,EAAAE,SAAA,IAAAH,GAAA,GAAA,GAAA,MAAAE,KAAAA,EAAAE,SAAAC,cAAA,WAAAC,UAAAN,EAAAzF,EAAA2F,GAAAhE,IAAA,CAAAqE,UAAA,MAAAC,SAAA,WAAAC,KAAA,EAAAC,IAAA,IAAAC,SAAAV,IAAAC,EAAAU,YAAA,CAAA,IAAAC,OAAAC,mBAAA,MAAA,IAAAC,MAAA,yMAAAb,EAAAW,OAAAC,mBAAAE,YAAAd,GAAAe,KAAAf,QAAAA,EAAAgB,EAAAD,KAAAC,QAAAhB,EAAAU,WAAA,MAAAO,EAAAN,OAAAM,kBAAA,EAAAC,EAAAF,EAAAG,8BAAAH,EAAAI,2BAAAJ,EAAAK,0BAAAL,EAAAM,yBAAAN,EAAAO,wBAAA,EAAAR,KAAAS,WAAAP,EAAAC,EAAAH,KAAAU,OAAA1B,EAAA2B,QAAA3B,EAAA4B,UAAAZ,KAAAa,cAAA,KAAAb,KAAAc,KAAA,GAAAd,KAAAe,WAAA,GAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,IAAAC,EAAA,GAAAC,EAAA,CAAAC,OAAA,CAAA,UAAA,UAAA,UAAA,UAAA,WAAAC,OAAA,CAAAC,MAAA,EAAAC,UAAA,EAAAC,eAAA,KAAAC,oBAAA,OAAA5C,UAAA,KAAAO,SAAA,KAAAsC,OAAA,EAAAC,gBAAA,KAAAC,kBAAA,IAAAC,OAAA,MAAAC,MAAA,CAAAR,KAAA,KAAAlC,SAAA,SAAA2C,KAAA,KAAAC,KAAA,KAAA5I,MAAA,KAAA6I,UAAA,KAAAC,UAAA,KAAAC,iBAAA,KAAA5H,IAAA,KAAAE,IAAA,KAAA2H,gBAAA,KAAAC,MAAA,KAAAC,cAAA,KAAAC,WAAA,KAAAC,YAAA,KAAAC,aAAA,KAAAC,WAAA,KAAAC,mBAAA,KAAAC,aAAA,KAAAC,SAAA,KAAAC,YAAA,MAAAC,MAAA,CAAAX,gBAAA,IAAAhD,SAAA,QAAA4D,MAAA,GAAAC,MAAA,GAAA/B,OAAA,CAAAgC,OAAA,CAAA5B,MAAA,EAAA6B,OAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,UAAA,UAAAC,OAAA,UAAAC,MAAA,CAAAJ,UAAA,EAAAC,MAAA,EAAAC,UAAA,KAAAG,OAAA,GAAAC,KAAA,CAAApC,MAAA,EAAA8B,UAAA,EAAAO,SAAA,EAAAN,MAAA,EAAAC,UAAA,KAAAM,MAAA,OAAAC,YAAA,EAAAC,MAAA,GAAAC,WAAA,EAAAC,eAAA,MAAAC,KAAA,CAAA3C,MAAA,EAAA4C,WAAA,EAAA9K,MAAA,UAAAuI,gBAAA,KAAAwC,YAAA,KAAAlC,UAAA,KAAAP,OAAA,EAAA0C,YAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,gBAAA,KAAAC,SAAA,KAAAC,cAAA,UAAAC,kBAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,eAAA,EAAAC,kBAAA,IAAAC,YAAA,CAAAC,sBAAA,IAAA,IAAAC,MAAA,IAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAC,EAAA,KAAAtC,EAAA,GAAAC,EAAA,GAAAsC,EAAA,CAAAlG,KAAA,EAAAmG,MAAA,EAAAlG,IAAA,EAAAmG,OAAA,GAAAC,EAAA,EAAAC,EAAA,EAAAV,EAAA,CAAAW,eAAA,GAAAC,eAAA,GAAAC,kBAAA,GAAAC,cAAA,GAAAC,eAAA,GAAAC,WAAA,GAAAC,KAAA,GAAAC,WAAA,GAAAC,YAAA,GAAAC,SAAA,IAAAC,EAAAzG,KAAAyG,EAAAC,QAAAA,EAAAD,EAAAE,UAAAA,EAAAF,EAAAJ,KAAAA,EAAAI,EAAAG,eAAA,WAAA,OAAA3F,GAAAwF,EAAAI,UAAA,WAAA,OAAAxB,EAAApG,SAAAwH,EAAAK,cAAA,WAAA,OAAApB,GAAAe,EAAA9F,MAAA,WAAA,OAAAkF,GAAAY,EAAA7F,OAAA,WAAA,OAAAkF,GAAAW,EAAAM,OAAA,WAAA,IAAAlN,EAAA0L,EAAAwB,SAAA,OAAAlN,EAAA2F,MAAAkG,EAAAlG,KAAA3F,EAAA4F,KAAAiG,EAAAjG,IAAA5F,GAAA4M,EAAAO,QAAA,WAAA,OAAA3F,GAAAoF,EAAAQ,QAAA,WAAA,IAAAzL,EAAA,GAAA,OAAAlC,EAAA4N,KAAA/D,EAAAgE,OAAA/D,GAAA,SAAAgE,EAAAC,GAAAA,IAAA7L,EAAA6L,EAAA/H,WAAA,GAAA+H,EAAAC,EAAAD,EAAAC,EAAA,IAAA,QAAAD,KAAA7L,GAAAiL,EAAAc,SAAA,WAAA,OAAApE,GAAAsD,EAAAe,SAAA,WAAA,OAAApE,GAAAqD,EAAAgB,IAAAC,EAAAjB,EAAAkB,IAAA,SAAAC,GAAA,IAAA3N,EAAAoN,EAAAQ,EAAArM,EAAA,GAAA,IAAAvB,EAAA,EAAAA,EAAAkJ,EAAAjJ,SAAAD,EAAA,IAAAoN,EAAAlE,EAAAlJ,KAAAoN,EAAAS,OAAAD,EAAA,IAAAR,EAAAC,EAAA,MAAAM,EAAAC,IAAA,GAAAR,EAAAC,IAAAO,EAAA,KAAA,MAAAD,EAAAC,IAAA,CAAArM,EAAAgE,KAAA6H,EAAAM,IAAAC,EAAAC,IAAA,MAAA,IAAA5N,EAAA,EAAAA,EAAAmJ,EAAAlJ,SAAAD,EAAA,IAAAoN,EAAAjE,EAAAnJ,KAAAoN,EAAAS,OAAAD,EAAA,IAAAR,EAAAC,EAAA,MAAAM,EAAAC,IAAA,GAAAR,EAAAC,IAAAO,EAAA,KAAA,MAAAD,EAAAC,IAAA,CAAArM,EAAAiE,IAAA4H,EAAAM,IAAAC,EAAAC,IAAA,MAAA,OAAArM,GAAAiL,EAAAsB,WAAA,WAAA,OAAAzG,GAAAmF,EAAAuB,UAAAA,EAAAvB,EAAAwB,YAAAA,EAAAxB,EAAAyB,qBAAAA,EAAAzB,EAAA0B,YAAA,SAAAC,GAAA,MAAA,CAAA5I,KAAA3E,SAAAsI,EAAAkF,EAAAD,EAAA,KAAA,GAAAT,KAAAS,EAAAE,GAAA5C,EAAAlG,KAAA,IAAAC,IAAA5E,SAAAuI,EAAAiF,EAAAD,EAAA,KAAA,GAAAT,KAAAS,EAAAG,GAAA7C,EAAAjG,IAAA,MAAAgH,EAAAD,SAAAA,EAAAC,EAAA+B,QAAA,WAAAhC,IAAAvF,EAAAwH,WAAA,QAAAC,QAAArH,EAAA,GAAA8B,EAAA,GAAAC,EAAA,GAAAuF,EAAA,GAAAlC,EAAArB,EAAAK,EAAAD,EAAAD,EAAAD,EAAAD,EAAA/D,EAAA,MAAAmF,EAAA/F,OAAA,WAAA,IAAAC,EAAAM,EAAAN,QAAAC,EAAAK,EAAAL,SAAAyE,EAAA3E,OAAAC,EAAAC,GAAA0E,EAAA5E,OAAAC,EAAAC,IAAA6F,EAAArB,MAAAA,EAAA,IAAA,IAAAwD,EAAA,CAAA9J,OAAAA,GAAA7E,EAAA,EAAAA,EAAAmH,EAAAlH,SAAAD,EAAA,CAAA,IAAA4O,EAAAzH,EAAAnH,GAAA4O,EAAAC,KAAArC,EAAAmC,GAAAC,EAAAvH,SAAAhI,EAAAyP,QAAA,EAAAzH,EAAAuH,EAAAvH,SAAAhI,EAAAyP,QAAA,EAAAzH,EAAA0H,GAAAA,GAAAA,EAAAzH,SAAAD,EAAAC,OAAAyH,EAAAzH,QAAA,MAAAD,EAAAW,MAAA1I,QAAA+H,EAAAW,MAAA1I,MAAAD,EAAAC,MAAA+B,MAAAgG,EAAA8C,KAAA7K,OAAAc,MAAA,IAAA,KAAAE,YAAA,MAAA+G,EAAA4B,MAAA3J,QAAA+H,EAAA4B,MAAA3J,MAAAD,EAAAC,MAAA+B,MAAAgG,EAAA8C,KAAA7K,OAAAc,MAAA,IAAA,KAAAE,YAAA,MAAA+G,EAAAW,MAAAG,YAAAd,EAAAW,MAAAG,UAAAd,EAAA8C,KAAAhC,WAAAd,EAAAW,MAAA1I,OAAA,MAAA+H,EAAA4B,MAAAd,YAAAd,EAAA4B,MAAAd,UAAAd,EAAA8C,KAAAhC,WAAAd,EAAA4B,MAAA3J,OAAA,MAAA+H,EAAA8C,KAAAE,cAAAhD,EAAA8C,KAAAE,YAAAhD,EAAA8C,KAAA7K,OAAA,MAAA+H,EAAA8C,KAAAhC,YAAAd,EAAA8C,KAAAhC,UAAA9I,EAAAC,MAAA+B,MAAAgG,EAAA8C,KAAA7K,OAAAc,MAAA,IAAA,KAAAE,YAAA,IAAAN,EAAAgP,EAAAC,EAAA5B,EAAA6B,GAAAC,EAAAnI,EAAAhG,IAAA,eAAAmO,EAAAC,QAAA,KAAA,IAAA,GAAAC,EAAA,CAAAC,MAAAtI,EAAAhG,IAAA,cAAAuO,KAAAC,KAAAC,MAAA,GAAAP,GAAAQ,QAAA1I,EAAAhG,IAAA,gBAAA2O,OAAA3I,EAAAhG,IAAA,eAAA4O,OAAA5I,EAAAhG,IAAA,gBAAA,IAAAiO,EAAA5H,EAAA6B,MAAAjJ,QAAA,EAAAD,EAAA,EAAAA,EAAAiP,IAAAjP,GAAAgP,EAAA3H,EAAA6B,MAAAlJ,MAAAgP,EAAA7G,YAAA6G,EAAA7G,UAAA6G,EAAA1P,OAAA0P,EAAA3P,EAAAyP,QAAA,EAAA,GAAAzH,EAAAW,MAAAgH,IAAA3H,EAAA6B,MAAAlJ,GAAAgP,GAAA9G,OAAA8G,EAAA9G,KAAA7I,EAAAyP,OAAA,GAAAO,EAAAL,EAAA9G,MAAA8G,EAAA9G,KAAA5I,QAAA0P,EAAA9G,KAAA5I,MAAA0P,EAAA1P,OAAA0P,EAAA9G,KAAA2H,aAAAb,EAAA9G,KAAA2H,WAAAL,KAAAC,MAAA,KAAAT,EAAA9G,KAAAqH,QAAA,IAAAN,EAAA5H,EAAA8B,MAAAlJ,QAAA,EAAAD,EAAA,EAAAA,EAAAiP,IAAAjP,GAAAgP,EAAA3H,EAAA8B,MAAAnJ,MAAAgP,EAAA7G,YAAA6G,EAAA7G,UAAA6G,EAAA1P,OAAA0P,EAAA3P,EAAAyP,QAAA,EAAA,GAAAzH,EAAA4B,MAAA+F,IAAA3H,EAAA8B,MAAAnJ,GAAAgP,GAAA9G,OAAA8G,EAAA9G,KAAA7I,EAAAyP,OAAA,GAAAO,EAAAL,EAAA9G,MAAA8G,EAAA9G,KAAA5I,QAAA0P,EAAA9G,KAAA5I,MAAA0P,EAAA1P,OAAA0P,EAAA9G,KAAA2H,aAAAb,EAAA9G,KAAA2H,WAAAL,KAAAC,MAAA,KAAAT,EAAA9G,KAAAqH,QAAA,IAAAlI,EAAAW,MAAA8H,SAAA,MAAAzI,EAAAW,MAAAO,QAAAlB,EAAAW,MAAAO,MAAAlB,EAAAW,MAAA8H,SAAAzI,EAAA4B,MAAA6G,SAAA,MAAAzI,EAAA4B,MAAAV,QAAAlB,EAAA4B,MAAAV,MAAAlB,EAAA4B,MAAA6G,SAAAzI,EAAA0I,SAAA1I,EAAA6B,MAAA,GAAA7J,EAAAyP,QAAA,EAAA,GAAAzH,EAAAW,MAAAX,EAAA0I,QAAA1I,EAAA6B,MAAA,GAAA5D,SAAA,MAAA,MAAA+B,EAAA0I,OAAAtP,MAAA4G,EAAA6B,MAAA,GAAAzI,IAAA,MAAA,MAAA4G,EAAA0I,OAAApP,MAAA0G,EAAA6B,MAAA,GAAAvI,IAAA,OAAA0G,EAAA2I,SAAA3I,EAAA8B,MAAA,GAAA9J,EAAAyP,QAAA,EAAA,GAAAzH,EAAA4B,MAAA5B,EAAA2I,QAAA3I,EAAA8B,MAAA,GAAA7D,SAAA,QAAA,MAAA+B,EAAA2I,OAAAvP,MAAA4G,EAAA8B,MAAA,GAAA1I,IAAA,MAAA,MAAA4G,EAAA2I,OAAArP,MAAA0G,EAAA8B,MAAA,GAAAxI,IAAA,OAAA0G,EAAA8C,KAAA8F,eAAA5I,EAAA8C,KAAAO,SAAArD,EAAA8C,KAAA8F,cAAA5I,EAAA8C,KAAA+F,oBAAA7I,EAAA8C,KAAAQ,cAAAtD,EAAA8C,KAAA+F,mBAAA7I,EAAAqC,OAAArK,EAAAyP,QAAA,EAAAzH,EAAAD,OAAAsC,MAAArC,EAAAqC,OAAArC,EAAA+B,QAAA/J,EAAAyP,QAAA,EAAAzH,EAAAD,OAAAgC,OAAA/B,EAAA+B,QAAA/B,EAAAuC,MAAAvK,EAAAyP,QAAA,EAAAzH,EAAAD,OAAAwC,KAAAvC,EAAAuC,MAAA,MAAAvC,EAAA4C,aAAA5C,EAAAD,OAAA6C,WAAA5C,EAAA4C,YAAA,MAAA5C,EAAA6C,iBAAA7C,EAAAD,OAAA8C,eAAA7C,EAAA6C,gBAAAlK,EAAA,EAAAA,EAAAqH,EAAA6B,MAAAjJ,SAAAD,EAAAmQ,EAAAjH,EAAAlJ,EAAA,GAAAqH,QAAAA,EAAA6B,MAAAlJ,GAAA,IAAAA,EAAA,EAAAA,EAAAqH,EAAA8B,MAAAlJ,SAAAD,EAAAmQ,EAAAhH,EAAAnJ,EAAA,GAAAqH,QAAAA,EAAA8B,MAAAnJ,GAAA,IAAAqN,KAAAlC,EAAA9D,EAAA8D,MAAAkC,IAAAhG,EAAA8D,MAAAkC,GAAApN,SAAAkL,EAAAkC,GAAAlC,EAAAkC,GAAAH,OAAA7F,EAAA8D,MAAAkC,KAAA+C,EAAAjF,EAAAW,eAAA,CAAAzE,IAAAL,EAAAhG,IAAA,UAAA,GAAAiE,WAAAoL,OAAA,WAAA,OAAAhR,EAAA0G,MAAAuK,SAAA,kBAAAjR,EAAA0G,MAAAuK,SAAA,eAAAC,SAAA,UAAAvJ,EAAAhG,IAAA,aAAAgG,EAAAhG,IAAA,WAAA,YAAAoK,EAAA,IAAAvG,EAAA,YAAAmC,GAAAqE,EAAA,IAAAxG,EAAA,eAAAmC,GAAAuE,EAAAH,EAAApF,QAAAwF,EAAAH,EAAArF,QAAAsF,EAAAjM,EAAAgM,EAAArG,SAAAwL,SAAAC,EAAAzJ,EAAA0J,KAAA,QAAA,SAAAN,EAAAO,EAAAC,GAAAA,EAAA,CAAApE,GAAAU,OAAA0D,GAAA,IAAA,IAAA5Q,EAAA,EAAAA,EAAA2Q,EAAA1Q,SAAAD,EAAA2Q,EAAA3Q,GAAA6Q,MAAA9K,KAAA6K,GAAA,SAAAnE,EAAA1M,GAAA,IAAAC,EAAA8Q,GAAA1J,EAAA,SAAArH,GAAA,IAAA,IAAAwB,EAAA,GAAAvB,EAAA,EAAAA,EAAAD,EAAAE,SAAAD,EAAA,CAAA,IAAA+Q,EAAA1R,EAAAyP,QAAA,EAAA,GAAAzH,EAAAD,QAAA,MAAArH,EAAAC,GAAA0Q,MAAAK,EAAAL,KAAA3Q,EAAAC,GAAA0Q,YAAA3Q,EAAAC,GAAA0Q,KAAArR,EAAAyP,QAAA,EAAAiC,EAAAhR,EAAAC,IAAAD,EAAAC,GAAA0Q,KAAAK,EAAAL,MAAAK,EAAAL,KAAA3Q,EAAAC,GAAAuB,EAAAyP,KAAAD,GAAA,OAAAxP,EAAA0P,CAAAlR,IAAAE,OAAAiR,GAAA,EAAA,IAAAlR,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,EAAA,CAAA,IAAAmR,EAAA/J,EAAApH,GAAAV,MAAA,MAAA6R,IAAAL,IAAA,iBAAAK,GAAAD,EAAAC,IAAAD,EAAAC,IAAAL,GAAAI,IAAAJ,EAAAI,EAAA,GAAA,IAAApR,EAAAwH,EAAA,GAAA8J,EAAA/J,EAAAC,OAAA+J,EAAAD,EAAAnR,OAAAqR,EAAA,EAAA,IAAAtR,EAAA,EAAAA,EAAA8Q,EAAA9Q,IAAAF,EAAAT,EAAAC,MAAA+B,MAAA+P,EAAApR,EAAAqR,IAAA,QAAArR,EAAAqR,GAAA,GAAArR,IAAAsR,EAAA,GAAAA,EAAAA,EAAA,IAAAA,EAAA,GAAA,GAAAA,GAAAhK,EAAAtH,GAAAF,EAAAM,MAAA,MAAA,EAAAkR,GAAA,IAAAP,EAAAQ,EAAA,EAAA,IAAAvR,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,EAAA,CAAA,GAAA,OAAA+Q,EAAA3J,EAAApH,IAAAV,OAAAyR,EAAAzR,MAAAgI,EAAAiK,GAAAjR,aAAAiR,GAAA,iBAAAR,EAAAzR,QAAAyR,EAAAzR,MAAAgI,EAAAyJ,EAAAzR,OAAAgB,YAAA,MAAAyQ,EAAArH,MAAAlC,KAAA,CAAA,IAAAgK,EAAAhK,GAAA,EAAA,IAAAgK,KAAAT,EAAA,GAAAA,EAAAS,IAAAT,EAAAS,GAAAhK,KAAA,CAAAA,GAAA,EAAA,MAAAA,IAAAuJ,EAAArH,MAAAlC,MAAA,GAAA,MAAAuJ,EAAArH,MAAAM,OAAA+G,EAAArH,MAAAM,OAAA+G,EAAArH,MAAAH,MAAAwH,EAAA/I,MAAAmI,EAAAjH,EAAAkF,EAAA2C,EAAA,MAAAA,EAAA9H,MAAAkH,EAAAhH,EAAAiF,EAAA2C,EAAA,MAAA,IAAA/Q,EAAAyR,EAAAC,EAAAlQ,EAAAuP,EAAA3H,EAAAuI,EAAAC,EAAAvR,EAAAuO,EAAA8B,EAAAmB,EAAAC,EAAAC,EAAAC,EAAAC,OAAAC,kBAAAC,EAAAF,OAAAG,kBAAAC,EAAAJ,OAAAK,UAAA,SAAAC,EAAAnF,EAAA3M,EAAAE,GAAAF,EAAA2M,EAAAoF,SAAA/R,IAAA4R,IAAAjF,EAAAoF,QAAA/R,GAAAE,EAAAyM,EAAAqF,SAAA9R,GAAA0R,IAAAjF,EAAAqF,QAAA9R,GAAA,IAAAtB,EAAA4N,KAAAyF,IAAA,SAAAvF,EAAAC,GAAAA,EAAAoF,QAAAR,EAAA5E,EAAAqF,QAAAN,EAAA/E,EAAAS,MAAA,IAAA7N,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,GAAA+Q,EAAA3J,EAAApH,IAAA2S,WAAA,CAAAvJ,OAAA,IAAAgH,EAAAjF,EAAAY,eAAA,CAAAgF,EAAAA,EAAAL,KAAAK,EAAA4B,aAAA,IAAA3S,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,EAAA,GAAA+Q,EAAA3J,EAAApH,GAAA0Q,EAAAK,EAAAL,MAAAmB,EAAAd,EAAA4B,WAAAd,WAAAA,EAAA,IAAAb,KAAA,CAAA3C,GAAA,EAAAuE,QAAA,EAAAC,UAAA,IAAAhB,EAAAb,KAAA,CAAA1C,GAAA,EAAAsE,QAAA,EAAAC,UAAA,KAAA9B,EAAAnH,KAAApC,MAAAuJ,EAAArH,MAAAlC,MAAAuJ,EAAArH,MAAAH,QAAAwI,KAAAhB,EAAAnH,KAAApC,MAAAuJ,EAAAnH,KAAAI,MAAA+G,EAAArH,MAAAlC,MAAAuJ,EAAArH,MAAAM,MAAA6H,EAAAb,KAAA,CAAA1C,GAAA,EAAAsE,QAAA,EAAAC,UAAA,EAAAC,aAAA,EAAAf,UAAAA,IAAAhB,EAAAnH,KAAAG,oBAAA8H,EAAAA,EAAA5R,OAAA,GAAAqO,EAAAuD,EAAAA,EAAA5R,OAAA,GAAAoO,GAAA,IAAA0C,EAAA4B,WAAAd,OAAAA,GAAA,MAAAd,EAAA4B,WAAAI,UAAA,CAAAhC,EAAA4B,WAAAI,UAAAlB,EAAA5R,OAAA0R,EAAAZ,EAAA4B,WAAAI,UAAA3J,EAAA2H,EAAA4B,WAAAvJ,OAAA,IAAA4J,EAAAjC,EAAArH,MAAAlC,MAAAuJ,EAAArH,MAAAC,MAAA,IAAAoH,EAAA/I,MAAA6F,KAAAkD,EAAA9H,MAAA4E,MAAA,EAAA4D,EAAAC,EAAA,EAAAD,EAAAf,EAAAzQ,SAAAwR,EAAAC,GAAAC,EAAA,CAAA,IAAAsB,EAAA,OAAArE,EAAA8B,EAAAe,IAAA,IAAAwB,EAAA,IAAAzR,EAAA,EAAAA,EAAAmQ,IAAAnQ,EAAAoQ,EAAAhD,EAAApN,IAAAnB,EAAAwR,EAAArQ,MAAAnB,EAAAuS,QAAA,MAAAhB,IAAAA,GAAAA,EAAAsB,MAAAtB,GAAAA,EAAA,KAAAA,GAAAuB,EAAAA,EAAAvB,EAAAS,EAAAT,IAAAuB,EAAAA,IAAAvB,GAAAS,IAAA,MAAAT,IAAAvR,EAAAwS,WAAAI,GAAA,GAAA,MAAA5S,EAAAyS,eAAAlB,EAAAvR,EAAAyS,gBAAA,IAAAzS,EAAA0R,YAAA1R,EAAAgO,GAAAkE,EAAAxB,EAAA/I,MAAA4J,EAAAA,GAAAvR,EAAAiO,GAAAiE,EAAAxB,EAAA9H,MAAA2I,EAAAA,KAAAxI,EAAAsI,EAAAlQ,GAAAoQ,EAAA,GAAAqB,EAAA,IAAAzR,EAAA,EAAAA,EAAAmQ,IAAAnQ,EAAA,OAAAoQ,EAAAxI,EAAAsI,EAAAlQ,MAAA,KAAAnB,EAAAwR,EAAArQ,IAAAuQ,YAAA1R,EAAAgO,GAAAkE,EAAAxB,EAAA/I,MAAA4J,EAAAA,GAAAvR,EAAAiO,GAAAiE,EAAAxB,EAAA9H,MAAA2I,EAAAA,IAAAxI,EAAAsI,EAAAlQ,GAAA,UAAA,GAAAwR,GAAA,EAAAtB,GAAA,MAAAtI,EAAAsI,EAAAC,IAAAvI,EAAAsI,EAAAC,IAAAvI,EAAAsI,IAAAtI,EAAAsI,EAAAC,EAAA,IAAAvI,EAAAsI,EAAA,GAAA,CAAA,IAAAlQ,EAAA,EAAAA,EAAAmQ,IAAAnQ,EAAA4H,EAAAsI,EAAAC,EAAAnQ,GAAA4H,EAAAsI,EAAAlQ,GAAA4H,EAAAsI,EAAA,GAAAtI,EAAAsI,EAAAC,EAAA,GAAAD,GAAAC,IAAA,IAAA3R,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,EAAA+Q,EAAA3J,EAAApH,GAAAoQ,EAAAjF,EAAAa,kBAAA,CAAA+E,EAAAA,EAAA4B,aAAA,IAAA3S,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,EAAA,CAAA+Q,EAAA3J,EAAApH,GAAAoJ,EAAA2H,EAAA4B,WAAAvJ,OAAAuI,EAAAZ,EAAA4B,WAAAI,UAAAlB,EAAAd,EAAA4B,WAAAd,OAAA,IAAAuB,EAAApB,EAAAqB,EAAArB,EAAAsB,EAAAnB,EAAAoB,EAAApB,EAAA,IAAAV,EAAA,EAAAA,EAAArI,EAAAnJ,OAAAwR,GAAAE,EAAA,GAAA,MAAAvI,EAAAqI,GAAA,IAAAjQ,EAAA,EAAAA,EAAAmQ,IAAAnQ,EAAAoQ,EAAAxI,EAAAqI,EAAAjQ,IAAAnB,EAAAwR,EAAArQ,MAAA,IAAAnB,EAAA0R,WAAAH,GAAAS,GAAAT,IAAAS,IAAAhS,EAAAgO,IAAAuD,EAAAwB,IAAAA,EAAAxB,GAAA0B,EAAA1B,IAAA0B,EAAA1B,IAAAvR,EAAAiO,IAAAsD,EAAAyB,IAAAA,EAAAzB,GAAA2B,EAAA3B,IAAA2B,EAAA3B,KAAA,GAAAb,EAAAnH,KAAApC,KAAA,CAAA,OAAAuJ,EAAAnH,KAAAE,OAAA,IAAA,OAAAgI,EAAA,EAAA,MAAA,IAAA,QAAAA,GAAAf,EAAAnH,KAAAC,SAAA,MAAA,QAAAiI,GAAAf,EAAAnH,KAAAC,SAAA,EAAAkH,EAAAnH,KAAAG,YAAAsJ,GAAAvB,EAAAyB,GAAAzB,EAAAf,EAAAnH,KAAAC,WAAAuJ,GAAAtB,EAAAwB,GAAAxB,EAAAf,EAAAnH,KAAAC,UAAA0I,EAAAxB,EAAA/I,MAAAoL,EAAAE,GAAAf,EAAAxB,EAAA9H,MAAAoK,EAAAE,GAAAlU,EAAA4N,KAAAyF,IAAA,SAAAvF,EAAAC,GAAAA,EAAAoF,SAAAR,IAAA5E,EAAAoF,QAAA,MAAApF,EAAAqF,SAAAN,IAAA/E,EAAAqF,QAAA,QAAA,SAAArE,EAAAoF,EAAAC,GAAA9T,EAAA6T,EAAAC,EAAA,QAAA,OAAA9T,EAAA,iBAAAA,EAAA,iBAAAA,EAAAA,EAAA0N,EAAA1N,GAAA,EAAAA,EAAA,SAAA+S,IAAA,OAAArT,EAAAqU,KAAAxK,EAAAgE,OAAA/D,GAAA,SAAAxJ,GAAA,OAAAA,IAAA,SAAA8N,EAAAE,GAAA,IAAA,IAAAP,EAAA7L,EAAA,GAAAvB,EAAA,EAAAA,EAAAkJ,EAAAjJ,SAAAD,GAAAoN,EAAAlE,EAAAlJ,KAAAoN,EAAAS,OAAAtM,EAAA,IAAA6L,EAAAC,GAAAD,EAAAI,IAAAG,EAAApI,OAAA,IAAAvF,EAAA,EAAAA,EAAAmJ,EAAAlJ,SAAAD,GAAAoN,EAAAjE,EAAAnJ,KAAAoN,EAAAS,OAAAtM,EAAA,IAAA6L,EAAAC,GAAAD,EAAAI,IAAAG,EAAAnI,MAAA,YAAAmO,IAAApS,EAAAqS,KAAArS,EAAA8M,EAAA9M,EAAAqS,SAAAD,IAAApS,EAAAsS,KAAAtS,EAAA+M,EAAA/M,EAAAsS,IAAAtS,EAAA,SAAA4O,EAAA2D,EAAAlB,GAAA,OAAAkB,EAAAlB,EAAA,KAAAkB,EAAAlB,EAAA,GAAA,CAAAvF,EAAAuF,EAAAvN,UAAAyO,GAAA5K,EAAA,IAAA,IAAA7B,QAAAhI,EAAAyP,QAAA,EAAA,GAAAgF,GAAA5K,EAAA7B,EAAAW,MAAAX,EAAA4B,SAAA6K,EAAAlB,EAAA,GAAA,SAAArG,IAAAwH,GAAAC,aAAAD,GAAAzI,EAAAkF,OAAA,YAAAyD,GAAA3I,EAAAkF,OAAA,aAAA0D,GAAA5I,EAAAkF,OAAA,QAAA2D,GAAA/D,EAAAjF,EAAAoB,SAAA,CAAAjB,IAAA,SAAAoB,IAAA,IAAA1M,EAAAL,EAAAmU,EAAApB,IAAA0B,EAAA/M,EAAA8C,KAAA3C,KAAA,IAAA7H,KAAA8L,EAAA,CAAA,IAAA7D,EAAAP,EAAA8C,KAAAvC,QAAA,EAAA6D,EAAA9L,GAAA,iBAAAiI,EAAAA,EAAAA,EAAAjI,IAAA,EAAA,IAAAA,KAAAyQ,EAAAjF,EAAAc,cAAA,CAAAR,IAAAA,EAAA,iBAAApE,EAAA8C,KAAAK,YAAAiB,EAAA9L,IAAAyU,EAAA/M,EAAA8C,KAAAK,YAAA7K,GAAA,EAAA8L,EAAA9L,IAAAyU,EAAA/M,EAAA8C,KAAAK,YAAA,EAAA,GAAAnL,EAAA4N,KAAA6G,EAAA,SAAA3G,EAAAC,GAAA,IAAAxF,EAAAyM,EAAAjH,EAAA/F,QAAA+F,GAAAA,EAAA5F,KAAA,MAAA6M,EAAA7M,KAAA4F,EAAAS,KAAAwG,EAAA7M,KAAA4F,EAAAzE,aAAA,MAAA0L,EAAA1L,aAAAyE,EAAA5F,KAAA6M,EAAA1L,aAAAyE,GAAA2B,EAAA3B,EAAA/F,QAAA5G,IAAA,MAAAsO,EAAAtO,IAAAsO,EAAAtO,IAAA2M,EAAAoF,SAAA7R,IAAA,MAAAoO,EAAApO,IAAAoO,EAAApO,IAAAyM,EAAAqF,SAAAX,EAAAnR,EAAAF,EAAA,GAAAqR,GAAAwC,EAAA,GAAA3T,EAAA,EAAA,IAAA,MAAAoO,EAAAtO,MAAAA,GAAA6T,GAAA,MAAAvF,EAAApO,KAAA,MAAAoO,EAAAtO,MAAAE,GAAA2T,IAAA,OAAA1M,EAAAmH,EAAAzG,mBAAA,MAAAyG,EAAAtO,MAAAA,GAAAqR,EAAAlK,GAAA,GAAA,MAAAwF,EAAAoF,SAAA,GAAApF,EAAAoF,UAAA/R,EAAA,GAAA,MAAAsO,EAAApO,KAAA,GAAAA,GAAAmR,EAAAlK,IAAA,MAAAwF,EAAAqF,SAAArF,EAAAqF,SAAA,IAAA9R,EAAA,IAAAyM,EAAA3M,IAAAA,EAAA2M,EAAAzM,IAAAA,IAAAyT,EAAA,CAAA,IAAAG,EAAAlV,EAAAqU,KAAAI,EAAA,SAAA1G,GAAA,OAAAA,EAAA5F,MAAA4F,EAAAzE,eAAA,IAAAtJ,EAAA4N,KAAAsH,EAAA,SAAApH,EAAAC,GAAAoH,IAAApH,EAAAA,EAAA2B,EAAA3B,EAAA/F,QAAAyK,GAAAhC,EAAA,iBAAAf,EAAAxG,OAAA,EAAAwG,EAAAxG,MAAAwG,EAAAxG,MAAA,GAAAiH,KAAAiF,KAAA,KAAArH,EAAA/H,UAAA+F,EAAA1E,MAAA0E,EAAAzE,SAAAyG,EAAAzM,IAAAyM,EAAA3M,KAAAqP,GAAA4E,GAAAlF,KAAAmF,MAAAnF,KAAAoF,IAAA9C,GAAAtC,KAAAqF,MAAAC,EAAA/F,EAAAjG,aAAA,MAAAgM,GAAAA,EAAAJ,IAAAA,EAAAI,GAAA,IAAAC,EAAAC,EAAAxF,KAAAyF,IAAA,IAAAP,GAAAQ,EAAApD,EAAAkD,EAAA,GAAAE,EAAA,IAAA3F,EAAA,EAAA2F,EAAA,GAAA3F,EAAA,EAAA,KAAA2F,IAAA,MAAAJ,GAAAJ,EAAA,GAAAI,KAAAvF,EAAA,MAAAmF,IAAAnF,EAAA2F,EAAA,IAAA,EAAA,GAAA3F,GAAAyF,EAAA,MAAAjG,EAAA/F,aAAAuG,EAAAR,EAAA/F,cAAAuG,EAAAR,EAAA/F,aAAAoE,EAAA0E,MAAAA,EAAA1E,EAAAtE,aAAA0G,KAAA7O,IAAA,EAAA,MAAAmU,EAAAA,EAAAJ,GAAAtH,EAAArE,SAAAgG,EAAAhG,UAAAwG,EAAA,QAAAR,EAAA9G,OAAAmF,EAAA+H,cAAA,MAAA,IAAAtP,MAAA,4CAAAuH,EAAA+H,gBAAA/H,EAAA+H,cAAA,SAAA/H,GAAA,IAAA,IAAAgI,EACA/H,EAAAgI,EADA9M,EAAA,GAAA+M,GACAjI,EADAD,EAAA3M,KACA4U,EADAjI,EAAArE,UACAyG,KAAAmF,MAAAtH,EAAAgI,IADArV,EAAA,EAAAwR,EAAAS,OAAAsD,IAAAH,EAAA5D,EAAAA,EAAA8D,EAAAtV,EAAAoN,EAAArE,SAAAR,EAAAyI,KAAAQ,KAAAxR,EAAAwR,EAAApE,EAAAzM,KAAA6Q,GAAA4D,IAAA,OAAA7M,GAAA6E,EAAA5E,cAAA,SAAA9H,EAAA0M,GAAA,IAAAoI,EAAApI,EAAAtE,aAAA0G,KAAAyF,IAAA,GAAA7H,EAAAtE,cAAA,EAAA2M,EAAA,GAAAjG,KAAAC,MAAA/O,EAAA8U,GAAAA,EAAA,GAAA,MAAApI,EAAAtE,aAAA,CAAA,IAAA4M,EAAAD,EAAAE,QAAA,KAAAC,GAAA,GAAAF,EAAA,EAAAD,EAAAxV,OAAAyV,EAAA,EAAA,GAAAE,EAAAxI,EAAAtE,aAAA,OAAA8M,EAAAH,EAAAA,EAAA,MAAA,GAAAD,GAAAK,OAAA,EAAAzI,EAAAtE,aAAA8M,GAAA,OAAAH,IAAApW,EAAAyW,WAAA/G,EAAAvG,iBAAA4E,EAAA5E,cAAA,SAAAgJ,EAAApE,GAAA,MAAA,GAAA2B,EAAAvG,cAAAgJ,EAAApE,KAAA,MAAA2B,EAAAlG,qBAAAkM,GAAA,KAAA3H,EAAA/H,UAAA6D,EAAAC,GAAA4F,EAAAlG,mBAAA,KAAAkM,EAAAlH,MAAAkH,GAAA3H,IAAA,GAAA2I,EAAA3I,EAAA+H,cAAA/H,IAAAnN,SAAA,MAAA8O,EAAAtO,MAAA2M,EAAA3M,IAAA+O,KAAA/O,IAAA2M,EAAA3M,IAAAsV,EAAA,KAAA,MAAAhH,EAAApO,KAAA,EAAAoV,EAAA9V,SAAAmN,EAAAzM,IAAA6O,KAAA7O,IAAAyM,EAAAzM,IAAAoV,EAAAA,EAAA9V,OAAA,MAAAmN,EAAA+H,cAAA,SAAA/H,GAAA,IAAA,IAAAoE,EAAAjJ,EAAA,GAAAvI,EAAA,EAAAA,EAAA+U,EAAAxM,MAAAtI,SAAAD,EAAAwR,GAAAuD,EAAAxM,MAAAvI,GAAAwR,EAAAuD,EAAAtU,MAAAsU,EAAApU,IAAAoU,EAAAtU,KAAA+Q,EAAApE,EAAA3M,IAAA+Q,GAAApE,EAAAzM,IAAAyM,EAAA3M,KAAA8H,EAAAyI,KAAAQ,GAAA,OAAAjJ,GAAA6E,EAAAnF,MAAA,MAAA8G,EAAAjG,eAAAkN,EAAAxG,KAAA7O,IAAA,EAAA,EAAA6O,KAAAmF,MAAAnF,KAAAoF,IAAAxH,EAAA0E,OAAAtC,KAAAqF,OAAA,GAAAoB,EAAA7I,EAAA+H,cAAA/H,IAAAnN,QAAA,SAAAiW,MAAAD,EAAA,GAAAA,EAAA,IAAAE,QAAAH,MAAA5I,EAAAtE,aAAAkN,KAAAI,IAAApW,EAAAwR,EAAAjJ,EAAA6E,EAAAA,EAAAiJ,EAAAjJ,EAAA/F,QAAAkB,MAAAA,EAAA,GAAA,IAAA,MAAA8N,GAAA,iBAAAA,GAAA,EAAAA,EAAA9N,EAAA6E,EAAA+H,cAAA/H,GAAAiJ,IAAA9N,EAAAlJ,EAAAyW,WAAAO,GAAAA,EAAAjJ,GAAAiJ,GAAAjJ,EAAA7E,MAAA,GAAAvI,EAAA,EAAAA,EAAAuI,EAAAtI,SAAAD,EAAA,CAAA,IAAAsW,EAAA,KAAAC,EAAAhO,EAAAvI,GAAA,iBAAAuW,GAAA/E,GAAA+E,EAAA,GAAA,EAAAA,EAAAtW,SAAAqW,EAAAC,EAAA,KAAA/E,GAAA+E,EAAA,OAAAD,IAAAA,EAAAlJ,EAAA5E,cAAAgJ,EAAApE,IAAA8F,MAAA1B,IAAApE,EAAA7E,MAAAyI,KAAA,CAAAQ,EAAAA,EAAA8E,MAAAA,IAAA/N,GAAA6E,EAAAA,GAAA7E,MAAA6E,EAAA/F,QAAAiB,iBAAA,EAAAC,EAAAtI,SAAA,MAAAmN,EAAA/F,QAAA5G,MAAA2M,EAAA3M,IAAA+O,KAAA/O,IAAA2M,EAAA3M,IAAA8H,EAAA,GAAAiJ,IAAA,MAAApE,EAAA/F,QAAA1G,KAAA,EAAA4H,EAAAtI,SAAAmN,EAAAzM,IAAA6O,KAAA7O,IAAAyM,EAAAzM,IAAA4H,EAAAA,EAAAtI,OAAA,GAAAuR,KAAA,IAAAgF,IAAApJ,EAAAA,EAAA2B,EAAA3B,EAAA/F,QAAAkB,EAAA6E,EAAA7E,OAAA,GAAAE,EAAAsG,EAAAtG,YAAA,EAAAC,EAAAqG,EAAArG,aAAA,EAAA+N,EAAAhO,IAAA,KAAA2E,EAAA/H,UAAAmK,KAAAmF,MAAAvJ,EAAA1E,OAAA6B,EAAAtI,QAAA,IAAA,MAAAyW,EAAAtJ,EAAA/H,UAAA,QAAA+H,EAAA/H,UAAA+H,EAAAC,EAAA,OAAAsJ,EAAA,QAAAvJ,EAAA/H,UAAA,cAAA+H,EAAA/H,UAAA+H,EAAAC,EAAA,SAAAqJ,EAAAxO,EAAA6G,EAAA7G,MAAA,4BAAAlI,EAAA,EAAAA,EAAAuI,EAAAtI,SAAAD,EAAA,CAAA,IAAAuW,EAAAhO,EAAAvI,GAAAuW,EAAAD,QAAAM,EAAAxL,EAAAyL,YAAAF,EAAAJ,EAAAD,MAAApO,EAAA,KAAAuO,GAAAhO,EAAA+G,KAAA7O,IAAA8H,EAAAmO,EAAAlQ,OAAAgC,EAAA8G,KAAA7O,IAAA+H,EAAAkO,EAAAjQ,SAAAyG,EAAA3E,WAAAsG,EAAAtG,YAAAA,EAAA2E,EAAA1E,YAAAqG,EAAArG,aAAAA,IAAA1I,EAAAuU,EAAAtU,OAAA,EAAA,GAAAD,IAAAA,GAAA,SAAAoN,GAAA,IAAA0J,EAAA1J,EAAA3E,WAAAsO,EAAA3J,EAAA1E,YAAAiF,EAAAP,EAAA/F,QAAA/B,SAAA0R,EAAA,MAAA5J,EAAA/H,UAAAuD,EAAAwE,EAAA/F,QAAAuB,WAAA2B,EAAAlD,EAAA8C,KAAAI,WAAA0M,EAAA5P,EAAA8C,KAAAG,YAAA4M,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAhY,EAAA4N,KAAA+J,EAAA9N,EAAAC,EAAA,SAAAnJ,EAAAL,GAAAA,IAAAA,EAAA6H,MAAA7H,EAAAgJ,gBAAAhJ,IAAAyN,EAAAiK,GAAA,EAAA1X,EAAA0H,QAAA/B,WAAAqI,IAAA0J,EAAAF,GAAA,EAAAD,GAAA,GAAAG,IAAAD,GAAA,MAAAD,IAAA5M,EAAA,GAAA,MAAA3B,IAAAA,EAAAwO,EAAA,OAAA,GAAAlE,OAAAtK,KAAAqO,IAAArO,GAAAoO,GAAAD,GAAAE,EAAA,UAAAtJ,GAAAlC,EAAAE,QAAAoL,EAAAxM,EAAA6C,EAAAkK,IAAA,CAAA9R,IAAA4F,EAAAzE,OAAA8E,EAAAE,OAAAhF,OAAAoQ,KAAA3J,EAAAkK,IAAA,CAAA9R,IAAAiG,EAAAjG,IAAA+E,EAAA5D,OAAAoQ,GAAAtL,EAAAjG,KAAAuR,EAAAxM,KAAAuM,GAAAG,EAAA,QAAAtJ,GAAAP,EAAAkK,IAAA,CAAA/R,KAAAkG,EAAAlG,KAAAgF,EAAA7D,MAAAoQ,GAAArL,EAAAlG,MAAAuR,EAAAvM,IAAAkB,EAAAC,OAAAoL,EAAAvM,EAAA6C,EAAAkK,IAAA,CAAA/R,KAAA6F,EAAA1E,MAAA+E,EAAAC,MAAAhF,MAAAoQ,KAAA1J,EAAA9H,SAAAqI,EAAAP,EAAAxE,WAAAA,EAAAwE,EAAAkK,IAAAL,QAAAA,EAAA7J,EAAA8J,UAAAA,EAAAK,CAAAhD,EAAAvU,IAAA,IAAAA,EAAAwX,EAAAnQ,EAAA8C,KAAAM,gBAAA,GAAA,MAAA+M,EAAA,IAAAxX,EAAAwX,EAAA,EAAAxX,EAAAoH,EAAAnH,SAAAD,EAAAwX,EAAAhI,KAAA7O,IAAA6W,EAAA,GAAApQ,EAAApH,GAAAoJ,OAAAC,OAAAjC,EAAApH,GAAAoJ,OAAAE,UAAA,IAAA,IAAAmO,EAAA,CAAAlS,KAAAiS,EAAA9L,MAAA8L,EAAAhS,IAAAgS,EAAA7L,OAAA6L,GAAAnY,EAAA4N,KAAAyF,IAAA,SAAAvF,EAAAC,GAAAA,EAAAzE,cAAAyE,EAAA7E,OAAA6E,EAAA7E,MAAAtI,SAAA,MAAAmN,EAAA/H,WAAAoS,EAAAlS,KAAAiK,KAAA7O,IAAA8W,EAAAlS,KAAA6H,EAAA3E,WAAA,GAAAgP,EAAA/L,MAAA8D,KAAA7O,IAAA8W,EAAA/L,MAAA0B,EAAA3E,WAAA,KAAAgP,EAAA9L,OAAA6D,KAAA7O,IAAA8W,EAAA9L,OAAAyB,EAAA1E,YAAA,GAAA+O,EAAAjS,IAAAgK,KAAA7O,IAAA8W,EAAAjS,IAAA4H,EAAA1E,YAAA,OAAA+C,EAAAlG,KAAAiK,KAAAkI,KAAAlI,KAAA7O,IAAA8W,EAAAlS,KAAAkG,EAAAlG,OAAAkG,EAAAC,MAAA8D,KAAAkI,KAAAlI,KAAA7O,IAAA8W,EAAA/L,MAAAD,EAAAC,QAAAD,EAAAjG,IAAAgK,KAAAkI,KAAAlI,KAAA7O,IAAA8W,EAAAjS,IAAAiG,EAAAjG,MAAAiG,EAAAE,OAAA6D,KAAAkI,KAAAlI,KAAA7O,IAAA8W,EAAA9L,OAAAF,EAAAE,SAAAtM,EAAA4N,KAAAsH,EAAA,SAAApH,EAAAC,GAAA,MAAAA,EAAAA,GAAA/H,WAAA+H,EAAAkK,IAAA/R,KAAAkG,EAAAlG,KAAA6H,EAAA3E,WAAA,EAAA2E,EAAAkK,IAAA5Q,MAAA0E,EAAA1E,MAAA+E,EAAAlG,KAAAkG,EAAAC,MAAA0B,EAAA3E,aAAA2E,EAAAkK,IAAA9R,IAAAiG,EAAAjG,IAAA4H,EAAA1E,YAAA,EAAA0E,EAAAkK,IAAA3Q,OAAAyE,EAAAzE,OAAA8E,EAAAE,OAAAF,EAAAjG,IAAA4H,EAAA1E,eACA,GADAkD,EAAAR,EAAA1E,MAAA+E,EAAAlG,KAAAkG,EAAAC,MAAAG,EAAAT,EAAAzE,OAAA8E,EAAAE,OAAAF,EAAAjG,IAAAnG,EAAA4N,KAAA6G,EAAA,SAAA3G,EAAAC,GAAA,SAAAuK,EAAAtJ,GAAA,OAAAA,EAAA,IAAA0C,EAAAwF,EAAAqB,EAAApW,EAAA+U,GAAAnJ,EAAAA,GAAA/F,QAAAe,WAAAuP,EAAAC,EAAAxK,EAAA/F,QAAAgB,iBAAA7G,EAAA,KAAA4L,EAAA/H,WAAA0L,EAAA3D,EAAAhN,MAAAwL,EAAA4D,KAAAqI,IAAAtB,EAAAnJ,EAAAzM,KAAA4V,EAAAnJ,EAAA3M,MAAA+O,KAAA/O,IAAA8V,EAAAnJ,EAAAzM,KAAA4V,EAAAnJ,EAAA3M,QAAAsQ,IAAAA,EAAA3D,EAAAhN,MAAAyL,EAAA2D,KAAAqI,IAAAtB,EAAAnJ,EAAAzM,KAAA4V,EAAAnJ,EAAA3M,OAAA+O,KAAA7O,IAAA4V,EAAAnJ,EAAAzM,KAAA4V,EAAAnJ,EAAA3M,OAAA2M,EAAAM,IAAA6I,GAAAoB,EAAA,SAAA/I,GAAA,OAAAA,EAAApN,GAAAuP,GAAA,SAAAnC,GAAA,OAAA2H,EAAA3H,GAAApN,GAAAuP,GAAA3D,EAAAI,IAAAoK,EAAA,SAAA9X,GAAA,OAAA8X,EAAApW,EAAA1B,EAAAiR,IAAA,SAAAjR,GAAA,OAAA0B,EAAA1B,EAAAiR,KAAAqD,GACA/U,EAAA4N,KAAAyF,IAAA,SAAAvF,EAAAC,GAAA,IAAA0K,EAAAzJ,EAAAC,EAAAyJ,EAAAC,EAAAV,EAAAlK,EAAAkK,IAAAZ,EAAAtJ,EAAA/H,UAAA,QAAA+H,EAAA/H,UAAA+H,EAAAC,EAAA,OAAAsJ,EAAA,QAAAvJ,EAAA/H,UAAA,cAAA+H,EAAA/H,UAAA+H,EAAAC,EAAA,SAAAqJ,EAAAxO,EAAAkF,EAAA/F,QAAAa,MAAA,4BAAA,GAAAkD,EAAA6M,WAAAtB,GAAAvJ,EAAA5F,MAAA,GAAA4F,EAAA7E,MAAAtI,OAAA,IAAA,IAAAD,EAAA,EAAAA,EAAAoN,EAAA7E,MAAAtI,SAAAD,IAAA8X,EAAA1K,EAAA7E,MAAAvI,IAAAsW,OAAAwB,EAAAtG,EAAApE,EAAA3M,KAAAqX,EAAAtG,EAAApE,EAAAzM,MAAA,KAAAyM,EAAA/H,WAAA0S,EAAA,SAAA1J,EAAA5C,EAAAlG,KAAA6H,EAAAM,IAAAoK,EAAAtG,GAAA,UAAApE,EAAA9H,SAAAgJ,EAAAgJ,EAAA9R,IAAA8R,EAAAL,SAAA3I,EAAAgJ,EAAA9R,IAAA8R,EAAA3Q,OAAA2Q,EAAAL,QAAAe,EAAA,YAAAA,EAAA,SAAA1J,EAAA7C,EAAAjG,IAAA4H,EAAAM,IAAAoK,EAAAtG,GAAA,QAAApE,EAAA9H,UAAA+I,EAAAiJ,EAAA/R,KAAA+R,EAAA5Q,MAAA4Q,EAAAL,QAAAc,EAAA,SAAA1J,EAAAiJ,EAAA/R,KAAA+R,EAAAL,SAAA7L,EAAA8M,QAAAvB,EAAAtI,EAAAC,EAAAwJ,EAAAxB,MAAApO,EAAA,KAAA,KAAA6P,EAAAC,MAAA,MAAA3Q,EAAAE,OAAAxC,UAAA1F,EAAAgI,EAAAE,OAAAxC,WAAAoT,KAAA,IAAAnR,EAAAoR,KAAA,WAAA7H,SAAAlJ,EAAAE,OAAAC,KAAA,CAAA,IAAA,IAAAuJ,EAAAuF,EAAA+B,EAAAC,EAAA,GAAAC,EAAA,GAAAC,GAAA,EAAAC,EAAApR,EAAAE,OAAAG,eAAA1H,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,GAAA+Q,EAAA3J,EAAApH,IAAAsW,QAAAA,EAAAmC,EAAAA,EAAA1H,EAAAuF,MAAAvF,GAAAA,EAAAuF,QAAAiC,EAAAvH,KAAA,CAAAsF,MAAAA,EAAAhX,MAAAyR,EAAAzR,QAAA+H,EAAAE,OAAAQ,SAAA1I,EAAAyW,WAAAzO,EAAAE,OAAAQ,QAAAwQ,EAAAG,KAAArR,EAAAE,OAAAQ,QAAA,WAAAV,EAAAE,OAAAQ,OAAAwQ,EAAAI,WAAAN,EAAA,cAAAhR,EAAAE,OAAAQ,OAAAwQ,EAAAG,KAAA,SAAA/Y,EAAAD,GAAA,OAAAC,EAAA2W,OAAA5W,EAAA4W,MAAA,EAAA3W,EAAA2W,MAAA5W,EAAA4W,OAAA+B,EAAA,GAAA,MAAA,IAAA,IAAA1K,EAAApG,EAAAzH,EAAAE,EAAA,EAAAA,EAAAuY,EAAAtY,SAAAD,EAAA,CAAA,IAAA4Y,EAAAL,EAAAvY,GAAAA,EAAAqH,EAAAE,OAAAE,WAAA,IAAA+Q,GAAAF,EAAAtH,KAAA,SAAAsH,EAAAtH,KAAA,QAAAwH,GAAA,GAAAF,EAAAtH,KAAA,2DAAA3J,EAAAE,OAAAI,oBAAA,iEAAAiR,EAAAtZ,MAAA,8DAAAsZ,EAAAtC,MAAA,SAAAkC,GAAAF,EAAAtH,KAAA,SAAA,GAAAsH,EAAArY,SAAA4Y,EAAA,yCAAAxR,EAAA8C,KAAA7K,MAAA,KAAAgZ,EAAA/X,KAAA,IAAA,WAAA,MAAA8G,EAAAE,OAAAxC,UAAA1F,EAAAgI,EAAAE,OAAAxC,WAAAoT,KAAAU,IAAAlL,EAAA,GAAAiB,EAAAvH,EAAAE,OAAAjC,SAAA,OAAA9D,EAAA6F,EAAAE,OAAAK,QAAA,KAAApG,EAAA,CAAAA,EAAAA,IAAA,KAAAoN,EAAA1O,OAAA,GAAAyN,GAAA,QAAAnM,EAAA,GAAAiK,EAAAjG,KAAA,MAAA,KAAAoJ,EAAA1O,OAAA,KAAAyN,GAAA,WAAAnM,EAAA,GAAAiK,EAAAE,QAAA,OAAA,KAAAiD,EAAA1O,OAAA,GAAAyN,GAAA,UAAAnM,EAAA,GAAAiK,EAAAC,OAAA,MAAA,KAAAkD,EAAA1O,OAAA,KAAAyN,GAAA,SAAAnM,EAAA,GAAAiK,EAAAlG,MAAA,OAAAgC,EAAAlI,EAAA,uBAAAwZ,EAAAzJ,QAAA,UAAA,4BAAAzB,EAAA,KAAA,UAAAlI,SAAAuB,GAAA,GAAAK,EAAAE,OAAAO,oBAAA,OAAAhI,EAAAuH,EAAAE,OAAAM,oBAAA/H,GAAAA,EAAAuH,EAAA8C,KAAAtC,kBAAA,iBAAA/H,EAAAT,EAAAC,MAAA+B,MAAAvB,GAAAT,EAAAC,MAAAwB,QAAAyG,EAAA,qBAAA5H,EAAA,EAAAG,EAAAA,EAAAQ,YAAAwY,EAAAvR,EAAAtC,WAAA5F,EAAA,uCAAAyZ,EAAApS,QAAA,aAAAoS,EAAAnS,SAAA,MAAAgH,EAAA,oBAAA7N,EAAA,cAAAiZ,UAAAxR,GAAAvG,IAAA,UAAAqG,EAAAE,OAAAO,uBADA,SAAAsE,IAAAhB,EAAA4N,QAAA5I,EAAAjF,EAAAe,eAAA,CAAAX,IAAA,IAAApB,EAAA9C,EAAA8C,KAAAA,EAAA3C,MAAA2C,EAAAtC,kBAAA0D,EAAA0N,OAAA1N,EAAA2N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KAAA+F,EAAA4N,UAAAC,EAAA/R,EAAA8C,KAAAtC,gBAAAgE,EAAA,EAAA,0BAAAN,EAAA8N,SAAA,EAAA,EAAAzN,EAAAC,GAAAN,EAAA+N,WAAAnP,EAAA3C,OAAA2C,EAAAC,WAAAmP,IAAA,IAAA,IAAAvZ,EAAA,EAAAA,EAAAoH,EAAAnH,SAAAD,EAAA,CAAAoQ,EAAAjF,EAAAgB,WAAA,CAAAZ,EAAAnE,EAAApH,KACAoH,OAAAA,EADA+E,IACA/E,EADAA,EAAApH,GACA,GAAAoH,EAAAsC,MAAAlC,KAAAgS,CAAApS,OAAAA,EAAA0P,OAAAA,EAAA2C,OAAAA,EAAAC,OAAAA,EAAAP,OAAAA,EAAAK,IAAApS,EAAAA,EAAA,IAAAuS,EAAA,SAAAhH,EAAAiH,EAAAC,EAAAC,EAAAC,GAAA,IAAA3Q,EAAAuJ,EAAAvJ,OAAAuI,EAAAgB,EAAAI,UAAAiH,EAAA,KAAAC,EAAA,KAAA1O,EAAA2O,YAAA,IAAA,IAAAla,EAAA2R,EAAA3R,EAAAoJ,EAAAnJ,OAAAD,GAAA2R,EAAA,CAAA,IAAAiC,EAAAxK,EAAApJ,EAAA2R,GAAAkC,EAAAzK,EAAApJ,EAAA2R,EAAA,GAAAwI,EAAA/Q,EAAApJ,GAAAoa,EAAAhR,EAAApJ,EAAA,GAAA,GAAA,MAAA4T,GAAA,MAAAuG,EAAA,CAAA,GAAAtG,GAAAuG,GAAAvG,EAAAkG,EAAAtZ,IAAA,CAAA,GAAA2Z,EAAAL,EAAAtZ,IAAA,SAAAmT,GAAAmG,EAAAtZ,IAAAoT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAC,EAAAkG,EAAAtZ,SAAA,GAAA2Z,GAAAvG,GAAAuG,EAAAL,EAAAtZ,IAAA,CAAA,GAAAoT,EAAAkG,EAAAtZ,IAAA,SAAA0Z,GAAAJ,EAAAtZ,IAAAoT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAwG,EAAAL,EAAAtZ,IAAA,GAAA2Z,GAAAvG,GAAAA,EAAAkG,EAAApZ,IAAA,CAAA,GAAAyZ,EAAAL,EAAApZ,IAAA,SAAAiT,GAAAmG,EAAApZ,IAAAkT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAC,EAAAkG,EAAApZ,SAAA,GAAAkT,GAAAuG,GAAAA,EAAAL,EAAApZ,IAAA,CAAA,GAAAkT,EAAAkG,EAAApZ,IAAA,SAAAwZ,GAAAJ,EAAApZ,IAAAkT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAwG,EAAAL,EAAApZ,IAAA,GAAAiT,GAAAuG,GAAAvG,EAAAkG,EAAArZ,IAAA,CAAA,GAAA0Z,EAAAL,EAAArZ,IAAA,SAAAoT,GAAAiG,EAAArZ,IAAAmT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAD,EAAAkG,EAAArZ,SAAA,GAAA0Z,GAAAvG,GAAAuG,EAAAL,EAAArZ,IAAA,CAAA,GAAAmT,EAAAkG,EAAArZ,IAAA,SAAA2Z,GAAAN,EAAArZ,IAAAmT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAsG,EAAAL,EAAArZ,IAAA,GAAA0Z,GAAAvG,GAAAA,EAAAkG,EAAAnZ,IAAA,CAAA,GAAAwZ,EAAAL,EAAAnZ,IAAA,SAAAkT,GAAAiG,EAAAnZ,IAAAiT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAD,EAAAkG,EAAAnZ,SAAA,GAAAiT,GAAAuG,GAAAA,EAAAL,EAAAnZ,IAAA,CAAA,GAAAiT,EAAAkG,EAAAnZ,IAAA,SAAAyZ,GAAAN,EAAAnZ,IAAAiT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAsG,EAAAL,EAAAnZ,IAAAiT,GAAAoG,GAAAnG,GAAAoG,GAAA1O,EAAA8O,OAAAP,EAAApM,IAAAkG,GAAAgG,EAAAG,EAAArM,IAAAmG,GAAAgG,GAAAG,EAAAG,EAAAF,EAAAG,EAAA7O,EAAA+O,OAAAR,EAAApM,IAAAyM,GAAAP,EAAAG,EAAArM,IAAA0M,GAAAP,IAAAtO,EAAAgP,UAAAhP,EAAA0N,OAAA1N,EAAA2N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KAAA+F,EAAAiP,SAAA,QAAA,IAAA1D,EAAA1P,EAAAsC,MAAAJ,UAAAmQ,EAAArS,EAAA6C,WAAA,EAAA6M,GAAA,EAAA2C,IAAAlO,EAAAjC,UAAAmQ,EAAAlO,EAAAkP,YAAA,kBAAAf,EAAAlK,KAAAkL,GAAA,GAAAf,EAAAvS,EAAAuL,WAAAnD,KAAAmL,IAAAjB,IAAA5C,EAAA,EAAA2C,EAAA,GAAAjK,KAAAoL,IAAAlB,IAAA5C,EAAA,EAAA2C,EAAA,GAAArS,EAAAY,MAAAZ,EAAA6B,OAAAsC,EAAAjC,UAAAmQ,EAAA,EAAAE,EAAAvS,EAAAuL,WAAAnD,KAAAmL,IAAAjB,IAAA5C,EAAA,EAAA2C,EAAA,GAAAjK,KAAAoL,IAAAlB,IAAA5C,EAAA,EAAA2C,EAAA,GAAArS,EAAAY,MAAAZ,EAAA6B,QAAAsC,EAAAjC,UAAAwN,EAAAvL,EAAAkP,YAAArT,EAAA9H,MAAA,IAAA6Z,EAAA0B,EAAAzT,EAAAsC,MAAAtC,EAAA9H,MAAA,EAAAuM,GAAAsN,IAAA5N,EAAA4N,UAAAA,EAAA,SAAAxG,EAAAmH,EAAAC,GAAA,IAAA,IAAA3Q,EAAAuJ,EAAAvJ,OAAAuI,EAAAgB,EAAAI,UAAApH,EAAA6D,KAAA/O,IAAA+O,KAAA7O,IAAA,EAAAoZ,EAAAtZ,KAAAsZ,EAAApZ,KAAAX,EAAA,EAAA8a,GAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,IAAA,EAAAtJ,GAAA3R,EAAAoJ,EAAAnJ,OAAA0R,IAAA,CAAA,IAAAuJ,EAAAC,EAAAvH,EAAAxK,GAAApJ,GAAA2R,GAAAA,GAAAkC,EAAAzK,EAAApJ,EAAA2R,EAAAoJ,GAAAZ,EAAA/Q,EAAApJ,GAAAoa,EAAAhR,EAAApJ,EAAA+a,GAAA,GAAAD,EAAA,CAAA,GAAA,EAAAnJ,GAAA,MAAAiC,GAAA,MAAAuG,EAAA,CAAAc,EAAAjb,EAAA2R,GAAAA,EAAAoJ,EAAA,EAAA,SAAA,GAAApJ,EAAA,GAAA3R,GAAAgb,EAAArJ,EAAA,CAAApG,EAAAhC,OAAAuR,GAAA,EAAAC,EAAA,EAAA/a,EAAAgb,EAAAC,GAAAtJ,GAAAA,GAAA,UAAA,GAAA,MAAAiC,GAAA,MAAAuG,EAAA,CAAA,GAAAvG,GAAAuG,GAAAvG,EAAAkG,EAAArZ,IAAA,CAAA,GAAA0Z,EAAAL,EAAArZ,IAAA,SAAAoT,GAAAiG,EAAArZ,IAAAmT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAD,EAAAkG,EAAArZ,SAAA,GAAA0Z,GAAAvG,GAAAuG,EAAAL,EAAArZ,IAAA,CAAA,GAAAmT,EAAAkG,EAAArZ,IAAA,SAAA2Z,GAAAN,EAAArZ,IAAAmT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAsG,EAAAL,EAAArZ,IAAA,GAAA0Z,GAAAvG,GAAAA,EAAAkG,EAAAnZ,IAAA,CAAA,GAAAwZ,EAAAL,EAAAnZ,IAAA,SAAAkT,GAAAiG,EAAAnZ,IAAAiT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAD,EAAAkG,EAAAnZ,SAAA,GAAAiT,GAAAuG,GAAAA,EAAAL,EAAAnZ,IAAA,CAAA,GAAAiT,EAAAkG,EAAAnZ,IAAA,SAAAyZ,GAAAN,EAAAnZ,IAAAiT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EAAAsG,EAAAL,EAAAnZ,IAAAma,IAAAvP,EAAA2O,YAAA3O,EAAA8O,OAAAP,EAAApM,IAAAkG,GAAAmG,EAAArM,IAAA/B,IAAAmP,GAAA,GAAAjH,GAAAkG,EAAApZ,KAAAyZ,GAAAL,EAAApZ,KAAA4K,EAAA+O,OAAAR,EAAApM,IAAAkG,GAAAmG,EAAArM,IAAAqM,EAAApZ,MAAA4K,EAAA+O,OAAAR,EAAApM,IAAAyM,GAAAJ,EAAArM,IAAAqM,EAAApZ,OAAAkT,GAAAkG,EAAAtZ,KAAA2Z,GAAAL,EAAAtZ,KAAA8K,EAAA+O,OAAAR,EAAApM,IAAAkG,GAAAmG,EAAArM,IAAAqM,EAAAtZ,MAAA8K,EAAA+O,OAAAR,EAAApM,IAAAyM,GAAAJ,EAAArM,IAAAqM,EAAAtZ,QAAAya,EAAAtH,EAAAuH,EAAAhB,EAAAtG,GAAAuG,GAAAvG,EAAAkG,EAAAtZ,KAAA2Z,GAAAL,EAAAtZ,KAAAmT,GAAAmG,EAAAtZ,IAAAoT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAC,EAAAkG,EAAAtZ,KAAA2Z,GAAAvG,GAAAuG,EAAAL,EAAAtZ,KAAAoT,GAAAkG,EAAAtZ,MAAA0Z,GAAAJ,EAAAtZ,IAAAoT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAwG,EAAAL,EAAAtZ,KAAA2Z,GAAAvG,GAAAA,EAAAkG,EAAApZ,KAAAyZ,GAAAL,EAAApZ,KAAAiT,GAAAmG,EAAApZ,IAAAkT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAC,EAAAkG,EAAApZ,KAAAkT,GAAAuG,GAAAA,EAAAL,EAAApZ,KAAAkT,GAAAkG,EAAApZ,MAAAwZ,GAAAJ,EAAApZ,IAAAkT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EAAAwG,EAAAL,EAAApZ,KAAAiT,GAAAsH,GAAA3P,EAAA+O,OAAAR,EAAApM,IAAAwN,GAAAnB,EAAArM,IAAAmG,IAAAtI,EAAA+O,OAAAR,EAAApM,IAAAkG,GAAAmG,EAAArM,IAAAmG,IAAAtI,EAAA+O,OAAAR,EAAApM,IAAAyM,GAAAJ,EAAArM,IAAA0M,IAAAD,GAAAgB,IAAA5P,EAAA+O,OAAAR,EAAApM,IAAAyM,GAAAJ,EAAArM,IAAA0M,IAAA7O,EAAA+O,OAAAR,EAAApM,IAAAyN,GAAApB,EAAArM,IAAA0M,QAAAgB,CAAAhU,EAAAuL,WAAAvL,EAAAY,MAAAZ,EAAA6B,QAAA,EAAA6N,GAAA6C,EAAAvS,EAAAuL,WAAA,EAAA,EAAAvL,EAAAY,MAAAZ,EAAA6B,OAAAsC,EAAA+N,UAAA,GAAAlS,EAAAwC,KAAApC,OAAA,SAAAJ,GAAA,IAAAiU,EAAA,OAAA9P,EAAA0N,OAAA1N,EAAA2N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KAAA+F,EAAAjC,UAAAlC,EAAAwC,KAAAN,UAAAiC,EAAAkP,YAAArT,EAAA9H,MAAA8H,EAAAwC,KAAAE,OAAA,IAAA,OAAAuR,EAAA,EAAA,MAAA,IAAA,QAAAA,GAAAjU,EAAAwC,KAAAC,SAAA,MAAA,QAAAwR,GAAAjU,EAAAwC,KAAAC,SAAA,EAAA,IAAAyR,EAAAlU,EAAAwC,KAAAL,KAAA,SAAAoC,EAAAnG,GAAA,OAAAqV,EAAAzT,EAAAwC,KAAAxC,EAAA9H,MAAAqM,EAAAnG,IAAA,MAAA,SAAAmN,EAAA0I,EAAAE,EAAAD,EAAAxB,EAAAC,GAAA,IAAA,IAAA3Q,EAAAuJ,EAAAvJ,OAAAuI,EAAAgB,EAAAI,UAAA/S,EAAA,EAAAA,EAAAoJ,EAAAnJ,OAAAD,GAAA2R,EAAA,MAAAvI,EAAApJ,IAAAwb,EAAApS,EAAApJ,GAAAoJ,EAAApJ,EAAA,GAAAoJ,EAAApJ,EAAA,GAAAqb,EAAAE,EAAAD,EAAAxB,EAAAC,EAAAxO,EAAAnE,EAAAwC,KAAAG,WAAA3C,EAAAwC,KAAAN,YAAAmS,CAAArU,EAAAuL,WAAA0I,EAAAA,EAAAjU,EAAAwC,KAAAC,SAAAyR,EAAAlU,EAAAY,MAAAZ,EAAA6B,OAAAsC,EAAA+N,UAAAoC,CAAAtU,GAAAA,EAAAgC,OAAA5B,KAAAmU,CAAAvU,OAAAA,EAAA0P,OAAAA,EAAA2C,OAAAA,EAAApQ,OAAAA,EAAAI,OAAAA,EAAAmS,OAAAA,EAAAxU,EAAAA,EAAAyU,EAAA,SAAAlJ,EAAAtJ,EAAA8P,EAAArM,EAAAgP,EAAAhC,EAAAC,EAAAtQ,GAAA,IAAA,IAAAL,EAAAuJ,EAAAvJ,OAAAuI,EAAAgB,EAAAI,UAAA/S,EAAA,EAAAA,EAAAoJ,EAAAnJ,OAAAD,GAAA2R,EAAA,CAAA,IAAAtD,EAAAjF,EAAApJ,GAAAsO,EAAAlF,EAAApJ,EAAA,GAAA,MAAAqO,GAAAA,EAAAyL,EAAArZ,KAAA4N,EAAAyL,EAAAnZ,KAAA2N,EAAAyL,EAAAtZ,KAAA6N,EAAAyL,EAAApZ,MAAA4K,EAAA2O,YAAA7L,EAAAyL,EAAApM,IAAAW,GAAAC,EAAAyL,EAAArM,IAAAY,GAAAxB,EAAA,UAAArD,EAAA8B,EAAAwQ,IAAA1N,EAAAC,EAAAjF,EAAA,EAAAyS,EAAAtM,KAAAkL,GAAA,EAAAlL,KAAAkL,IAAA,GAAAjR,EAAA8B,EAAA8C,EAAAC,EAAAjF,EAAAyS,GAAAvQ,EAAAyQ,YAAA7C,IAAA5N,EAAA4N,UAAAA,EAAA5N,EAAAhC,QAAAgC,EAAAgP,YAAAhP,EAAA0N,OAAA1N,EAAA2N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KAAAsR,EAAA1P,EAAAgC,OAAAE,UAAAmQ,EAAArS,EAAA6C,WAAAZ,EAAAjC,EAAAgC,OAAAC,OAAAI,EAAArC,EAAAgC,OAAAK,OAAA,GAAAqN,IAAAA,EAAA,MAAA,EAAAA,GAAA,EAAA2C,IAAAmC,EAAAnC,EAAA,EAAAlO,EAAAjC,UAAAsS,EAAArQ,EAAAkP,YAAA,kBAAAoB,EAAAzU,EAAAuL,WAAAtJ,EAAA,KAAAuS,EAAAA,EAAA,GAAA,EAAAxU,EAAAY,MAAAZ,EAAA6B,MAAAQ,GAAA8B,EAAAkP,YAAA,kBAAAoB,EAAAzU,EAAAuL,WAAAtJ,EAAA,KAAAuS,EAAA,GAAA,EAAAxU,EAAAY,MAAAZ,EAAA6B,MAAAQ,IAAA8B,EAAAjC,UAAAwN,EAAAvL,EAAAkP,YAAArT,EAAA9H,MAAAuc,EAAAzU,EAAAuL,WAAAtJ,EAAAwR,EAAAzT,EAAAgC,OAAAhC,EAAA9H,OAAA,GAAA,EAAA8H,EAAAY,MAAAZ,EAAA6B,MAAAQ,GAAA8B,EAAA+N,WADAlJ,EAAAjF,EAAAiB,KAAA,CAAAb,IAAApB,EAAA3C,MAAA2C,EAAAC,WAAAmP,IAAAnO,EAAA6Q,SAAAhO,IAAA,SAAAiO,EAAAC,EAAA1I,GAAA,IAAA,IAAArG,EAAAQ,EAAAwO,EAAAC,EAAAC,EAAAxI,EAAApB,IAAA1S,EAAA,EAAAA,EAAA8T,EAAA7T,SAAAD,EAAA,IAAAoN,EAAA0G,EAAA9T,IAAAqF,WAAAoO,GAAA0I,EAAAvO,EAAAuO,EAAAvO,EAAA6F,EAAArG,EAAAC,EAAA,SAAA,GAAAD,EAAAC,EAAAO,EAAA6F,EAAA,QAAA,CAAA4I,EAAAF,EAAAvO,GAAAyO,KAAAC,EAAAH,EAAAvO,GAAA0O,GAAA,MAAA,OAAAH,EAAAvO,KAAAR,GAAA,KAAAqG,EAAAvK,EAAAC,GAAA,GAAAkT,EAAAF,EAAA1I,EAAA,KAAA6I,EAAAH,EAAA1I,EAAA,MAAA,MAAA4I,GAAA,MAAAC,GAAAA,EAAAD,IAAAD,EAAAC,EAAAA,EAAAC,EAAAA,EAAAF,GAAA,CAAAC,KAAAA,EAAAC,GAAAA,EAAAlP,KAAAA,GAAA,SAAAmM,IAAAhO,EAAA0N,OAAA1N,EAAA2N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KAAA,IAAAxF,EAAAuc,EAAA7R,EAAArD,EAAA8C,KAAAO,SAAA,GAAAA,EAAA,IAAArL,EAAAyW,WAAApL,MAAAoJ,EAAAtH,EAAAQ,WAAAoG,KAAAU,EAAA9L,MAAAvH,IAAAqT,EAAAR,KAAAQ,EAAA9L,MAAArH,IAAAmT,EAAAT,KAAAS,EAAA7K,MAAAxI,IAAAqT,EAAAP,KAAAO,EAAA7K,MAAAtI,IAAA+J,EAAAA,EAAAoJ,IAAA9T,EAAA,EAAAA,EAAA0K,EAAAzK,SAAAD,EAAA,CAAA,IACAwc,EAAAlT,EAAAmT,EADAjb,EAAAkJ,EAAA1K,GAAA0c,EAAAR,EAAA1a,EAAA,KAAAmb,EAAAT,EAAA1a,EAAA,KAAA,MAAAkb,EAAAL,OAAAK,EAAAL,KAAAK,EAAAtP,KAAA3M,KAAA,MAAAic,EAAAJ,KAAAI,EAAAJ,GAAAI,EAAAtP,KAAAzM,KACA,MAAAgc,EAAAN,OAAAM,EAAAN,KAAAM,EAAAvP,KAAA3M,KAAA,MAAAkc,EAAAL,KAAAK,EAAAL,GAAAK,EAAAvP,KAAAzM,KAAA+b,EAAAJ,GAAAI,EAAAtP,KAAA3M,KAAAic,EAAAL,KAAAK,EAAAtP,KAAAzM,KAAAgc,EAAAL,GAAAK,EAAAvP,KAAA3M,KAAAkc,EAAAN,KAAAM,EAAAvP,KAAAzM,MAAA+b,EAAAL,KAAA7M,KAAA7O,IAAA+b,EAAAL,KAAAK,EAAAtP,KAAA3M,KAAAic,EAAAJ,GAAA9M,KAAA/O,IAAAic,EAAAJ,GAAAI,EAAAtP,KAAAzM,KAAAgc,EAAAN,KAAA7M,KAAA7O,IAAAgc,EAAAN,KAAAM,EAAAvP,KAAA3M,KAAAkc,EAAAL,GAAA9M,KAAA/O,IAAAkc,EAAAL,GAAAK,EAAAvP,KAAAzM,KAAA6b,EAAAE,EAAAL,OAAAK,EAAAJ,GAAAM,EAAAD,EAAAN,OAAAM,EAAAL,GAAAE,GAAAI,IAAAF,EAAAL,KAAA7M,KAAAmF,MAAA+H,EAAAtP,KAAAM,IAAAgP,EAAAL,OAAAK,EAAAJ,GAAA9M,KAAAmF,MAAA+H,EAAAtP,KAAAM,IAAAgP,EAAAJ,KAAAK,EAAAN,KAAA7M,KAAAmF,MAAAgI,EAAAvP,KAAAM,IAAAiP,EAAAN,OAAAM,EAAAL,GAAA9M,KAAAmF,MAAAgI,EAAAvP,KAAAM,IAAAiP,EAAAL,KAAAE,GAAAI,GAAAH,GAAAnT,EAAA9H,EAAA8H,WAAAjC,EAAA8C,KAAAS,mBAAA,EAAA,GAAA,EAAAW,EAAA2O,YAAA3O,EAAAkP,YAAAjZ,EAAAlC,OAAA+H,EAAA8C,KAAAQ,cAAAY,EAAAjC,UAAAA,EAAAkT,GAAAjR,EAAA8O,OAAAqC,EAAAJ,GAAAG,EAAAE,EAAAN,MAAA9Q,EAAA+O,OAAAoC,EAAAJ,GAAAG,EAAAE,EAAAL,MAAA/Q,EAAA8O,OAAAqC,EAAAL,KAAAM,EAAAL,GAAAG,GAAAlR,EAAA+O,OAAAoC,EAAAJ,GAAAK,EAAAL,GAAAG,IAAAlR,EAAAgP,WAAAhP,EAAA4N,UAAA3X,EAAAlC,OAAA+H,EAAA8C,KAAAQ,cAAAY,EAAA8N,SAAAqD,EAAAL,KAAAM,EAAAL,GAAAI,EAAAJ,GAAAI,EAAAL,KAAAM,EAAAN,KAAAM,EAAAL,OAAA,IAAA,IAAAxI,EAAApB,IAAAmK,EAAAxV,EAAA8C,KAAAK,YAAAiH,EAAA,EAAAA,EAAAqC,EAAA7T,SAAAwR,EAAA,CAAA,IAAApD,EAAAC,EAAAwO,EAAA1P,EAAA0G,EAAArC,GAAA6F,EAAAlK,EAAAkK,IAAAf,EAAAnJ,EAAAxE,WAAA,GAAAwE,EAAA5F,MAAA,GAAA4F,EAAA7E,MAAAtI,OAAA,CAAA,IAAAsL,EAAAjC,UAAA,EAAA,KAAA8D,EAAA/H,WAAAgJ,EAAA,EAAAC,EAAA,QAAAiI,EAAA,OAAAnJ,EAAA9H,SAAA,EAAAuG,EAAAyL,EAAA9R,IAAAiG,EAAAjG,KAAA,OAAA4H,EAAA9H,SAAAgS,EAAA3Q,OAAA,KAAA2H,EAAA,EAAAD,EAAA,QAAAkI,EAAA,QAAAnJ,EAAA9H,SAAA,EAAAsG,EAAA0L,EAAA/R,KAAAkG,EAAAlG,MAAA,QAAA6H,EAAA9H,SAAAgS,EAAA5Q,MAAA,IAAA0G,EAAA8J,YAAA3L,EAAAkP,YAAArN,EAAA/F,QAAA/H,MAAAiM,EAAA2O,YAAA6C,EAAAD,EAAA,EAAA,KAAA1P,EAAA/H,UAAA0X,EAAAnR,EAAA,EAAAkR,EAAAjR,EAAA,EAAA,GAAAN,EAAAjC,YAAA,KAAA8D,EAAA/H,UAAAiJ,EAAAkB,KAAAmF,MAAArG,GAAA,GAAAD,EAAAmB,KAAAmF,MAAAtG,GAAA,IAAA9C,EAAA8O,OAAAhM,EAAAC,GAAA/C,EAAA+O,OAAAjM,EAAA0O,EAAAzO,EAAAwO,GAAAvR,EAAAgP,UAAAhP,EAAAkP,YAAArN,EAAA/F,QAAAc,UAAAoD,EAAA2O,YAAAla,EAAA,EAAAA,EAAAoN,EAAA7E,MAAAtI,SAAAD,EAAA,CAAA,IAAAwR,EAAApE,EAAA7E,MAAAvI,GAAAwR,EAAAuL,EAAAD,EAAA,EAAA5J,MAAA1B,IAAAA,EAAApE,EAAA3M,KAAA+Q,EAAApE,EAAAzM,KAAA,QAAA4V,IAAA,iBAAAsG,GAAA,EAAAA,EAAAzP,EAAA9H,WAAA,EAAAuX,KAAArL,GAAApE,EAAA3M,KAAA+Q,GAAApE,EAAAzM,OAAA,KAAAyM,EAAA/H,WAAAgJ,EAAAjB,EAAAM,IAAA8D,GAAAsL,EAAA,QAAAvG,GAAA1K,EAAA0K,EAAA,OAAAnJ,EAAA9H,WAAAwX,GAAAA,KAAAxO,EAAAlB,EAAAM,IAAA8D,GAAAuL,EAAA,QAAAxG,GAAA3K,EAAA2K,EAAA,QAAAnJ,EAAA9H,WAAAyX,GAAAA,IAAA,GAAAxR,EAAAjC,YAAA,KAAA8D,EAAA/H,UAAAgJ,EAAAmB,KAAAmF,MAAAtG,GAAA,GAAAC,EAAAkB,KAAAmF,MAAArG,GAAA,IAAA/C,EAAA8O,OAAAhM,EAAAC,GAAA/C,EAAA+O,OAAAjM,EAAA0O,EAAAzO,EAAAwO,IAAAvR,EAAAgP,UAAAsC,IAAAN,EAAAlV,EAAA8C,KAAAE,YAAA,iBAAAwS,GAAA,iBAAAN,GAAA,iBAAAA,IAAAA,EAAA,CAAA/W,IAAA+W,EAAA7Q,MAAA6Q,EAAA5Q,OAAA4Q,EAAAhX,KAAAgX,IAAA,GAAAM,EAAA,iBAAAA,EAAA,CAAArX,IAAAqX,EAAAnR,MAAAmR,EAAAlR,OAAAkR,EAAAtX,KAAAsX,GAAAA,GAAArX,MAAA+F,EAAAkP,YAAA8B,EAAA/W,IAAA+F,EAAAjC,UAAAuT,EAAArX,IAAA+F,EAAA2O,YAAA3O,EAAA8O,OAAA,EAAAwC,EAAAtX,KAAA,EAAAsX,EAAArX,IAAA,GAAA+F,EAAA+O,OAAA1O,EAAA,EAAAiR,EAAArX,IAAA,GAAA+F,EAAAgP,UAAA,EAAAsC,EAAAnR,QAAAH,EAAAkP,YAAA8B,EAAA7Q,MAAAH,EAAAjC,UAAAuT,EAAAnR,MAAAH,EAAA2O,YAAA3O,EAAA8O,OAAAzO,EAAAiR,EAAAnR,MAAA,EAAA,EAAAmR,EAAArX,KAAA+F,EAAA+O,OAAA1O,EAAAiR,EAAAnR,MAAA,EAAAG,GAAAN,EAAAgP,UAAA,EAAAsC,EAAAlR,SAAAJ,EAAAkP,YAAA8B,EAAA5Q,OAAAJ,EAAAjC,UAAAuT,EAAAlR,OAAAJ,EAAA2O,YAAA3O,EAAA8O,OAAAzO,EAAAiR,EAAAnR,MAAAG,EAAAgR,EAAAlR,OAAA,GAAAJ,EAAA+O,OAAA,EAAAzO,EAAAgR,EAAAlR,OAAA,GAAAJ,EAAAgP,UAAA,EAAAsC,EAAAtX,OAAAgG,EAAAkP,YAAA8B,EAAAhX,KAAAgG,EAAAjC,UAAAuT,EAAAtX,KAAAgG,EAAA2O,YAAA3O,EAAA8O,OAAA,EAAAwC,EAAAtX,KAAA,EAAAsG,EAAAgR,EAAAlR,QAAAJ,EAAA+O,OAAA,EAAAuC,EAAAtX,KAAA,EAAA,GAAAgG,EAAAgP,YAAAhP,EAAAjC,UAAAuT,EAAAtR,EAAAkP,YAAApT,EAAA8C,KAAAE,YAAAkB,EAAAyR,YAAAH,EAAA,GAAAA,EAAA,EAAAjR,EAAAiR,EAAAhR,EAAAgR,KAAAtR,EAAA+N,UAAA,SAAAkC,EAAAnN,EAAAC,EAAA5O,EAAA2b,EAAAE,EAAAD,EAAAxB,EAAAC,EAAAja,EAAAiK,EAAAT,GAAA,IAAA/D,EAAAmG,EAAAC,EAAAnG,EAAAyX,EAAAC,EAAAC,EAAAC,EAAAhB,EAAArS,GAAAkT,IAAAG,EAAAF,EAAAC,GAAA,GAAA3X,EAAA8I,EAAA+M,EAAA1P,EAAA2C,EAAAiN,GAAA7P,EAAA2C,IAAA9I,EAAA7F,KAAA0c,EAAA1Q,EAAAA,EAAAnG,EAAAA,EAAA6W,EAAAc,IAAAD,GAAA,MAAAG,IAAAH,EAAAC,EAAAC,GAAA,GAAA5X,EAAA8I,EAAAgN,EAAA3P,EAAA2C,EAAAkN,GAAA/V,EAAA8I,IAAA3C,EAAAjM,KAAA0c,EAAA5W,EAAAA,EAAAmG,EAAAA,EAAAyQ,EAAAe,IAAAC,GAAA,KAAA1R,EAAAoO,EAAArZ,KAAA8E,EAAAuU,EAAAnZ,KAAA6E,EAAAuU,EAAAtZ,KAAAkL,EAAAoO,EAAApZ,MAAA4E,EAAAuU,EAAArZ,MAAA8E,EAAAuU,EAAArZ,IAAAwc,GAAA,GAAAvR,EAAAoO,EAAAnZ,MAAA+K,EAAAoO,EAAAnZ,IAAAuc,GAAA,GAAAvR,EAAAoO,EAAAtZ,MAAAkL,EAAAoO,EAAAtZ,IAAA2c,GAAA,GAAA5X,EAAAuU,EAAApZ,MAAA6E,EAAAuU,EAAApZ,IAAAwc,GAAA,GAAA5X,EAAAuU,EAAApM,IAAAnI,GAAAoG,EAAAoO,EAAArM,IAAA/B,GAAAD,EAAAoO,EAAApM,IAAAhC,GAAAlG,EAAAuU,EAAArM,IAAAlI,GAAA8V,IAAAxb,EAAAqZ,UAAAmC,EAAA3P,EAAAnG,GAAA1F,EAAAuZ,SAAA9T,EAAAC,EAAAkG,EAAAnG,EAAAoG,EAAAnG,IAAA,EAAA8D,IAAA2T,GAAAC,GAAAC,GAAAC,KAAAtd,EAAAoa,YAAApa,EAAAua,OAAA9U,EAAAoG,GAAAsR,EAAAnd,EAAAwa,OAAA/U,EAAAC,GAAA1F,EAAAua,OAAA9U,EAAAC,GAAA2X,EAAArd,EAAAwa,OAAA5O,EAAAlG,GAAA1F,EAAAua,OAAA3O,EAAAlG,GAAA0X,EAAApd,EAAAwa,OAAA5O,EAAAC,GAAA7L,EAAAua,OAAA3O,EAAAC,GAAAyR,EAAAtd,EAAAwa,OAAA/U,EAAAoG,GAAA7L,EAAAua,OAAA9U,EAAAoG,GAAA7L,EAAAya,WAAA,SAAAM,EAAAwC,EAAAC,EAAA3R,EAAAnG,GAAA,IAAA+D,EAAA8T,EAAA9T,KAAA,IAAAA,EAAA,OAAA,KAAA,GAAA8T,EAAA7T,UAAA,OAAA4P,EAAAiE,EAAA7T,UAAAmC,EAAAnG,EAAA8X,GAAAxd,EAAAT,EAAAC,MAAA+B,MAAAic,GAAA,OAAAxd,EAAAH,EAAA,iBAAA4J,EAAAA,EAAA,GAAAzJ,EAAAK,YAAAL,EAAAQ,WADAmQ,IAAAA,EAAAlE,WAAAlB,EAAA2N,SAAAhS,EAAA0J,KAAA,OAAAlE,GAAAC,EAAAxF,GAAAyF,IAAAN,IAAA/E,EAAA8C,KAAAW,YAAAQ,EAAAiS,UAAAtJ,GAAA3I,EAAAkS,KAAA,aAAAtJ,IAAA7M,EAAA8C,KAAAU,WAAAS,EAAAmS,MAAAtJ,GAAA/D,EAAAjF,EAAAkB,WAAA,CAAAf,IACA,IAAAoD,EAAA,GAAAqF,EAAA,KAAA,SAAAE,EAAAyJ,GAAArW,EAAA8C,KAAAW,WAAA6S,EAAA,YAAAD,EAAA,SAAA3M,GAAA,OAAA,GAAAA,EAAA,YAAA,SAAAmD,EAAAwJ,GAAArW,EAAA8C,KAAAW,WAAA6S,EAAA,YAAAD,EAAA,SAAA3M,GAAA,OAAA,IAAA,SAAAoD,EAAAuJ,GAAAC,EAAA,YAAAD,EAAA,SAAA3M,GAAA,OAAA,GAAAA,EAAA,YAAA,SAAA4M,EAAAC,EAAAC,EAAAC,GAAA,IAAAhR,EAAAxB,EAAAwB,SAAAiR,EAAAF,EAAAG,MAAAlR,EAAAvH,KAAAkG,EAAAlG,KAAA0Y,EAAAJ,EAAAK,MAAApR,EAAAtH,IAAAiG,EAAAjG,IAAAmI,EAAAF,EAAA,CAAAlI,KAAAwY,EAAAvY,IAAAyY,IAAAE,GAAAxQ,EAAAqQ,MAAAH,EAAAG,MAAArQ,EAAAuQ,MAAAL,EAAAK,MAAA,SAAAE,EAAAC,EAAAP,GAAA,IAAA,IAAArM,EAAA6M,EAAAjX,EAAA8C,KAAAa,kBAAAuT,EAAAD,EAAAA,EAAA,EAAAH,EAAA,KAAAne,EAAAoH,EAAAnH,OAAA,EAAA,GAAAD,IAAAA,EAAA,GAAA8d,EAAA1W,EAAApH,IAAA,CAAA,IAAAqb,EAAAE,EAAAxK,EAAA3J,EAAApH,GAAA8Z,EAAA/I,EAAA/I,MAAA+R,EAAAhJ,EAAA9H,MAAAG,EAAA2H,EAAA4B,WAAAvJ,OAAAoV,EAAA1E,EAAAtM,IAAA4Q,GAAAK,EAAA1E,EAAAvM,IAAA6Q,GAAAK,EAAAJ,EAAAxE,EAAA1Z,MAAAue,EAAAL,EAAAvE,EAAA3Z,MAAAuR,EAAAZ,EAAA4B,WAAAI,UAAA,GAAA+G,EAAAzS,QAAAgB,mBAAAqW,EAAAzM,OAAAK,WAAAyH,EAAA1S,QAAAgB,mBAAAsW,EAAA1M,OAAAK,WAAAvB,EAAArH,MAAAlC,MAAAuJ,EAAA3H,OAAA5B,KAAA,IAAAiK,EAAA,EAAAA,EAAArI,EAAAnJ,OAAAwR,GAAAE,EAAA,CAAA,IAAAiN,EAAAvQ,EAAAjF,EAAAqI,GAAAnD,EAAAlF,EAAAqI,EAAA,GAAA,MAAApD,IAAAqQ,EAAArQ,EAAAmQ,GAAAnQ,EAAAmQ,GAAAE,GAAAC,EAAArQ,EAAAmQ,GAAAnQ,EAAAmQ,GAAAE,IAAAC,GAAAC,EAAArP,KAAAqI,IAAAiC,EAAApM,IAAAW,GAAA+P,IAAAS,GAAAC,EAAAtP,KAAAqI,IAAAkC,EAAArM,IAAAY,GAAA+P,IAAAS,GAAAP,IAAAA,EAAAK,EAAAT,EAAA,CAAAne,EAAAyR,EAAAE,KAAA,GAAAZ,EAAAnH,KAAApC,OAAA2W,EAAA,CAAA,OAAApN,EAAAnH,KAAAE,OAAA,IAAA,OAAAuR,EAAA,EAAA,MAAA,IAAA,QAAAA,GAAAtK,EAAAnH,KAAAC,SAAA,MAAA,QAAAwR,GAAAtK,EAAAnH,KAAAC,SAAA,EAAA,IAAA0R,EAAAF,EAAAtK,EAAAnH,KAAAC,SAAA4H,EAAA,EAAAA,EAAArI,EAAAnJ,OAAAwR,GAAAE,EAAA,CAAA,IAAAtD,EAAAjF,EAAAqI,GAAAnD,EAAAlF,EAAAqI,EAAA,GAAA/R,EAAA0J,EAAAqI,EAAA,GAAA,MAAApD,IAAAjH,EAAApH,GAAA4J,KAAAG,WAAAyU,GAAAhP,KAAA7O,IAAAjB,EAAA2O,IAAAmQ,GAAAhP,KAAA/O,IAAAf,EAAA2O,IAAAC,EAAA+M,GAAAoD,GAAAA,GAAAnQ,EAAAiN,EAAAlN,EAAAgN,GAAAmD,GAAAA,GAAAnQ,EAAAkN,GAAAkD,GAAAjP,KAAA/O,IAAAf,EAAA4O,IAAAmQ,GAAAjP,KAAA7O,IAAAjB,EAAA4O,MAAA6P,EAAA,CAAAne,EAAAyR,EAAAE,MAAA,OAAAwM,GAAAne,EAAAme,EAAA,GAAA1M,EAAA0M,EAAA,GAAAxM,EAAAvK,EAAApH,GAAA2S,WAAAI,UAAA,CAAAgM,UAAA3X,EAAApH,GAAA2S,WAAAvJ,OAAA4V,MAAAvN,EAAAE,GAAAF,EAAA,GAAAE,GAAAsN,UAAAxN,EAAArK,OAAAA,EAAApH,GAAAkf,YAAAlf,IAAA,KAAAmf,CAAApB,EAAAE,EAAAH,IAAA,GAAAK,IAAAA,EAAAH,MAAApd,SAAAud,EAAA/W,OAAAY,MAAA0F,IAAAyQ,EAAAY,UAAA,IAAAjS,EAAAvH,KAAAkG,EAAAlG,KAAA,IAAA4Y,EAAAD,MAAAtd,SAAAud,EAAA/W,OAAA6B,MAAAyE,IAAAyQ,EAAAY,UAAA,IAAAjS,EAAAtH,IAAAiG,EAAAjG,IAAA,KAAA6B,EAAA8C,KAAAY,cAAA,CAAA,IAAA,IAAA/K,EAAA,EAAAA,EAAA0O,EAAAzO,SAAAD,EAAA,CAAA,IAAAof,EAAA1Q,EAAA1O,GAAAof,EAAAC,MAAAzB,GAAAO,GAAAiB,EAAAhY,QAAA+W,EAAA/W,QAAAgY,EAAAjR,MAAA,IAAAgQ,EAAAY,UAAA,IAAAK,EAAAjR,MAAA,IAAAgQ,EAAAY,UAAA,IAAA/Q,EAAAoR,EAAAhY,OAAAgY,EAAAjR,OAAAgQ,GAAApQ,EAAAoQ,EAAA/W,OAAA+W,EAAAY,UAAAnB,GAAA5W,EAAAsY,QAAA1B,EAAA,CAAAjQ,EAAAwQ,IAAA,SAAAlQ,IAAA,IAAAsI,EAAAlP,EAAA4D,YAAAC,uBAAA,GAAAqL,EAAAxC,EAAAA,GAAAwL,WAAAjT,EAAAiK,GAAAjK,IAAA,SAAAA,IAAA,IAAAtM,EAAAoH,EAAA+G,EAAAqR,EAAAnR,EAAAyL,EAAAC,EAAA7P,EAAA,IAAA6J,EAAA,KAAAvI,EAAAyN,OAAA5N,EAAA2N,QAAAxN,EAAA0N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KAAAxF,EAAA,EAAAA,EAAA0O,EAAAzO,SAAAD,GAAAyf,EAAA/Q,EAAA1O,IAAAoH,OAAAwC,KAAApC,KAAA,SAAAJ,EAAA+G,GAAA,IAAAkN,EAAAnR,EAAA,iBAAA9C,EAAA8C,eAAA9C,EAAA8C,eAAA7K,EAAAC,MAAA+B,MAAA+F,EAAA9H,OAAAc,MAAA,IAAA,IAAAE,WAAA6Y,EAAAjP,EAAA,OAAA9C,EAAAwC,KAAAE,OAAA,IAAA,OAAAuR,EAAA,EAAA,MAAA,IAAA,QAAAA,GAAAjU,EAAAwC,KAAAC,SAAA,MAAA,QAAAwR,GAAAjU,EAAAwC,KAAAC,SAAA,EAAA2B,EAAAlC,UAAAlC,EAAAwC,KAAAN,UAAAkC,EAAAiP,YAAAvQ,EAAAsR,EAAArN,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAA,EAAAkN,EAAAA,EAAAjU,EAAAwC,KAAAC,SAAA,WAAA,OAAAsP,GAAA/R,EAAAY,MAAAZ,EAAA6B,MAAAuC,EAAApE,EAAAwC,KAAAG,WAAA3C,EAAAwC,KAAAN,WAAAoW,CAAAD,EAAArY,OAAAqY,EAAAtR,QAAA/G,EAAAqY,EAAArY,OAAA+G,EAAAsR,EAAAtR,MAAAjE,EAAA6P,EAAAD,EAAAzL,EAAAmR,OAAAA,EAAAnR,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAA2L,EAAA1S,EAAAY,MAAA+R,EAAA3S,EAAA6B,MAAAiB,EAAA,iBAAA9C,EAAA8C,eAAA9C,EAAA8C,eAAA7K,EAAAC,MAAA+B,MAAA+F,EAAA9H,OAAAc,MAAA,IAAA,IAAAE,WAAA+N,EAAAyL,EAAArZ,KAAA4N,EAAAyL,EAAAnZ,KAAA2N,EAAAyL,EAAAtZ,KAAA6N,EAAAyL,EAAApZ,MAAA6e,EAAApY,EAAAgC,OAAAC,OAAAjC,EAAAgC,OAAAE,UAAA,EAAAkC,EAAAlC,UAAAkW,EAAAhU,EAAAiP,YAAAvQ,EAAAb,EAAA,IAAAmW,EAAAnR,EAAAyL,EAAApM,IAAAW,GAAAC,EAAAyL,EAAArM,IAAAY,GAAA9C,EAAA0O,YAAA,UAAA9S,EAAAgC,OAAAK,OAAA+B,EAAAuQ,IAAA1N,EAAAC,EAAAjF,EAAA,EAAA,EAAAmG,KAAAkL,IAAA,GAAAtT,EAAAgC,OAAAK,OAAA+B,EAAA6C,EAAAC,EAAAjF,GAAA,GAAAmC,EAAAwQ,YAAAxQ,EAAA+O,WAAA/O,EAAA8N,UAAAlJ,EAAAjF,EAAAmB,YAAA,CAAAd,IAAA,SAAAuC,EAAAgD,EAAA5C,EAAAkR,GAAA,iBAAAtO,IAAAA,EAAA3J,EAAA2J,IAAA,iBAAA5C,IAAAwD,EAAAZ,EAAA4B,WAAAI,UAAA5E,EAAA4C,EAAA4B,WAAAvJ,OAAA4V,MAAArN,EAAAxD,EAAAwD,GAAAxD,EAAA,KAAA,IAAAnO,EAAA2f,EAAA5O,EAAA5C,IAAA,GAAAnO,GAAA0O,EAAAsC,KAAA,CAAA5J,OAAA2J,EAAA5C,MAAAA,EAAAkR,KAAAA,IAAApR,KAAAoR,IAAA3Q,EAAA1O,GAAAqf,MAAA,GAAA,SAAArR,EAAA+C,EAAA5C,GAAA,GAAA,MAAA4C,GAAA,MAAA5C,EAAA,OAAAO,EAAA,QAAAT,IAAA,iBAAA8C,IAAAA,EAAA3J,EAAA2J,IAAA,iBAAA5C,IAAAwD,EAAAZ,EAAA4B,WAAAI,UAAA5E,EAAA4C,EAAA4B,WAAAvJ,OAAA4V,MAAArN,EAAAxD,EAAAwD,GAAAxD,EAAA,KAAA,IAAAnO,EAAA2f,EAAA5O,EAAA5C,IAAA,GAAAnO,IAAA0O,EAAAkR,OAAA5f,EAAA,GAAAiO,KAAA,SAAA0R,EAAA5O,EAAAnC,GAAA,IAAA,IAAA5O,EAAA,EAAAA,EAAA0O,EAAAzO,SAAAD,EAAA,CAAA,IAAAof,EAAA1Q,EAAA1O,GAAA,GAAAof,EAAAhY,QAAA2J,GAAAqO,EAAAjR,MAAA,IAAAS,EAAA,IAAAwQ,EAAAjR,MAAA,IAAAS,EAAA,GAAA,OAAA5O,EAAA,OAAA,EAAA,SAAAoZ,EAAAyG,EAAAlU,EAAAnG,EAAAsa,GAAA,GAAA,iBAAAD,EAAA,OAAAA,EAAA,IAAA,IAAAE,EAAAxU,EAAAyU,qBAAA,EAAAxa,EAAA,EAAAmG,GAAA3L,EAAA,EAAAigB,EAAAJ,EAAAvY,OAAArH,OAAAD,EAAAigB,IAAAjgB,EAAA,CAAA,IAAAkgB,EAAApgB,EAAA+f,EAAAvY,OAAAtH,GAAA,iBAAAF,IAAAogB,EAAA7gB,EAAAC,MAAA+B,MAAAye,GAAA,MAAAhgB,EAAAqgB,aAAAD,EAAAA,EAAA9f,MAAA,MAAAN,EAAAqgB,aAAA,MAAArgB,EAAAsgB,UAAAF,EAAAvgB,GAAAG,EAAAsgB,SAAAtgB,EAAAogB,EAAA5f,YAAAyf,EAAAM,aAAArgB,GAAAigB,EAAA,GAAAngB,GAAA,OAAAigB,GADA1gB,EAAAihB,GAAAC,SAAAlhB,EAAAihB,GAAAC,OAAA,WAAA,OAAAxa,KAAAkH,KAAA,WAAAlH,KAAAya,YAAAza,KAAAya,WAAAC,YAAA1a,UAAAlB,EAAAD,UAAA6B,OAAA,SAAAC,EAAAC,GAAA,GAAAD,GAAA,GAAAC,GAAA,EAAA,MAAA,IAAAd,MAAA,wCAAAa,EAAA,cAAAC,GAAA,IAAA3B,EAAAe,KAAAf,QAAAgB,EAAAD,KAAAC,QAAAQ,EAAAT,KAAAS,WAAAT,KAAAW,OAAAA,IAAA1B,EAAA0B,MAAAA,EAAAF,EAAAxB,EAAAsK,MAAA5I,MAAAA,EAAA,KAAAX,KAAAW,MAAAA,GAAAX,KAAAY,QAAAA,IAAA3B,EAAA2B,OAAAA,EAAAH,EAAAxB,EAAAsK,MAAA3I,OAAAA,EAAA,KAAAZ,KAAAY,OAAAA,GAAAX,EAAAsT,UAAAtT,EAAAiT,OAAAjT,EAAA5F,MAAAoG,EAAAA,IAAA3B,EAAAD,UAAAoU,MAAA,WAAAjT,KAAAC,QAAA0a,UAAA,EAAA,EAAA3a,KAAAW,MAAAX,KAAAY,SAAA9B,EAAAD,UAAAqX,OAAA,WAAA,IAAA0E,EAAAC,EAAA7a,KAAAe,WAAA,IAAA6Z,KAAAC,EAAA,GAAAlc,EAAAmc,KAAAD,EAAAD,GAAA,CAAA,IAAAG,EAAAnK,EAAA5Q,KAAAgb,aAAAJ,GAAAK,EAAAJ,EAAAD,GAAA,IAAAG,KAAAnK,EAAAsK,OAAAD,EAAA,GAAAtc,EAAAmc,KAAAG,EAAAF,GAAA,CAAA,IAAAlT,EAAAsT,EAAAF,EAAAF,GAAA,IAAAlT,KAAAsT,EAAA,GAAAxc,EAAAmc,KAAAK,EAAAtT,GAAA,CAAA,IAAA,IAAAtI,EAAA6b,EAAAD,EAAAtT,GAAAuT,UAAAnhB,EAAA,EAAAsF,EAAA6b,EAAAnhB,GAAAA,IAAAsF,EAAA8b,OAAA9b,EAAA+b,WAAA1K,EAAA2K,OAAAhc,EAAAN,SAAAM,EAAA+b,UAAA,IAAAF,EAAAvB,OAAA5f,IAAA,GAAAsF,EAAA+b,UAAA/b,EAAAN,QAAAub,UAAA,GAAAY,EAAAlhB,eAAAihB,EAAAtT,IAAA+I,EAAAnP,SAAA3C,EAAAD,UAAAmc,aAAA,SAAApS,GAAA,IAAAgI,EAAA5Q,KAAAc,KAAA8H,GAAA,OAAA,MAAAgI,IAAA,MAAA5Q,KAAAa,gBAAAb,KAAAa,cAAAvH,EAAA,iCAAA2B,IAAA,CAAAsE,SAAA,WAAAE,IAAA,EAAAD,KAAA,EAAAoG,OAAA,EAAAD,MAAA,EAAA6V,YAAA,UAAAjiB,MAAA,YAAAkiB,YAAAzb,KAAAf,UAAA2R,EAAA5Q,KAAAc,KAAA8H,GAAAtP,EAAA,eAAAoiB,SAAA9S,GAAA3N,IAAA,CAAAsE,SAAA,WAAAE,IAAA,EAAAD,KAAA,EAAAoG,OAAA,EAAAD,MAAA,IAAAjG,SAAAM,KAAAa,gBAAA+P,GAAA9R,EAAAD,UAAAiS,YAAA,SAAAF,EAAA9P,EAAAqB,EAAAwR,EAAAhT,GAAA,IAAAgb,EAAAR,EAAAtK,EAAA,OAAA/P,EAAA,GAAAA,EAAA6a,EAAA,iBAAAxZ,EAAAA,EAAAoH,MAAA,IAAApH,EAAAwH,QAAA,IAAAxH,EAAAyH,OAAA,IAAAzH,EAAAqH,KAAA,MAAArH,EAAA2H,WAAA,MAAA3H,EAAA0H,OAAA1H,EAAA,OAAA0O,GAAAsK,EAAA,OAAAA,GAAAF,EAAA,OAAAA,EAAAjb,KAAAe,WAAA6P,IAAA5Q,KAAAe,WAAA6P,GAAA,GAAAqK,GAAAU,IAAAV,EAAAU,GAAA,GAAAR,GAAAra,MAAA7B,EAAA3F,EAAA,eAAA8Y,KAAAtR,GAAA7F,IAAA,CAAAsE,SAAA,WAAAqc,YAAAjb,EAAAlB,KAAA,OAAAC,SAAAM,KAAAgb,aAAApK,IAAA,iBAAAzO,EAAAlD,EAAAhE,IAAA,CAAAkH,KAAAwZ,EAAApiB,MAAA4I,EAAA5I,QAAA,iBAAA4I,GAAAlD,EAAAyc,SAAAvZ,GAAA0O,EAAAsK,EAAAra,GAAA,CAAAH,MAAA1B,EAAA4c,YAAA,GAAAjb,OAAA3B,EAAA6c,aAAA,GAAA7c,QAAAA,EAAAmc,UAAA,IAAAnc,EAAAub,UAAA3J,GAAA/R,EAAAD,UAAAsT,QAAA,SAAAvB,EAAAtI,EAAAC,EAAAzH,EAAAqB,EAAAwR,EAAAhT,EAAAqR,EAAAC,GAAA,IAAApB,EAAA7Q,KAAA8Q,YAAAF,EAAA9P,EAAAqB,EAAAwR,EAAAhT,GAAAya,EAAAvK,EAAAuK,UAAA,UAAApJ,EAAA1J,GAAAuI,EAAAlQ,MAAA,EAAA,SAAAqR,IAAA1J,GAAAuI,EAAAlQ,OAAA,UAAAsR,EAAA1J,GAAAsI,EAAAjQ,OAAA,EAAA,UAAAqR,IAAA1J,GAAAsI,EAAAjQ,QAAA,IAAA,IAAArB,EAAAtF,EAAA,EAAAsF,EAAA6b,EAAAnhB,GAAAA,IAAA,GAAAsF,EAAA+I,GAAAA,GAAA/I,EAAAgJ,GAAAA,EAAA,YAAAhJ,EAAA8b,QAAA,GAAA9b,EAAA,CAAA8b,QAAA,EAAAC,UAAA,EAAArc,QAAAmc,EAAAlhB,OAAA2W,EAAA5R,QAAAnE,QAAA+V,EAAA5R,QAAAqJ,EAAAA,EAAAC,EAAAA,GAAA6S,EAAAnQ,KAAA1L,GAAAA,EAAAN,QAAAhE,IAAA,CAAAwE,IAAAgK,KAAAC,MAAAnB,GAAA/I,KAAAiK,KAAAC,MAAApB,GAAAyT,aAAA/J,KAAAlT,EAAAD,UAAAqT,WAAA,SAAAtB,EAAAtI,EAAAC,EAAAzH,EAAAqB,EAAAwR,GAAA,GAAA,MAAA7S,EAAA,CAAA,IAAAma,EAAAjb,KAAAe,WAAA6P,GAAA,GAAA,MAAAqK,EAAA,IAAA,IAAAF,KAAAE,EAAA,GAAAtc,EAAAmc,KAAAG,EAAAF,GAAA,CAAA,IAAAlT,EAAAsT,EAAAF,EAAAF,GAAA,IAAAlT,KAAAsT,EAAA,GAAAxc,EAAAmc,KAAAK,EAAAtT,GAAA,IAAA,IAAAuT,EAAAD,EAAAtT,GAAAuT,UAAAnhB,EAAA,EAAAsF,EAAA6b,EAAAnhB,GAAAA,IAAAsF,EAAA8b,QAAA,QAAA,IAAA,IAAA9b,EAAA6b,EAAApb,KAAA8Q,YAAAF,EAAA9P,EAAAqB,EAAAwR,GAAAyH,UAAAnhB,EAAA,EAAAsF,EAAA6b,EAAAnhB,GAAAA,IAAAsF,EAAA+I,GAAAA,GAAA/I,EAAAgJ,GAAAA,IAAAhJ,EAAA8b,QAAA,IACA/hB,EAAAmN,KAAA,SAAAxF,EAAA0J,EAAArJ,GAAA,OAAA,IAAAN,EAAA1H,EAAA2H,GAAA0J,EAAArJ,EAAAhI,EAAAmN,KAAArF,UAAA9H,EAAAmN,KAAAuV,QAAA,QAAA1iB,EAAAmN,KAAArF,QAAA,GAAA9H,EAAAihB,GAAA9T,KAAA,SAAAkE,EAAArJ,GAAA,OAAAtB,KAAAkH,KAAA,WAAA5N,EAAAmN,KAAAzG,KAAA2K,EAAArJ,MADA,CACA5C,QCDA,SAAApF,EAAAqe,EAAAnH,GAAA,IAAA5W,EAAAK,EAAA,GAAAqN,EAAAhO,EAAAoH,OAAApH,EAAAyP,OAAAzP,EAAAoH,OAAA,IAAAjH,GAAA,EAAAuR,EAAA,aAAAiR,EAAA,SAAAxgB,EAAAwgB,EAAA,iBAAApiB,EAAA,eAAAqgB,EAAA,cAAA5f,EAAA,iBAAA,SAAA+e,EAAA7I,IAAA,IAAA/W,IAAAA,EAAA+W,GAAA,GAAA,IAAA,IAAAxF,EAAA/Q,EAAAC,OAAA,EAAA,GAAA8Q,EAAAA,IAAA,CAAA,IAAA1Q,EAAAP,EAAAC,EAAAkgB,EAAA5gB,EAAAW,EAAA+Q,IAAAkP,EAAA,IAAAvC,GAAAuC,EAAAgC,GAAA,aAAA5hB,EAAA4f,EAAAvZ,QAAA5G,EAAAmgB,EAAAtZ,WAAA5G,EAAAkgB,EAAAvP,KAAAlP,KAAAnB,IAAAN,EAAA6b,GAAA9b,IAAAC,EAAAqf,IAAAa,EAAAX,QAAA0C,EAAA,CAAAjiB,EAAA6b,EAAAvb,EAAAN,EAAAqf,EAAAtf,IAAAN,EAAA+W,IAAA,MAAAxW,EAAAkgB,EAAAvP,KAAAlP,IAAAoa,EAAA,EAAA7b,EAAAqf,EAAA,GAAA,OAAAzf,IAAAH,IAAA,MAAA+W,GAAAA,EAAA/W,EAAA,KAAAG,EAAA+d,EAAAwE,sBAAA9C,IAAAzf,EAAA4f,WAAAH,EAAA/R,EAAAzN,IAAAJ,GAAA,IAAA6N,EAAAzN,GAAA,IAAAyN,EAAA4S,GAAA,GAAA5S,EAAAhN,IAAA,EAAAhB,EAAAwe,MAAAsE,QAAAH,GAAA,CAAAI,MAAA,WAAA,IAAA/U,EAAAhN,IAAA0F,KAAAgL,GAAA,OAAA,EAAA,IAAA2M,EAAAre,EAAA0G,MAAA/F,EAAAgR,KAAAjL,MAAA2X,EAAAhN,KAAAlP,EAAA,CAAAoa,EAAA8B,EAAAhX,QAAA0Y,EAAA1B,EAAA/W,WAAA,IAAA3G,EAAAC,SAAAN,EAAA4W,EAAA6I,MAAAiD,SAAA,WAAA,IAAAhV,EAAAhN,IAAA0F,KAAAgL,GAAA,OAAA,EAAA,IAAA,IAAA2M,EAAAre,EAAA0G,MAAAwQ,EAAAvW,EAAAC,OAAA,EAAA,GAAAsW,EAAAA,IAAA,GAAAvW,EAAAuW,IAAAxQ,KAAA,CAAA/F,EAAA4f,OAAArJ,EAAA,GAAA,MAAAmH,EAAAlP,WAAAhN,GAAAxB,EAAAC,UAAAT,EAAA8iB,qBAAAtO,cAAArU,GAAAA,EAAA,OAAAE,IAAA,SAAA6d,GAAA,IAAArQ,EAAAhN,IAAA0F,KAAAgL,GAAA,OAAA,EAAA,IAAA/Q,EAAA,SAAAL,EAAA+d,EAAArQ,EAAA1N,GAAA,IAAAH,EAAAH,EAAA0G,MAAAgL,EAAAvR,EAAAkR,KAAAlP,IAAA,GAAAuP,EAAA6K,EAAAvO,IAAAkJ,EAAAlJ,EAAA7N,EAAAkH,QAAAqK,EAAAqO,EAAAzf,IAAA4W,EAAA5W,EAAAH,EAAAmH,SAAA3G,EAAA6Q,MAAA9K,KAAAwc,WAAA,GAAAljB,EAAAyW,WAAA4H,GAAA,OAAA1d,EAAA0d,EAAA/d,EAAAK,EAAA0d,EAAA8E,QAAA9E,EAAA8E,QAAA7iB,IAAA+d,EAAAwE,wBAAAxE,EAAAwE,sBAAAxE,EAAA+E,6BAAA/E,EAAAgF,0BAAAhF,EAAAiF,wBAAAjF,EAAAkF,yBAAA,SAAArM,EAAAvW,GAAA,OAAA0d,EAAA6B,WAAA,WAAAhJ,GAAA,IAAAsM,MAAAC,YAAAzV,EAAA4S,MAAAvC,EAAA4E,uBAAA5E,EAAA4E,qBAAA5E,EAAAqF,mCAAArF,EAAAsF,gCAAAtF,EAAAuF,8BAAAvF,EAAAwF,+BAAAlP,cAAA,CAAAvP,OAAAsB,MAAAtB,OAAA+H,KAAArF,QAAA6J,KAAA,CAAAnC,KAAA,SAAArC,GAAA,SAAA2W,IAAA,IAAAnc,EAAAwF,EAAAG,iBAAA,GAAA3F,EAAAN,SAAA,GAAAM,EAAAL,WAAA6F,EAAA/F,SAAA+F,EAAAE,YAAAF,EAAAJ,QAAAI,EAAArB,MAAAkB,WAAA2E,KAAA,SAAAxE,EAAAlB,GAAAkB,EAAAG,iBAAAlG,OAAA0c,KAAA3W,EAAArB,MAAAoB,SAAAyE,KAAA,SAAAxE,EAAAlB,GAAAkB,EAAAG,iBAAA6D,OAAA,SAAA2S,MAAA9b,QAAA,GAAA1F,KAAA,SAAAogB,QAAA,QCAA,SAAA1iB,GAAA,SAAA+jB,EAAA/V,EAAAgI,GAAA,OAAAA,EAAA7F,KAAAmF,MAAAtH,EAAAgI,GAAA,SAAAgO,EAAAtjB,EAAAujB,EAAAC,EAAAC,GAAA,GAAA,mBAAAzjB,EAAA0jB,SAAA,OAAA1jB,EAAA0jB,SAAAH,GAAA,SAAAI,EAAArW,EAAAsW,GAAA,OAAAA,EAAA,IAAA,MAAAA,EAAA,IAAAA,GAAA,IAAAtW,EAAA,GAAAA,GAAApN,OAAA0jB,EAAAtW,EAAAA,EAAA,IAAA7N,EAAA,GAAAokB,GAAA,EAAAC,EAAA9jB,EAAA+jB,WAAAC,EAAAF,EAAA,GAAA,MAAAN,IAAAA,EAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,QAAA,MAAAC,IAAAA,EAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,QAAA,IAAA,IAAAQ,EAAA,GAAAH,EAAAA,EAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA7jB,EAAA,EAAAA,EAAAsjB,EAAArjB,SAAAD,EAAA,CAAA,IAAAF,EAAAwjB,EAAApjB,OAAAF,GAAA,GAAA4jB,EAAA,CAAA,OAAA9jB,GAAA,IAAA,IAAAA,EAAA,GAAA0jB,EAAAzjB,EAAAkkB,UAAA,MAAA,IAAA,IAAAnkB,EAAA,GAAAyjB,EAAAxjB,EAAAmkB,YAAA,MAAA,IAAA,IAAApkB,EAAA4jB,EAAA3jB,EAAAokB,WAAA,MAAA,IAAA,IAAArkB,EAAA4jB,EAAA3jB,EAAAokB,UAAA,KAAA,MAAA,IAAA,IAAA,IAAA,IAAArkB,EAAA4jB,EAAAG,GAAA,MAAA,IAAA,IAAA/jB,EAAA4jB,EAAAM,GAAA,MAAA,IAAA,IAAAlkB,EAAA4jB,EAAAM,EAAA,KAAA,MAAA,IAAA,IAAAlkB,EAAA4jB,EAAA3jB,EAAAmkB,WAAA,GAAA,MAAA,IAAA,IAAApkB,EAAA4jB,EAAA3jB,EAAAqkB,cAAA,MAAA,IAAA,IAAAtkB,EAAA,IAAA0P,KAAAmF,MAAA5U,EAAAmkB,WAAA,GAAA,GAAA,MAAA,IAAA,IAAApkB,EAAA4jB,EAAA3jB,EAAAskB,cAAA,MAAA,IAAA,IAAAvkB,EAAA4jB,EAAA3jB,EAAAukB,cAAA,KAAA,MAAA,IAAA,IAAAxkB,EAAA,GAAAC,EAAAukB,cAAA,MAAA,IAAA,IAAAxkB,EAAAikB,EAAA,KAAA,KAAA,MAAA,IAAA,IAAAjkB,EAAAikB,EAAA,KAAA,KAAA,MAAA,IAAA,IAAAjkB,EAAA,GAAAC,EAAAkkB,SAAAzkB,EAAAwR,KAAAlR,GAAA8jB,GAAA,MAAA,KAAA9jB,EAAA8jB,GAAA,EAAApkB,EAAAwR,KAAAlR,GAAA,OAAAN,EAAAe,KAAA,IAAA,SAAAgkB,EAAAxkB,GAAA,SAAAykB,EAAAC,EAAAC,EAAAC,EAAAC,GAAAH,EAAAC,GAAA,WAAA,OAAAC,EAAAC,GAAA/T,MAAA8T,EAAApC,YAAA,IAAA,IAAAsC,EAAA,CAAAC,KAAA/kB,GAAAglB,GAAApR,MAAA5T,EAAA0jB,UAAAe,EAAAK,EAAA,WAAA9kB,EAAA,YAAAykB,EAAAK,EAAA,UAAA9kB,EAAA,WAAAykB,EAAAK,EAAA,UAAA9kB,EAAA,WAAA,CAAA,OAAA,MAAA,WAAA,QAAA,eAAA,UAAA,QAAA,YAAA6O,EAAA,EAAAA,EAAAmW,EAAA9kB,OAAA2O,IAAA4V,EAAAK,EAAA,MAAAE,EAAAnW,GAAA7O,EAAA,SAAAglB,EAAAnW,IAAA4V,EAAAK,EAAA,MAAAE,EAAAnW,GAAA7O,EAAA,SAAAglB,EAAAnW,IAAA,OAAAiW,EAAA,SAAAG,EAAA/O,EAAAlH,GAAA,MAAA,WAAAA,EAAAkW,SAAA,IAAApC,KAAA5M,GAAAlH,EAAAkW,UAAA,OAAAlW,EAAAkW,UAAA,oBAAAC,iBAAA,IAAAA,WAAArC,OAAA9iB,EAAA,IAAAmlB,WAAArC,MAAAsC,YAAApW,EAAAkW,UAAAllB,EAAAqlB,QAAAnP,GAAAlW,GAAAwkB,EAAA,IAAA1B,KAAA5M,IAAA,IAAAlW,EAAA,IAAAslB,EAAA,CAAAC,OAAA,IAAAC,OAAA,IAAAC,KAAA,KAAAC,IAAA,MAAAC,MAAA,OAAAC,QAAA,OAAAC,KAAA,SAAA,GAAA,KAAAC,EAAA,CAAA,CAAA,EAAA,UAAA,CAAA,EAAA,UAAA,CAAA,EAAA,UAAA,CAAA,GAAA,UAAA,CAAA,GAAA,UAAA,CAAA,EAAA,UAAA,CAAA,EAAA,UAAA,CAAA,EAAA,UAAA,CAAA,GAAA,UAAA,CAAA,GAAA,UAAA,CAAA,EAAA,QAAA,CAAA,EAAA,QAAA,CAAA,EAAA,QAAA,CAAA,EAAA,QAAA,CAAA,GAAA,QAAA,CAAA,EAAA,OAAA,CAAA,EAAA,OAAA,CAAA,EAAA,OAAA,CAAA,IAAA,SAAA,CAAA,GAAA,SAAA,CAAA,EAAA,SAAA,CAAA,EAAA,UAAAC,EAAAD,EAAA3Y,OAAA,CAAA,CAAA,EAAA,SAAA,CAAA,EAAA,SAAA,CAAA,EAAA,UAAA6Y,EAAAF,EAAA3Y,OAAA,CAAA,CAAA,EAAA,WAAA,CAAA,EAAA,WAAA,CAAA,EAAA,UAAA7N,EAAAmN,KAAArF,QAAA6J,KAAA,CAAAnC,KAAA,SAAArC,GAAAA,EAAArB,MAAAW,eAAAkF,KAAA,SAAAxE,EAAAnF,GAAAhI,EAAA4N,KAAAT,EAAAQ,UAAA,SAAAgZ,EAAA5Y,GAAA,IAAA2B,EAAA3B,EAAA/F,QAAA,QAAA0H,EAAA9G,OAAAmF,EAAA+H,cAAA,SAAA/H,GAAA,IAAA7E,EAAA,GAAAxI,EAAAilB,EAAA5X,EAAA3M,IAAAsO,GAAAkX,EAAA,EAAApG,EAAA9Q,EAAAhG,UAAA,YAAAgG,EAAAhG,SAAA,IAAAgG,EAAA/F,aAAA,YAAA+F,EAAA/F,YAAA,GAAA+c,EAAAD,EAAA,MAAA/W,EAAA/F,cAAAid,EAAA,iBAAAlX,EAAAhG,SAAAgG,EAAAhG,SAAAgG,EAAA/F,YAAA,GAAAqc,EAAAtW,EAAA/F,YAAA,KAAA,IAAA,IAAAhJ,EAAA,EAAAA,EAAA6f,EAAA5f,OAAA,KAAAmN,EAAA0E,OAAA+N,EAAA7f,GAAA,GAAAqlB,EAAAxF,EAAA7f,GAAA,IAAA6f,EAAA7f,EAAA,GAAA,GAAAqlB,EAAAxF,EAAA7f,EAAA,GAAA,KAAA,GAAA6f,EAAA7f,GAAA,GAAAqlB,EAAAxF,EAAA7f,GAAA,KAAAimB,KAAAjmB,GAAA,IAAAgV,EAAAE,EAAA3F,EAAAsQ,EAAA7f,GAAA,GAAA+I,GAAA,SAAAmd,EAAArG,EAAA7f,GAAA,MAAA,MAAA+O,EAAA/F,aAAA,QAAA+F,EAAA/F,YAAA,GAAAuG,EAAAC,KAAAmF,MAAA5F,EAAA/F,YAAA,KAAAgM,EAAAxF,KAAAyF,IAAA,GAAAzF,KAAAmF,MAAAnF,KAAAoF,IAAAxH,EAAA0E,MAAAuT,EAAAO,MAAApW,KAAAqF,OAAAtF,GAAA2F,EAAA9H,EAAA0E,MAAAuT,EAAAO,KAAA5Q,GAAA,IAAA,EAAAE,EAAA,EAAA,EAAAA,EAAA,IAAA,EAAA,GAAA3F,GAAAyF,GAAAzF,EAAA,IAAAA,EAAA,IAAAnC,EAAArE,SAAAgG,EAAAhG,UAAA,CAAAwG,EAAA2W,GAAA9Y,EAAArE,SAAA,IAAAmd,EAAA9Y,EAAArE,SAAA,GAAAod,EAAApd,EAAAsc,EAAAa,GAAAE,GAAA,UAAAF,EAAAnmB,EAAAsmB,WAAAjD,EAAArjB,EAAAskB,aAAAtb,IAAA,UAAAmd,EAAAnmB,EAAAumB,WAAAlD,EAAArjB,EAAAqkB,aAAArb,IAAA,QAAAmd,EAAAnmB,EAAAwmB,SAAAnD,EAAArjB,EAAA+jB,WAAA/a,IAAA,SAAAmd,EAAAnmB,EAAAymB,SAAApD,EAAArjB,EAAAmkB,WAAAnb,IAAA,WAAAmd,EAAAnmB,EAAAymB,SAAA,EAAApD,EAAArjB,EAAAmkB,WAAA,EAAAnb,IAAA,QAAAmd,GAAAnmB,EAAA0mB,YAAArD,EAAArjB,EAAAukB,cAAAvb,IAAAhJ,EAAA2mB,gBAAA,GAAArB,EAAAE,QAAAY,GAAApmB,EAAAsmB,WAAA,GAAAhB,EAAAG,MAAAW,GAAApmB,EAAAumB,WAAA,GAAAjB,EAAAI,KAAAU,GAAApmB,EAAAwmB,SAAA,GAAA,EAAAlB,EAAAI,KAAAU,GAAApmB,EAAA4mB,QAAA,GAAA,EAAAtB,EAAAK,OAAAS,GAAApmB,EAAAymB,SAAApD,EAAArjB,EAAAmkB,WAAA,IAAA,EAAAmB,EAAAM,SAAAQ,GAAApmB,EAAAymB,SAAApD,EAAArjB,EAAAmkB,WAAA,IAAAmB,EAAAO,MAAAO,GAAApmB,EAAAymB,SAAA,GAAA,GAAAhV,EAAAS,OAAAsD,IAAA,GAAA,IAAAD,EAAAsR,EAAAxR,EAAA5D,EAAAA,EAAAzR,EAAA+iB,gBAAAva,EAAAyI,KAAAQ,GAAA,SAAA0U,GAAA,WAAAA,EAAAnd,EAAA,GAAAhJ,EAAA4mB,QAAA,GAAArR,EAAAvV,EAAA+iB,UAAA/iB,EAAAymB,SAAAzmB,EAAAmkB,YAAA,WAAAgC,EAAA,EAAA,IAAAU,EAAA7mB,EAAA+iB,UAAA/iB,EAAAqlB,QAAA5T,EAAA4U,EAAAf,EAAAG,MAAAoB,EAAAtR,GAAAvM,GAAAqd,EAAArmB,EAAA+jB,WAAA/jB,EAAAwmB,SAAA,IAAAxmB,EAAAymB,SAAAzmB,EAAAmkB,WAAAnb,GAAA,WAAAmd,EAAA,EAAA,IAAA,QAAAA,EAAAnmB,EAAA0mB,YAAA1mB,EAAAukB,cAAAvb,GAAAhJ,EAAAqlB,QAAA5T,EAAA2U,GAAA3U,EAAApE,EAAAzM,KAAA6Q,GAAA4D,GAAA,OAAA7M,GAAA6E,EAAA5E,cAAA,SAAAgJ,EAAApE,GAAArN,EAAAilB,EAAAxT,EAAApE,EAAA/F,SAAA,GAAA,MAAA0H,EAAA8X,WAAA,OAAAxD,EAAAtjB,EAAAgP,EAAA8X,WAAA9X,EAAAwU,WAAAxU,EAAAyU,UAAA,IAAAsD,EAAA1Z,EAAA/F,QAAA0B,UAAA,WAAAqE,EAAA/F,QAAA0B,SAAA,IAAAqE,EAAA/F,QAAA2B,aAAA,WAAAoE,EAAA/F,QAAA2B,YAAA,GAAAuN,EAAAnJ,EAAArE,SAAA,GAAAsc,EAAAjY,EAAArE,SAAA,IAAAge,EAAA3Z,EAAAzM,IAAAyM,EAAA3M,IAAAumB,EAAAjY,EAAAkY,gBAAA,MAAA,GAAAC,EAAAnY,EAAAkY,gBAAA,KAAA,KAAA3D,EAAA/M,EAAA8O,EAAAE,OAAA2B,EAAA,SAAAF,EAAAzQ,EAAA8O,EAAAI,IAAAsB,EAAA,EAAA1B,EAAAI,IAAAyB,EAAA,MAAAF,EAAA,SAAAE,EAAA,MAAAF,EAAAzQ,EAAA8O,EAAAK,MAAA,QAAAoB,GAAAvQ,EAAA8O,EAAAM,UAAAmB,GAAAvQ,EAAA8O,EAAAO,KAAAmB,EAAA1B,EAAAO,KAAA,KAAA,QAAAkB,GAAAvQ,EAAA8O,EAAAO,KAAAmB,EAAA1B,EAAAO,KAAA,MAAA,SAAA,KAAA,OAAAvC,EAAAtjB,EAAAujB,EAAAvU,EAAAwU,WAAAxU,EAAAyU,iBAAAnc,QAAA,CAAAW,MAAA,CAAAid,SAAA,KAAA4B,WAAA,KAAAI,iBAAA,EAAA1D,WAAA,OAAA5hB,KAAA,OAAAogB,QAAA,QAAA1iB,EAAAmN,KAAA6W,WAAAA,EAAAhkB,EAAAmN,KAAAwY,cAAAA,EAAA,CAAAvgB,QCAA,SAAApF,GAAA,SAAA0M,EAAAS,EAAApF,EAAAsJ,EAAAiC,GAAA,IAAAwU,EAAA,cAAA/f,EAAAY,MAAAX,QAAAY,KAAAmf,EAAA,cAAAhgB,EAAA6B,MAAA5B,QAAAY,KAAA,GAAAkf,GAAAC,EAAA,CAAA,IAAArV,EAAAF,EAAAc,EAAAd,OAAAA,IAAAd,EAAA3J,GAAAyK,EAAA,IAAAb,KAAA,CAAA3C,GAAA,EAAAuE,QAAA,EAAAC,UAAA,IAAAhB,EAAAb,KAAA,CAAA1C,GAAA,EAAAsE,QAAA,EAAAC,UAAA,KAAA9B,EAAAnH,KAAApC,MAAAuJ,EAAArH,MAAAlC,MAAAuJ,EAAArH,MAAAH,QAAAwI,KAAAhB,EAAAnH,KAAApC,MAAAuJ,EAAAnH,KAAAI,MAAA+G,EAAArH,MAAAlC,MAAAuJ,EAAArH,MAAAM,MAAA6H,EAAAb,KAAA,CAAA1C,GAAA,EAAAsE,QAAA,EAAAC,UAAA,EAAAC,aAAA,EAAAf,UAAAA,IAAAhB,EAAAnH,KAAAG,oBAAA8H,EAAAA,EAAA5R,OAAA,GAAAqO,EAAAuD,EAAAA,EAAA5R,OAAA,GAAAoO,GAAA,IAAAsE,EAAAd,OAAAA,GAAA,IAAA,IAAArQ,EAAA,EAAAA,EAAAqQ,EAAA5R,SAAAuB,EAAAqQ,EAAArQ,GAAA6M,GAAA8Y,IAAAtV,EAAArQ,GAAAoR,QAAA,GAAAf,EAAArQ,GAAA8M,GAAA8Y,IAAAvV,EAAArQ,GAAAoR,QAAA,IAAA,SAAAyU,EAAAja,GAAA,IAAAkJ,EAAA/U,EAAA,GAAA,IAAA+U,KAAAlJ,EAAAka,WAAA,CAAA,IAAA9V,EAAApE,EAAAka,WAAAhR,GAAA9E,GAAApE,EAAA3M,KAAA+Q,GAAApE,EAAAzM,KAAAY,EAAAyP,KAAA,CAAAQ,EAAA8E,IAAA,OAAA/U,EAAAmX,KAAA,SAAA/Y,EAAAD,GAAA,OAAAC,EAAA,GAAAD,EAAA,KAAA6B,EAAA,SAAAgmB,EAAAngB,EAAAgG,EAAAuF,GAAA,GAAA,cAAAvL,EAAAgG,GAAA/F,QAAAY,KAAA,CAAA,IAAAb,EAAAgG,GAAAka,WAAA,CAAA,IAAAxnB,EAAA,GAAAF,EAAAwH,EAAAgG,GAAA/F,QAAAigB,YAAA,GAAA,GAAAjoB,EAAAmoB,QAAA5nB,GAAA,IAAA,IAAAI,EAAA,EAAAA,EAAAJ,EAAAK,SAAAD,EAAAF,EAAAF,EAAAI,IAAAA,OAAA,IAAA,IAAAwR,KAAA5R,EAAAE,EAAA0R,GAAA5R,EAAA4R,GAAApK,EAAAgG,GAAAka,WAAAxnB,EAAAsH,EAAAgG,GAAA/F,QAAAkB,QAAAnB,EAAAgG,GAAA/F,QAAAkB,MAAA8e,GAAA,IAAAI,IAAAra,EAAAA,EAAAka,EAAAlgB,EAAAgG,GAAAka,WAAAle,EAAAuJ,EAAAvJ,OAAAuI,EAAAgB,EAAAI,UAAAlB,EAAAc,EAAAd,OAAA6V,EAAAta,EAAAlN,OAAA,GAAAynB,EAAA,SAAAL,GAAA,IAAA9V,EAAAmW,GAAA,EAAA,IAAAnW,KAAA8V,EAAAA,EAAA9V,GAAAmW,IAAAA,EAAAL,EAAA9V,IAAA,OAAAmW,EAAA,EAAAC,CAAAN,GAAAtnB,EAAA,EAAAA,EAAAoJ,EAAAnJ,OAAAD,GAAA2R,EAAA,GAAA,MAAAvI,EAAApJ,GAAA,IAAA,IAAAwB,EAAA,EAAAA,EAAAmQ,IAAAnQ,EAAA,CAAA,IAAAoQ,EAAAxI,EAAApJ,EAAAwB,GAAA,MAAAoQ,GAAAC,EAAArQ,GAAAkmB,KAAA9V,KAAA0V,IAAAA,EAAA1V,GAAA+V,IAAAA,GAAAve,EAAApJ,EAAAwB,GAAA8lB,EAAA1V,MAAA,SAAA5F,EAAAQ,EAAApF,EAAAuL,GAAA4U,EAAAngB,EAAA,QAAAuL,GAAA4U,EAAAngB,EAAA,QAAAuL,GAAAtT,EAAAmN,KAAArF,QAAA6J,KAAA,CAAAnC,KAAA,SAAArC,GAAAA,EAAArB,MAAAY,eAAAiF,KAAAjF,GAAAS,EAAArB,MAAAa,kBAAAgF,KAAAhF,IAAA3E,QAAA,CAAAW,MAAA,CAAAsf,WAAA,MAAAre,MAAA,CAAAqe,WAAA,OAAA3lB,KAAA,aAAAogB,QAAA,QAAA,CAAAtd,QCkCA,SAAApF,gBAYA,SAAAwoB,EAAAC,EAAAC,EAAAnU,EAAAC,EAAAsG,EAAAC,EAAA4N,GAEA,IAAA/S,EAAAzF,KAAAyF,IACAR,EAAAjF,KAAAiF,KAIAwT,EAAAxT,EAAAQ,EAAArB,EAAAkU,EAAA,GAAA7S,EAAApB,EAAAkU,EAAA,IAGAG,EAAAF,EAAAC,GAAAA,EAFAxT,EAAAQ,EAAAkF,EAAAvG,EAAA,GAAAqB,EAAAmF,EAAAvG,EAAA,KAGAsU,EAAAH,EAAAE,EAQA,MAAA,CANAtU,EAAAsU,GAAAJ,EAAA3N,GACAtG,EAAAqU,GAAAH,EAAA3N,GAEAxG,EAAAuU,GAAAL,EAAA3N,GACAtG,EAAAsU,GAAAJ,EAAA3N,IAKA,IAAAgO,EAAA,GA6CA,SAAAC,EAAA9c,EAAA+c,EAAAlf,EAAAmf,SACA,IAAAD,GAAA,WAAAA,GAAA,cAAAA,KACAA,EAAA,aAEAA,GAAA,UAEA,GAAAF,EAAAnoB,OAAAmoB,EAAApX,KAAA,CAAA5H,EAAA,GAAAA,EAAA,GAAAmf,EAAArb,OAAA9D,EAAA4V,MAAA,IAAAsJ,IACA,oBAAAA,GAAA,GAAAlf,EAAAnJ,QACAsoB,EAAAA,EAAAvJ,MAAA,EAAA,GAAA9R,OAAA9D,GAEAgf,EAAApX,KAAA,CAAA5H,EAAA,GAAAA,EAAA,GAAAmf,EAAAD,KAEAF,EAAApX,KAAA,CAAA5H,EAAA,GAAAA,EAAA,GAAAmf,EAAArb,OAAA9D,EAAA4V,MAAA,IAAAsJ,IAWA,SAAAE,EAAAhc,EAAAjB,EAAAnE,GAEA,IAAA,IAAAA,EAAAqhB,QAAAjhB,KAAA,CAIA,IAGAkhB,EAAAra,EAAAC,EAHAqa,EAAA,GAEAX,EAAA5gB,EAAAqhB,QAAAT,SAAA,GACA5e,EAAAhC,EAAAuL,WAAAvJ,OACAuI,EAAAvK,EAAAuL,WAAAI,UACAtH,EAAAe,EAAAK,gBACA+b,EAAAxf,EAAAnJ,OACA4oB,EAAA,GAKA,GAHAT,EAAA,GAGAQ,EAAAjX,EAAA,EACAtS,EAAAyP,OAAA1H,EAAAsC,MAAAtC,EAAAqhB,aADA,CAKA,IAAAC,EAAA,EAAAA,EAAAE,EAAAF,GAAA/W,EACAtD,EAAAjF,EAAAsf,GACApa,EAAAlF,EAAAsf,EAAA,GACA,MAAAra,GAAAA,EAAAjH,EAAAY,MAAAvH,KAAA4N,EAAAjH,EAAAY,MAAArH,KAAA2N,EAAAlH,EAAA6B,MAAAxI,KAAA6N,EAAAlH,EAAA6B,MAAAtI,KAIAkoB,EAAA7X,KAAA5J,EAAAY,MAAA0F,IAAAW,GAAA5C,EAAAlG,KAAA6B,EAAA6B,MAAAyE,IAAAY,GAAA7C,EAAAjG,KAMA,IAHAojB,EAAAC,EAAA5oB,OAGAyoB,EAAA,EAAAA,EAAAE,EAAA,EAAAF,GAAA,EACAC,EAAAA,EAAAzb,OAAA2a,EAAAhX,MAAA9K,KAAA8iB,EAAA7J,MAAA0J,EAAAA,EAAA,GAAAxb,OAAA,CAAA8a,MASA,IANAzc,EAAA0N,OACA1N,EAAAkP,YAAArT,EAAA9H,MACAiM,EAAAjC,UAAAlC,EAAAqhB,QAAAnf,UAEA+e,EAAA9c,EAAA,YAAAsd,EAAA7J,MAAA,EAAA,GAAA2J,EAAA3J,MAAA,EAAA,IAEA0J,EAAA,EAAAA,EAAAE,EAAA,EAAAF,GAAA,EACAL,EAAA9c,EAAA,SAAAsd,EAAA7J,MAAA0J,EAAAA,EAAA,GAAAC,EAAA3J,MAAA,EAAA0J,EAAA,EAAA,EAAAA,EAAA,IAGAL,EAAA9c,EAAA,YAAAsd,EAAA7J,MAAA4J,EAAA,EAAAA,GAAA,CAAAD,EAAA,EAAAC,EAAA,IAAAD,EAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAA,GAAAC,EAAAD,EAAA,KAEAE,IAtHA1f,EAsHAgf,EAtHA7c,EAsHAA,EAtHA5E,EAsHA6F,EAAA7F,SAAA,GAtHA4C,EAsHAnC,EAAAqhB,QAAAlf,KAtHA+T,EAsHAlW,EAAA9H,OAnHAQ,EAFAT,EAAAC,MAAA+B,MAAAic,IAEA3d,EAAA,iBAAA4J,EAAAA,EAAA,GACAzJ,EAAAK,YACAL,EAAAA,EAAAQ,WAEAiL,EAAA2O,YACA3O,EAAA8O,OAAAjR,EAAA,GAAA,GAAAA,EAAA,GAAA,IAIA,IAXA,IASA2f,EAAA3f,EAAAnJ,OAEAD,EAAA,EAAAA,EAAA+oB,EAAA/oB,IACA,IACAuL,EAAAnC,EAAApJ,GAAA,IAAA6Q,MAAAtF,EAAAnC,EAAApJ,GAAA,IACA,MAAA0d,GACAsL,QAAApU,IAAA8I,GACA,MAIAnS,EAAAgP,SAEAhP,EAAAjC,UAAA,EACAiC,EAAA+O,OAAAlR,EAAA2f,EAAA,GAAA,GAAApiB,GACA4E,EAAA+O,OAAAlR,EAAA,GAAA,GAAAzC,GAEA4E,EAAAyQ,aAEA,IAAAzS,IACAgC,EAAA4N,UAAArZ,EACAyL,EAAAhC,QAyFAgC,EAAA+N,YAGAja,EAAAmN,KAAArF,QAAA6J,KAAA,CACAnC,KAAA,SAAArC,GACAA,EAAArB,MAAAgB,WAAA6E,KAAAwX,IAEAnhB,QAAA,CACAD,OAAA,CACAqhB,QAAA,CACAjhB,MAAA,EACA8B,UAAA,EACA0e,QAAA,GACAze,MAAA,KAIA5H,KAAA,SACAogB,QAAA,UA9KA,CAgLAtd,QClNA,SAAApF,GAAAA,EAAAmN,KAAArF,QAAA6J,KAAA,CAAAnC,KAAA,SAAArC,GAAA,IAAAyc,EAAA,CAAA7R,MAAA,CAAA/I,GAAA,EAAAC,GAAA,GAAAgX,OAAA,CAAAjX,GAAA,EAAAC,GAAA,GAAA9G,MAAA,EAAA4Z,QAAA,GAAA8H,EAAA,GAAAC,EAAA,KAAA,SAAAlV,EAAAyJ,GAAAuL,EAAA7H,SAAAgI,EAAA1L,GAAAlR,EAAAG,iBAAA2S,QAAA,gBAAA,CAAA+J,OAAA,SAAAC,EAAA5L,GAAA,GAAAA,EAAA6L,QAAArkB,SAAAskB,KAAAC,aAAA9V,IAAAzO,SAAAwkB,eAAA,MAAAR,EAAAQ,gBAAAR,EAAAQ,cAAAxkB,SAAAwkB,cAAAxkB,SAAAwkB,cAAA,WAAA,OAAA,SAAA/V,IAAAzO,SAAAykB,QAAA,MAAAT,EAAAS,SAAAT,EAAAS,OAAAzkB,SAAAykB,OAAAzkB,SAAAykB,OAAA,WAAA,OAAA,IAAAC,EAAAX,EAAA7R,MAAAsG,GAAAuL,EAAA7H,QAAA,EAAA+H,EAAA,SAAAzL,GAAAyL,EAAA,UAAAxV,IAAAzO,SAAAwkB,gBAAAxkB,SAAAwkB,cAAAR,EAAAQ,oBAAA/V,IAAAzO,SAAAykB,SAAAzkB,SAAAykB,OAAAT,EAAAS,QAAAV,EAAA7H,QAAA,EAAAgI,EAAA1L,GAAAmM,IAAAC,KAAAtd,EAAAG,iBAAA2S,QAAA,iBAAA,IAAA9S,EAAAG,iBAAA2S,QAAA,gBAAA,CAAA,SAAAjgB,EAAA6F,UAAA6kB,IAAA,UAAAZ,IAAA,SAAAE,IAAA,IAAAQ,IAAA,OAAA,KAAA,IAAAZ,EAAAzhB,KAAA,OAAA,KAAA,IAAAhI,EAAA,GAAAwqB,EAAAf,EAAA7R,MAAA6S,EAAAhB,EAAA3D,OAAA,OAAAjmB,EAAA4N,KAAAT,EAAAQ,UAAA,SAAArL,EAAAyL,GAAA,IAAA8c,EAAA9c,EAAAS,OAAAqc,EAAA9c,EAAAI,IAAAwc,EAAA5c,EAAA/H,YAAA8kB,EAAA/c,EAAAI,IAAAyc,EAAA7c,EAAA/H,YAAA7F,EAAAmC,GAAA,CAAA0a,KAAA7M,KAAA/O,IAAAypB,EAAAC,GAAA7N,GAAA9M,KAAA7O,IAAAupB,EAAAC,OAAA3qB,EAAA,SAAAsqB,IAAA,IAAAtqB,EAAA6pB,IAAA7c,EAAAG,iBAAA2S,QAAA,eAAA,CAAA9f,IAAAA,EAAAwI,OAAAxI,EAAAyJ,OAAAuD,EAAAG,iBAAA2S,QAAA,WAAA,CAAA,CAAA1L,GAAApU,EAAAwI,MAAAqU,KAAAxI,GAAArU,EAAAyJ,MAAAoT,KAAAlC,GAAA3a,EAAAwI,MAAAsU,GAAAlC,GAAA5a,EAAAyJ,MAAAqT,MAAA,SAAA9b,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAD,EAAAA,EAAAE,EAAAD,EAAAC,EAAAD,EAAA,SAAAkpB,EAAAjc,EAAA+P,GAAA,IAAA9d,EAAA4M,EAAAsB,aAAAhB,EAAAN,EAAAG,iBAAAG,SAAArB,EAAAe,EAAAK,gBAAAc,EAAAU,EAAA7N,EAAA,EAAAkd,EAAAM,MAAAlR,EAAAvH,KAAAkG,EAAAlG,KAAAiH,EAAA9F,SAAAiH,EAAAW,EAAA9N,EAAA,EAAAkd,EAAAQ,MAAApR,EAAAtH,IAAAiG,EAAAjG,IAAAgH,EAAA7F,UAAA,KAAA/G,EAAAqpB,UAAAhhB,OAAA0F,EAAAU,EAAAV,GAAAsb,EAAA7R,MAAA,EAAA5K,EAAA9F,SAAA,KAAA9G,EAAAqpB,UAAAhhB,OAAA0F,EAAAW,EAAAX,GAAAsb,EAAA7R,MAAA,EAAA5K,EAAA7F,UAAA,SAAAyiB,EAAAzb,GAAA,MAAAA,EAAAqQ,QAAA4L,EAAAX,EAAA3D,OAAA3X,GAAAkc,KAAAZ,EAAAzhB,MAAA,EAAAgF,EAAAyB,wBAAAmc,GAAA,IAAA,SAAAA,EAAAC,GAAApB,EAAAzhB,OAAAyhB,EAAAzhB,MAAA,EAAAgF,EAAAyB,uBAAAoc,GAAA7d,EAAAG,iBAAA2S,QAAA,iBAAA,KAAA,SAAApD,EAAAC,EAAA1I,GAAA,IAAArG,EAAAQ,EAAA8D,EAAA0K,EAAAC,EAAAC,EAAAxI,EAAAtH,EAAAQ,UAAA,IAAA0E,KAAAoC,EAAA,IAAA1G,EAAA0G,EAAApC,IAAArM,WAAAoO,GAAA0I,EAAAvO,EAAAuO,EAAAvO,EAAA6F,EAAArG,EAAAC,EAAA,SAAA,GAAAD,EAAAC,EAAAO,EAAA6F,EAAA,QAAA,CAAA4I,EAAAF,EAAAvO,GAAAyO,KAAAC,EAAAH,EAAAvO,GAAA0O,GAAA,MAAA,OAAAH,EAAAvO,KAAAR,GAAA,KAAAqG,EAAAjH,EAAAc,WAAAd,EAAAe,YAAA,GAAA8O,EAAAF,EAAA1I,EAAA,KAAA6I,EAAAH,EAAA1I,EAAA,MAAA,MAAA4I,GAAA,MAAAC,GAAAA,EAAAD,IAAAD,EAAAC,EAAAA,EAAAC,EAAAA,EAAAF,GAAA,CAAAC,KAAAA,EAAAC,GAAAA,EAAAlP,KAAAA,GAAA,SAAAyc,IAAA,IAAA5D,EAAAzZ,EAAAsB,aAAAmb,UAAAhD,QAAA,OAAAzW,KAAAqI,IAAAoR,EAAA3D,OAAAjX,EAAA4a,EAAA7R,MAAA/I,IAAA4X,GAAAzW,KAAAqI,IAAAoR,EAAA3D,OAAAhX,EAAA2a,EAAA7R,MAAA9I,IAAA2X,EAAAzZ,EAAA4d,eAAAA,EAAA5d,EAAA8d,aAAA,SAAAnO,EAAAkO,GAAA,IAAAE,EAAA3qB,EAAA4M,EAAAsB,aAAA,KAAAlO,EAAAqpB,UAAAhhB,MAAAghB,EAAA7R,MAAA/I,EAAA,EAAA4a,EAAA3D,OAAAjX,EAAA7B,EAAA9F,UAAA6jB,EAAArO,EAAAC,EAAA,KAAA8M,EAAA7R,MAAA/I,EAAAkc,EAAAnd,KAAAM,IAAA6c,EAAAlO,MAAA4M,EAAA3D,OAAAjX,EAAAkc,EAAAnd,KAAAM,IAAA6c,EAAAjO,KAAA,KAAA1c,EAAAqpB,UAAAhhB,MAAAghB,EAAA7R,MAAA9I,EAAA,EAAA2a,EAAA3D,OAAAhX,EAAA9B,EAAA7F,WAAA4jB,EAAArO,EAAAC,EAAA,KAAA8M,EAAA7R,MAAA9I,EAAAic,EAAAnd,KAAAM,IAAA6c,EAAAlO,MAAA4M,EAAA3D,OAAAhX,EAAAic,EAAAnd,KAAAM,IAAA6c,EAAAjO,KAAA2M,EAAAzhB,MAAA,EAAAgF,EAAAyB,wBAAAoc,GAAAR,KAAAC,KAAAtd,EAAA6c,aAAAA,EAAA7c,EAAArB,MAAAkB,WAAA2E,KAAA,SAAAxE,EAAAlB,GAAA,MAAAkB,EAAAsB,aAAAmb,UAAAhhB,OAAAqD,EAAAiS,UAAAtJ,GAAA3I,EAAAkf,UAAAlB,MAAA9c,EAAArB,MAAAmB,YAAA0E,KAAA,SAAAxE,EAAAjB,GAAA,IAAA+C,EAAAsN,EAAAwD,EAAA6J,EAAAzhB,MAAAqiB,MAAApe,EAAAe,EAAAK,gBAAAjN,EAAA4M,EAAAsB,aAAAvC,EAAA0N,OAAA1N,EAAA2N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KAAA1F,EAAAT,EAAAC,MAAA+B,MAAAzB,EAAAqpB,UAAA3pB,OAAAiM,EAAAkP,YAAA3a,EAAAM,MAAA,IAAA,IAAAE,WAAAiL,EAAAjC,UAAA,EAAAiC,EAAAiP,SAAA5a,EAAAqpB,UAAAwB,MAAAlf,EAAA4N,UAAArZ,EAAAM,MAAA,IAAA,IAAAE,WAAA+N,EAAAmB,KAAA/O,IAAAwoB,EAAA7R,MAAA/I,EAAA4a,EAAA3D,OAAAjX,GAAA,GAAAC,EAAAkB,KAAA/O,IAAAwoB,EAAA7R,MAAA9I,EAAA2a,EAAA3D,OAAAhX,GAAA,GAAAsN,EAAApM,KAAAqI,IAAAoR,EAAA3D,OAAAjX,EAAA4a,EAAA7R,MAAA/I,GAAA,EAAA+Q,EAAA5P,KAAAqI,IAAAoR,EAAA3D,OAAAhX,EAAA2a,EAAA7R,MAAA9I,GAAA,EAAA/C,EAAA8N,SAAAhL,EAAAC,EAAAsN,EAAAwD,GAAA7T,EAAAyR,WAAA3O,EAAAC,EAAAsN,EAAAwD,GAAA7T,EAAA+N,aAAA9M,EAAArB,MAAAoB,SAAAyE,KAAA,SAAAxE,EAAAlB,GAAAA,EAAAkF,OAAA,YAAAyD,GAAA3I,EAAAkF,OAAA,YAAA8Y,GAAAH,GAAA9pB,EAAA6F,UAAAsL,OAAA,UAAA2Y,MAAA9hB,QAAA,CAAA4hB,UAAA,CAAAhhB,KAAA,KAAA3I,MAAA,UAAAmrB,MAAA,QAAAxE,QAAA,IAAAtkB,KAAA,YAAAogB,QAAA,QAAA,CAAAtd,QCgCA,SAAApF,GAuLAA,EAAAmN,KAAArF,QAAA6J,KAAA,CACAnC,KArLA,SAAArC,GACA,IAAAke,GAAA,EAYA,SAAAC,EAAArU,GACA,IAKAjP,EA0BAujB,EA/BAxjB,EAXA,SAAAkP,GAEA,IADA,IAAAuU,EAAAre,EAAAO,UACA/M,EAAA,EAAAA,EAAA6qB,EAAA5qB,OAAAD,IACA,GAAA6qB,EAAA7qB,GAAAsW,OAAAA,EACA,OAAAuU,EAAA7qB,GAGA,OAAA,KAIA8qB,CAAAxU,GACAlP,IAIAC,EAAAmF,EAAAsB,aACAid,GAAA,OAEA,IAAA3jB,EAAAgC,OAAA4hB,UACA5jB,EAAAgC,OAAA4hB,SAAA,QAEA,IAAA5jB,EAAAsC,MAAAshB,UACA5jB,EAAAsC,MAAAshB,SAAA,GAGA5jB,EAAAgC,OAAA5B,OAAAJ,EAAAgC,OAAA4hB,UACA5jB,EAAAgC,OAAA5B,MAAA,EAEAujB,EADA3jB,EAAAgC,OAAA4hB,SAAA,GAGA5jB,EAAAsC,MAAAlC,OAAAJ,EAAAsC,MAAAshB,UACA5jB,EAAAsC,MAAAlC,MAAA,EAEAujB,EADA3jB,EAAAsC,MAAAshB,SAAA,GAIAD,GACA3jB,EAAA6jB,SAAA7jB,EAAA9H,MACA8H,EAAA9H,MAAA,OACA4rB,EAAA7jB,EAAAiP,GAAA,KAEAsU,GAAA,GAEAxjB,EAAAgC,OAAA5B,MAAAJ,EAAAgC,OAAA4hB,UACA5jB,EAAAgC,OAAA5B,MAAA,EAEAojB,IADAxjB,EAAAgC,OAAA4hB,SAAA,KAGA5jB,EAAAsC,MAAAlC,MAAAJ,EAAAsC,MAAAshB,UACA5jB,EAAAsC,MAAAlC,MAAA,EAEAojB,IADAxjB,EAAAsC,MAAAshB,SAAA,IAIAJ,IACAxjB,EAAA9H,MAAA8H,EAAA6jB,SACAC,EAAA7jB,EAAAiP,GAAA,MAKA,SAAA6U,IAEA3e,EAAAC,QAAAD,EAAAO,WAEAP,EAAAE,YACAF,EAAAJ,OAGA,SAAA8e,EAAA7jB,EAAAiP,EAAA2K,GAEA5Z,EAAAE,OAAA6jB,SACA/jB,EAAAE,OAAA6jB,OAAA,IAGA,IAAAzd,EAAAtG,EAAAE,OAAA6jB,OAAAzV,QAAAW,GAEA2K,EACAtT,EAAA,GACAtG,EAAAE,OAAA6jB,OAAApa,KAAAsF,IAGA,EAAA3I,GACAtG,EAAAE,OAAA6jB,OAAAxL,OAAAjS,EAAA,GAKA,SAAA0d,EAAAtqB,GACAA,EAAAuqB,WAAA,WAAAjsB,EAAA0G,MAAA/E,IAAA,SAAA,aACAuqB,WAAA,WAAAlsB,EAAA0G,MAAA/E,IAAA,SAAA,aACAwP,OAAA,SAAAiN,MAAA,WACApe,EAAA0G,MAAAkc,GAAA,mBACA0I,EAAAtrB,EAAA0G,MAAAylB,KAAA,gBAAA3kB,QAEA8jB,EAAAtrB,EAAA0G,MAAA7E,SAAA2F,QAEAskB,MAsEA3e,EAAArB,MAAAW,eAAAkF,KA3CA,SAAAxE,EAAAnF,GACAA,EAAAE,OAAAkkB,WAIApkB,EAAAE,OAAAG,eAAA,SAAA4O,EAAAlP,GACA,MAAA,4BAAAkP,EAAA,cAuCA9J,EAAArB,MAAAiB,KAAA4E,KAAA,SAAAxE,EAAAjB,GACAmgB,IApEArkB,EAAAmF,EAAAsB,aAEA,GAAAzG,EAAAE,OAAAkkB,SAAA,CAIA7c,EAAApC,EAAAG,iBAKA,GAHA0e,EAAAzc,EAAAwJ,KAAA,gBACAiT,EAAAzc,EAAAwJ,KAAA,qBAEAsS,IACAA,GAAA,EACArjB,EAAAE,OAAA6jB,QAAA,CACA,IAAA,IAAAprB,EAAA,EAAAA,EAAAqH,EAAAE,OAAA6jB,OAAAnrB,OAAAD,IACA2qB,EAAAtjB,EAAAE,OAAA6jB,OAAAprB,IAEAmrB,QAsDA3e,EAAArB,MAAAa,kBAAAgF,KAvCA,SAAAxE,EAAAuE,EAAA4B,IAGAtL,EAFAmF,EAAAsB,cAEAvG,OAAAkkB,WAIApkB,EAAAE,OAAA6jB,SACA,EAAA/jB,EAAAE,OAAA6jB,OAAAzV,QAAA5E,EAAAuF,SACAqV,GAAA,EAEA5a,EAAA3H,OAAA5B,OACAuJ,EAAA3H,OAAA5B,MAAA,EAEAmkB,EADA5a,EAAA3H,OAAA4hB,SAAA,GAGAja,EAAArH,MAAAlC,OACAuJ,EAAArH,MAAAlC,MAAA,EAEAmkB,EADA5a,EAAArH,MAAAshB,SAAA,GAIAW,IACA5a,EAAAka,SAAAla,EAAAzR,MACAyR,EAAAzR,MAAA,SAIAyR,EAAA3H,OAAA5B,MAAAuJ,EAAArH,MAAAlC,OACAuJ,EAAA4B,WAAAd,OAAA,CAAA,KAAA,WAeAxK,QAxLA,GAyLA1F,KAAA,eACAogB,QAAA,QA3LA,CA8LAtd,QC9CAA,OANA+H,KAAArF,QAAA6J,KAAA,CACAnC,KA/IA,SAAArC,GA2IAA,EAAArB,MAAAa,kBAAAgF,KAvHA,SAAAxE,EAAAuE,EAAA4B,GACA,GAAA,MAAA5B,EAAA6a,YAAA,CAGAC,EAvBA,SAAA9a,EAAA+a,GAEA,IADA,IACA9rB,EAAA,EAAAA,EAAA8rB,EAAA7rB,SAAAD,EACA,GAAA8rB,EAAA9rB,GAAA+rB,IAAAhb,EAAA6a,YACA,OAAAE,EAAA9rB,GAGA,MAAA,iBAAA+Q,EAAA6a,cACA5rB,EAAA+Q,EAAA6a,aAEA,GAAA5rB,GAAA8rB,EAAA7rB,OAMA,KAHA6rB,EAAA9rB,GAUAgsB,CAAAjb,EAAAvE,EAAAO,WACA,GAAA8e,EAAA,CAeA,IAZA,IAKAI,EAAAC,EAAAC,EAAAC,EAAAzgB,EAKAsU,EAVAtO,EAAAgB,EAAAI,UACA3J,EAAAuJ,EAAAvJ,OACAijB,EAAAR,EAAAlZ,WAAAI,UACAuZ,EAAAT,EAAAlZ,WAAAvJ,OACAmjB,EAAA,GAEAC,EAAAzb,EAAArH,MAAAlC,KACAilB,EAAA,EAAA9a,GAAAgB,EAAAd,OAAA,GAAAvD,EACAoe,EAAAF,GAAAzb,EAAArH,MAAAC,MACAgjB,GAAA,EACA3sB,EAAA,EAAAyR,EAAA,IAEA,CACA,GAAAzR,GAAAoJ,EAAAnJ,OACA,MAIA,GAFAggB,EAAAsM,EAAAtsB,OAEA,MAAAmJ,EAAApJ,GAAA,CAEA,IAAAwB,EAAA,EAAAA,EAAAmQ,IAAAnQ,EACA+qB,EAAAvb,KAAA5H,EAAApJ,EAAAwB,IACAxB,GAAA2R,OAEA,GAAAF,GAAA6a,EAAArsB,OAAA,CAEA,IAAAusB,EACA,IAAAhrB,EAAA,EAAAA,EAAAmQ,IAAAnQ,EACA+qB,EAAAvb,KAAA5H,EAAApJ,EAAAwB,IAEAxB,GAAA2R,OAEA,GAAA,MAAA2a,EAAA7a,GAAA,CAEA,IAAAjQ,EAAA,EAAAA,EAAAmQ,IAAAnQ,EACA+qB,EAAAvb,KAAA,MACA2b,GAAA,EACAlb,GAAA4a,MAEA,CAQA,GANAJ,EAAA7iB,EAAApJ,GACA4sB,EAAAxjB,EAAApJ,EAAA,GACAmsB,EAAAG,EAAA7a,GACA2a,EAAAE,EAAA7a,EAAA,GACA9F,EAAA,EAEAsgB,GAAAE,EAAA,CACA,IAAA3qB,EAAA,EAAAA,EAAAmQ,IAAAnQ,EACA+qB,EAAAvb,KAAA5H,EAAApJ,EAAAwB,IAGAmK,EAAAygB,EAEApsB,GAAA2R,EACAF,GAAA4a,OAEA,GAAAF,EAAAF,EAAA,CAGA,GAAAO,GAAA,EAAAxsB,GAAA,MAAAoJ,EAAApJ,EAAA2R,GAAA,CAIA,IAHAua,EAAAU,GAAAxjB,EAAApJ,EAAA2R,EAAA,GAAAib,IAAAT,EAAAF,IAAA7iB,EAAApJ,EAAA2R,GAAAsa,GACAM,EAAAvb,KAAAmb,GACAI,EAAAvb,KAAAkb,GACA1qB,EAAA,EAAAA,EAAAmQ,IAAAnQ,EACA+qB,EAAAvb,KAAA5H,EAAApJ,EAAAwB,IACAmK,EAAAygB,EAGA3a,GAAA4a,MAEA,CACA,GAAAM,GAAAH,EAAA,CAEAxsB,GAAA2R,EACA,SAGA,IAAAnQ,EAAA,EAAAA,EAAAmQ,IAAAnQ,EACA+qB,EAAAvb,KAAA5H,EAAApJ,EAAAwB,IAIAgrB,GAAA,EAAA/a,GAAA,MAAA6a,EAAA7a,EAAA4a,KACA1gB,EAAAygB,GAAAE,EAAA7a,EAAA4a,EAAA,GAAAD,IAAAH,EAAAE,IAAAG,EAAA7a,EAAA4a,GAAAF,IAIAnsB,GAAA2R,EAGAgb,GAAA,EAEA1M,GAAAsM,EAAAtsB,QAAAwsB,IACAF,EAAAtM,EAAA,GAAAtU,GAIA,GAAA+gB,GAAAzM,GAAAsM,EAAAtsB,QAAA,EAAAggB,GACA,MAAAsM,EAAAtM,IACAsM,EAAAtM,IAAAsM,EAAAtM,EAAAtO,IACA4a,EAAAtM,EAAA,IAAAsM,EAAAtM,EAAAtO,EAAA,GAAA,CACA,IAAAnQ,EAAA,EAAAA,EAAAmQ,IAAAnQ,EACA+qB,EAAAtM,EAAAtO,EAAAnQ,GAAA+qB,EAAAtM,EAAAze,GACA+qB,EAAAtM,EAAA,GAAAsM,EAAAtM,EAAAtO,EAAA,IAIAgB,EAAAvJ,OAAAmjB,OAQAllB,QApJA,CACAD,OAAA,CAAAwkB,YAAA,OAoJAjqB,KAAA,cACAogB,QAAA,QC9KA,SAAApiB,GAAA,SAAA+d,EAAA0B,GAAA,IAAA1N,EAAAD,EAAA1L,KAAAka,EAAAb,EAAA1O,MAAA,GAAA,GAAAuP,EAAAlf,KAAA0Q,EAAA2N,EAAAyN,WAAA5M,EAAAlf,KAAAqe,EAAA0N,UAAA/sB,EAAAgtB,OAAAtb,EAAA2N,EAAA4N,cAAA/M,EAAAjC,MAAAiC,EAAA1a,KAAA6Z,EAAA6N,cAAAhN,EAAA/B,MAAA+B,EAAAza,IAAA4Z,EAAA8N,QAAA9N,EAAApB,MAAAoB,EAAA4N,cAAA5N,EAAA+N,QAAA/N,EAAAlB,MAAAkB,EAAA6N,mBAAA,GAAAltB,EAAAqtB,UAAA,EAAAnN,EAAAsJ,OAAAnK,EAAAmK,OAAAtJ,EAAAsJ,OAAA5pB,EAAAyf,EAAAiO,QAAApL,GAAAhC,EAAAqN,KAAA,OAAA,OAAAlO,EAAAkJ,MAAA,IAAA,YAAA,OAAA3oB,EAAAmP,OAAAmR,EAAAtgB,EAAA8R,GAAA3E,SAAA,CAAA/L,KAAA0Q,EAAA4b,OAAAjO,EAAAiO,OAAArP,MAAAoB,EAAApB,MAAAE,MAAAkB,EAAAlB,QAAAxe,EAAAG,IAAAqF,SAAA,oBAAAwY,EAAAuC,GAAAjgB,EAAAyR,GAAA,GAAA1R,EAAAqtB,SAAA,MAAA,EAAA,KAAArtB,EAAAqtB,UAAA,YAAA,GAAA3tB,EAAA2f,EAAApB,MAAAiC,EAAAjC,OAAAve,EAAA2f,EAAAlB,MAAA+B,EAAA/B,OAAA+B,EAAAsN,SAAA,MAAAnO,EAAAiO,OAAApN,EAAAoN,QAAA,KAAA3b,EAAArR,EAAA+e,EAAA,YAAA3N,MAAA1R,EAAAqtB,SAAA3b,EAAA1R,EAAAgtB,MAAA3N,EAAA0N,UAAAntB,EAAA+R,GAAAD,GAAA,IAAA,IAAA,YAAA,GAAA1R,EAAAqtB,SAAA,CAAA,GAAA1b,EAAArR,EAAA+e,EAAA,OAAA3N,GAAA3R,EAAA0tB,OAAA1tB,EAAA0tB,KAAAC,SAAA,IAAA/b,EAAA5R,EAAA0tB,KAAAhL,QAAApD,KAAA,IAAA1N,EAAA,MAAA0N,EAAAkJ,KAAA,UAAA,IAAA,UAAA5oB,EAAA6Q,OAAArL,SAAA,oBAAAwY,GAAA3d,EAAAqtB,WAAAttB,EAAA0tB,MAAA1tB,EAAA0tB,KAAAhL,QAAApD,GAAA/e,EAAA+e,EAAA,UAAA3N,IAAAzR,EAAAyR,GAAA,GAAA1R,EAAAqtB,SAAArtB,EAAAgtB,MAAA9M,EAAAlf,MAAA,EAAA,OAAA,EAAA,SAAAV,EAAAX,EAAAI,EAAAC,GAAAL,EAAA4oB,KAAAxoB,EAAA4d,EAAA/d,EAAAke,MAAA6P,SAAA7M,KAAA9gB,EAAAL,GAAA,OAAA,IAAAge,IAAAA,GAAAhe,EAAAiuB,QAAA,SAAAluB,EAAAE,GAAA,OAAA6P,KAAAyF,IAAAtV,EAAA,GAAA,SAAAyf,IAAA,OAAA,IAAArf,EAAAqtB,SAAA,SAAAptB,EAAAL,EAAAD,GAAAC,IAAAA,EAAAiuB,aAAAluB,EAAA,MAAA,KAAAC,EAAA+pB,cAAA,WAAA,OAAAhqB,GAAAC,EAAA2P,QAAA3P,EAAA2P,MAAAue,cAAAnuB,EAAA,GAAA,SAAAC,EAAA2gB,GAAAwN,KAAA,SAAAnuB,EAAAD,EAAAI,GAAA,OAAAJ,GAAAqG,KAAAyX,KAAA,YAAA7d,GAAAG,GAAAiG,KAAAyX,KAAA,UAAA1d,GAAAH,EAAAoG,KAAAyX,KAAA,OAAA9d,GAAAC,GAAAoG,KAAAuZ,QAAA,SAAA,IAAA5f,EAAAC,EAAAke,MAAA/d,EAAAJ,EAAAyiB,QAAApiB,EAAAD,EAAAguB,KAAA,CAAAR,IAAA,SAAAC,SAAA,EAAAhE,MAAA,EAAA6D,UAAA,EAAAhL,MAAA,SAAAtiB,IAAAA,EAAAH,EAAAmP,OAAA,CAAAye,SAAAxtB,EAAAwtB,SAAAhE,MAAAxpB,EAAAwpB,MAAA+D,IAAAvtB,EAAAutB,KAAAxtB,GAAA,KAAAytB,SAAA9tB,EAAAK,EAAAytB,UAAA7tB,EAAAG,IAAAkG,KAAA,YAAA2X,EAAA5d,GAAAiG,KAAAgoB,aAAAhoB,KAAAgoB,YAAA,cAAA3O,IAAAiD,SAAA,WAAA3iB,EAAA6Q,OAAAxK,KAAA,YAAA2X,GAAA3X,OAAAhG,EAAAqtB,WAAArtB,EAAAqtB,SAAArtB,EAAAgtB,OAAA,GAAA/sB,EAAA+F,MAAA,GAAAA,KAAAioB,aAAAjoB,KAAAioB,YAAA,cAAA5O,KAAAtf,EAAAmuB,UAAAnuB,EAAAouB,QAAA,CAAA9L,MAAA,aAAAC,SAAA,cAAA,CAAA5d,QAAA,SAAA1E,GAAA,SAAA2d,EAAA/d,GAAA,IAAAD,EAAAC,GAAAgG,OAAAkY,MAAA/d,EAAA,GAAAkf,MAAA6B,KAAA0B,UAAA,GAAAliB,EAAA,EAAAqd,EAAA,EAAAje,EAAA,EAAAE,EAAAI,EAAA8d,MAAAsQ,IAAAzuB,GAAA,OAAAC,EAAA2oB,KAAA,aAAA5oB,EAAA0uB,aAAA/tB,EAAAX,EAAA0uB,WAAA,KAAA3uB,EAAAY,EAAAX,EAAA2uB,QAAA3uB,EAAA2uB,OAAA,EAAAhuB,OAAA,IAAAX,EAAA0N,MAAA1N,EAAA0N,OAAA1N,EAAA4uB,kBAAA7uB,EAAA,EAAAie,GAAA,EAAArd,QAAA,IAAAX,EAAA6uB,cAAA9uB,EAAAC,EAAA6uB,YAAA,UAAA,IAAA7uB,EAAA8uB,cAAA9Q,GAAA,EAAAhe,EAAA8uB,YAAA,KAAA1uB,EAAA2uB,QAAA9uB,EAAAU,EAAAqd,EAAAje,IAAAM,EAAA8d,MAAA6P,UAAA3tB,EAAA8d,MAAA6Q,QAAA7d,MAAA9K,KAAAjG,GAAA,IAAAA,EAAA,CAAA,iBAAA,cAAA,GAAAC,EAAA8d,MAAA8Q,SAAA,IAAA,IAAAvP,EAAAtf,EAAAG,OAAAmf,GAAArf,EAAA8d,MAAA8Q,SAAA7uB,IAAAsf,IAAArf,EAAA8d,MAAA+Q,WAAA7uB,EAAA8d,MAAAsE,QAAA0M,WAAA,CAAAzM,MAAA,WAAA,GAAArc,KAAA+oB,iBAAA,IAAA,IAAAnvB,EAAAG,EAAAG,OAAAN,GAAAoG,KAAA+oB,iBAAAhvB,IAAAH,GAAA+d,GAAA,QAAA3X,KAAAgpB,aAAArR,GAAA2E,SAAA,WAAA,GAAAtc,KAAAipB,oBAAA,IAAA,IAAArvB,EAAAG,EAAAG,OAAAN,GAAAoG,KAAAipB,oBAAAlvB,IAAAH,GAAA+d,GAAA,QAAA3X,KAAAgpB,aAAA,OAAAhvB,EAAAugB,GAAAxR,OAAA,CAAA+f,WAAA,SAAAlvB,GAAA,OAAAA,EAAAoG,KAAAyX,KAAA,aAAA7d,GAAAoG,KAAAuZ,QAAA,eAAA2P,aAAA,SAAAtvB,GAAA,OAAAoG,KAAAyK,OAAA,aAAA7Q,MAAA,CAAA8E,QAAA,SAAApF,GAAAA,EAAAmN,KAAArF,QAAA6J,KAAA,CAAAnC,KAAA,SAAArC,GAAA,SAAA0iB,EAAAxR,EAAAyR,GAAA,IAAArvB,EAAA0M,EAAAM,SAAAhN,EAAAyF,KAAAmY,EAAAM,MAAAle,EAAAyF,KAAAzF,EAAA0F,IAAAkY,EAAAQ,MAAApe,EAAA0F,IAAA2pB,EAAA3iB,EAAA2iB,QAAA,CAAAC,OAAAtvB,IAAA0M,EAAA6iB,KAAA,CAAAD,OAAAtvB,IAAA,SAAAwvB,EAAA5R,EAAA5L,GAAA,OAAA4L,EAAA6R,iBAAAL,EAAAxR,EAAA5L,EAAA,IAAA,EAAA,IAAA0d,EAAA,UAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,KAAA,SAAAC,EAAAlS,GAAA,GAAA,GAAAA,EAAA6L,MAAA,OAAA,EAAA,IAAAzpB,EAAA0M,EAAAG,iBAAA3L,IAAA,UAAAlB,IAAA0vB,EAAA1vB,GAAA0M,EAAAG,iBAAA3L,IAAA,SAAAwL,EAAAsB,aAAA+hB,IAAAC,QAAAL,EAAA/R,EAAAM,MAAA0R,EAAAhS,EAAAQ,MAAA,SAAA6R,EAAArS,GAAA,IAAAsS,EAAAxjB,EAAAsB,aAAA+hB,IAAAG,WAAAL,GAAAK,IAAAL,EAAApQ,WAAA,WAAA/S,EAAAqjB,IAAA,CAAAtqB,KAAAkqB,EAAA/R,EAAAM,MAAAxY,IAAAkqB,EAAAhS,EAAAQ,QAAAuR,EAAA/R,EAAAM,MAAA0R,EAAAhS,EAAAQ,MAAAyR,EAAA,MAAA,EAAAK,EAAA,MAAA,SAAAC,EAAAvS,GAAAiS,IAAA3b,aAAA2b,GAAAA,EAAA,MAAAnjB,EAAAG,iBAAA3L,IAAA,SAAAwuB,GAAAhjB,EAAAqjB,IAAA,CAAAtqB,KAAAkqB,EAAA/R,EAAAM,MAAAxY,IAAAkqB,EAAAhS,EAAAQ,QAAA1R,EAAA2iB,QAAA,SAAAve,IAAAA,EAAAA,GAAA,IAAAsf,SAAAtf,EAAAsf,OAAA1jB,EAAAsB,aAAAuhB,KAAAa,QAAAtf,EAAAsf,OAAA,EAAAtf,EAAAsf,OAAA1jB,EAAA6iB,KAAAze,IAAApE,EAAA6iB,KAAA,SAAAze,GAAA,IAAA9Q,GAAA8Q,EAAAA,GAAA,IAAAwe,OAAAc,EAAAtf,EAAAsf,QAAA1jB,EAAAsB,aAAAuhB,KAAAa,OAAAtU,EAAApP,EAAA9F,QAAA0Y,EAAA5S,EAAA7F,SAAAwpB,GAAArwB,EAAAA,GAAA,CAAAyF,KAAAqW,EAAA,EAAApW,IAAA4Z,EAAA,IAAA7Z,KAAAqW,EAAAwU,EAAAtwB,EAAA0F,IAAA4Z,EAAAiR,EAAA,CAAAhiB,EAAA,CAAA5N,IAAAX,EAAAyF,KAAA4qB,EAAAvU,EAAAsU,EAAAvvB,IAAAb,EAAAyF,MAAA,EAAA4qB,GAAAvU,EAAAsU,GAAA5hB,EAAA,CAAA7N,IAAAX,EAAA0F,IAAA4qB,EAAAhR,EAAA8Q,EAAAvvB,IAAAb,EAAA0F,KAAA,EAAA4qB,GAAAhR,EAAA8Q,IAAA7wB,EAAA4N,KAAAT,EAAAQ,UAAA,SAAAG,EAAAC,GAAA,IAAA2B,EAAA3B,EAAA/F,QAAA5G,EAAA4vB,EAAAjjB,EAAA/H,WAAA5E,IAAAE,EAAA0vB,EAAAjjB,EAAA/H,WAAA1E,IAAA2vB,EAAAvhB,EAAAwhB,UAAAC,EAAAzhB,EAAA0hB,UAAA,IAAAH,IAAA7vB,EAAA2M,EAAAI,IAAA/M,IAAAE,EAAAyM,EAAAI,IAAA7M,IAAAF,IAAA2b,EAAA3b,EAAAA,EAAAE,EAAAA,EAAAyb,GAAAoU,IAAA,MAAAA,EAAA,IAAA/vB,EAAA+vB,EAAA,KAAA/vB,EAAA+vB,EAAA,IAAA,MAAAA,EAAA,IAAA7vB,EAAA6vB,EAAA,KAAA7vB,EAAA6vB,EAAA,KAAAjG,EAAA5pB,EAAAF,EAAA6vB,IAAA,MAAAA,EAAA,IAAA/F,EAAA+F,EAAA,IAAA,EAAAJ,GAAA,MAAAI,EAAA,IAAA/F,EAAA+F,EAAA,IAAAJ,EAAA,KAAAnhB,EAAAtO,IAAAA,EAAAsO,EAAApO,IAAAA,MAAA6L,EAAAE,YAAAF,EAAAJ,OAAAwE,EAAAyZ,cAAA7d,EAAAG,iBAAA2S,QAAA,WAAA,CAAA9S,EAAAoE,KAAApE,EAAAqjB,IAAA,SAAAjf,GAAA,IAAAkB,EAAA,CAAAzD,GAAAuC,EAAArL,KAAA+I,GAAAsC,EAAApL,KAAA0N,MAAApB,EAAAzD,KAAAyD,EAAAzD,EAAA,GAAA6E,MAAApB,EAAAxD,KAAAwD,EAAAxD,EAAA,GAAAjP,EAAA4N,KAAAT,EAAAQ,UAAA,SAAAG,EAAAC,GAAA,IAAA2B,EAAA3B,EAAA/F,QAAAtH,EAAA+R,EAAA1E,EAAA/H,WAAA5E,EAAA2M,EAAAI,IAAAJ,EAAAM,IAAAN,EAAA3M,KAAAV,GAAAY,EAAAyM,EAAAI,IAAAJ,EAAAM,IAAAN,EAAAzM,KAAAZ,GAAAywB,EAAAzhB,EAAA0hB,UAAA,IAAAD,IAAAA,IAAA,MAAAA,EAAA,IAAAA,EAAA,GAAA/vB,IAAAA,GAAAV,EAAAywB,EAAA,GAAA/vB,EAAAE,GAAAZ,GAAA,MAAAywB,EAAA,IAAAA,EAAA,GAAA7vB,IAAAF,GAAAV,EAAAywB,EAAA,GAAA7vB,EAAAA,GAAAZ,IAAAgP,EAAAtO,IAAAA,EAAAsO,EAAApO,IAAAA,KAAA6L,EAAAE,YAAAF,EAAAJ,OAAAwE,EAAAyZ,cAAA7d,EAAAG,iBAAA2S,QAAA,UAAA,CAAA9S,EAAAoE,KAAApE,EAAArB,MAAAkB,WAAA2E,KAAA,SAAAxE,EAAAlB,IAAA1L,EAAA4M,EAAAsB,cAAAuhB,KAAAqB,cAAAplB,EAAA1L,EAAAyvB,KAAA/P,SAAA4P,GAAA5jB,EAAAujB,WAAAS,IAAA1vB,EAAAiwB,IAAAa,cAAAplB,EAAAkS,KAAA,YAAA,CAAA+P,SAAA,IAAAqC,GAAAtkB,EAAAkS,KAAA,OAAAuS,GAAAzkB,EAAAkS,KAAA,UAAAyS,MAAAzjB,EAAArB,MAAAoB,SAAAyE,KAAA,SAAAxE,EAAAlB,GAAAA,EAAAkF,OAAAhE,EAAAsB,aAAAuhB,KAAA/P,QAAA4P,GAAA5jB,EAAAkF,OAAA,aAAA8e,GAAAhkB,EAAAkF,OAAA,YAAAof,GAAAtkB,EAAAkF,OAAA,OAAAuf,GAAAzkB,EAAAkF,OAAA,UAAAyf,GAAAN,GAAA3b,aAAA2b,MAAAtoB,QAAA,CAAAW,MAAA,CAAAuoB,UAAA,KAAAE,SAAA,MAAApB,KAAA,CAAAqB,aAAA,EAAApR,QAAA,WAAA4Q,OAAA,KAAAL,IAAA,CAAAa,aAAA,EAAAZ,OAAA,OAAAE,UAAA,KAAAruB,KAAA,WAAAogB,QAAA,QAAA,CAAAtd,QC6NAA,OAPA+H,KAAArF,QAAA6J,KAAA,CACAnC,KAvLA,SAAArC,GACAA,EAAArB,MAAAgB,WAAA6E,KAAA,SAAAxE,EAAAjB,EAAAnE,GACA,IAGA0S,EACAC,EAoJAN,EAQAC,EA1JA,SAAAiX,EAAA/W,EAAAC,GAEA,IAMA+W,EANAxnB,EAAAhC,EAAAuL,WAAAvJ,OACAuI,EAAAvK,EAAAuL,WAAAI,UACAiH,EAAA,KACAC,EAAA,KACA4W,EAAA,EACAC,GAAA,EAOAC,EAHA3pB,EAAA4pB,OAAAC,WAAA,IACAL,EAAAxpB,EAAA4pB,OAAAC,WAAA,GACA7pB,EAAA4pB,OAAAC,WAAA,IAGAL,GAGAA,EAAAxpB,EAAA4pB,OAAAC,WAGA1lB,EAAA2O,YAEA,IAAA,IAgEAgX,EAhEAlxB,EAAA2R,EAAA3R,EAAAoJ,EAAAnJ,OAAAD,GAAA2R,EAAA,CAEA,IAAAiC,EAAAxK,EAAApJ,EAAA2R,GACAkC,EAAAzK,EAAApJ,EAAA2R,EAAA,GACAwI,EAAA/Q,EAAApJ,GACAoa,EAAAhR,EAAApJ,EAAA,GAEA,GAAA,MAAA4T,GAAA,MAAAuG,EAAA,CAGA,GAAAtG,GAAAuG,GAAAvG,EAAAkG,EAAAtZ,IAAA,CACA,GAAA2Z,EAAAL,EAAAtZ,IAAA,SAEAmT,GAAAmG,EAAAtZ,IAAAoT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EACAC,EAAAkG,EAAAtZ,SACA,GAAA2Z,GAAAvG,GAAAuG,EAAAL,EAAAtZ,IAAA,CACA,GAAAoT,EAAAkG,EAAAtZ,IAAA,SACA0Z,GAAAJ,EAAAtZ,IAAAoT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EACAwG,EAAAL,EAAAtZ,IAIA,GAAA2Z,GAAAvG,GAAAA,EAAAkG,EAAApZ,IAAA,CACA,GAAAyZ,EAAAL,EAAApZ,IAAA,SACAiT,GAAAmG,EAAApZ,IAAAkT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EACAC,EAAAkG,EAAApZ,SACA,GAAAkT,GAAAuG,GAAAA,EAAAL,EAAApZ,IAAA,CACA,GAAAkT,EAAAkG,EAAApZ,IAAA,SACAwZ,GAAAJ,EAAApZ,IAAAkT,IAAAuG,EAAAvG,IAAAsG,EAAAvG,GAAAA,EACAwG,EAAAL,EAAApZ,IAIA,GAAAiT,GAAAuG,GAAAvG,EAAAkG,EAAArZ,IAAA,CACA,GAAA0Z,EAAAL,EAAArZ,IAAA,SACAoT,GAAAiG,EAAArZ,IAAAmT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EACAD,EAAAkG,EAAArZ,SACA,GAAA0Z,GAAAvG,GAAAuG,EAAAL,EAAArZ,IAAA,CACA,GAAAmT,EAAAkG,EAAArZ,IAAA,SACA2Z,GAAAN,EAAArZ,IAAAmT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EACAsG,EAAAL,EAAArZ,IAIA,GAAA0Z,GAAAvG,GAAAA,EAAAkG,EAAAnZ,IAAA,CACA,GAAAwZ,EAAAL,EAAAnZ,IAAA,SACAkT,GAAAiG,EAAAnZ,IAAAiT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EACAD,EAAAkG,EAAAnZ,SACA,GAAAiT,GAAAuG,GAAAA,EAAAL,EAAAnZ,IAAA,CACA,GAAAiT,EAAAkG,EAAAnZ,IAAA,SACAyZ,GAAAN,EAAAnZ,IAAAiT,IAAAuG,EAAAvG,IAAAwG,EAAAvG,GAAAA,EACAsG,EAAAL,EAAAnZ,IAGAiT,GAAAoG,GAAAnG,GAAAoG,GACA1O,EAAA8O,OAAAP,EAAApM,IAAAkG,GAAAgG,EAAAG,EAAArM,IAAAmG,GAAAgG,GAiCA,IA9BA,IAIAsX,EAJAC,EAAAtX,EAAApM,IAAAkG,GAAAgG,EACAyX,EAAAtX,EAAArM,IAAAmG,GAAAgG,EACAyX,EAAAxX,EAAApM,IAAAyM,GAAAP,EACA2X,EAAAxX,EAAArM,IAAA0M,GAAAP,EAGAqX,EA2BA,EAAAL,EAAAA,EACAC,EAAAF,EAAAG,EA1BAjxB,OAAAA,EA4BA,IAJAqxB,GAxBArxB,EAAA0P,KAAAiF,KAAAjF,KAAAyF,IAAAqc,EAAAF,EAAA,GAAA5hB,KAAAyF,IAAAsc,EAAAF,EAAA,MAEAH,EACA,CACAM,OAAAF,EAAAF,EACAK,OAAAF,EAAAF,EACA9D,SAAAztB,EACA4xB,UAAAR,EAAApxB,IAIA6xB,EAAAN,EAAAE,EAAA,GAAA,EACA,CACAC,QAHAJ,EAAAE,EAAA,GAAA,GAGA9hB,KAAAiF,KAAAjF,KAAAyF,IAAAic,EAAA,IAAA,EAAA1hB,KAAAyF,KAAAsc,EAAAF,IAAAC,EAAAF,GAAA,KACAK,OAAAE,EAAAniB,KAAAiF,KAAAjF,KAAAyF,IAAAic,EAAA,GAAA1hB,KAAAyF,IAAAic,EAAA,IAAA,EAAA1hB,KAAAyF,KAAAsc,EAAAF,IAAAC,EAAAF,GAAA,KACA7D,SAAA2D,EACAQ,UAAA,KAYAF,QAAA,GAAAL,EAAAM,SACAX,EACAvlB,EAAA+O,OAAA8W,EAAAD,EAAAK,OAAAH,EAAAF,EAAAM,QAEAlmB,EAAA8O,OAAA+W,EAAAD,EAAAK,OAAAH,EAAAF,EAAAM,SAIAX,GAAAA,EACAD,EAAAM,EAAAO,UACAN,GAAAD,EAAAK,OACAH,GAAAF,EAAAM,OAEA,EAAAN,EAAA5D,WAEAvT,EAAAG,EACAF,EAAAG,GAGA7O,EAAAgP,SA/IAnT,EAAA4pB,OAAAxpB,OAEAiE,EAAAe,EAAAK,gBACAiN,EAAA1S,EAAAY,MACA+R,EAAA3S,EAAA6B,MA+IAsC,EAAA0N,OACA1N,EAAA2N,UAAAzN,EAAAlG,KAAAkG,EAAAjG,KACA+F,EAAAiP,SAAA,QAEA1D,EAAA1P,EAAA4pB,OAAA1nB,UACAmQ,EAAArS,EAAA6C,WAGA,EAAA6M,GAAA,EAAA2C,IAEAlO,EAAAjC,UAAAmQ,EACAlO,EAAAkP,YAAA,kBAEAf,EAAAlK,KAAAkL,GAAA,GACAiW,EAAAnhB,KAAAmL,IAAAjB,IAAA5C,EAAA,EAAA2C,EAAA,GAAAjK,KAAAoL,IAAAlB,IAAA5C,EAAA,EAAA2C,EAAA,IACAlO,EAAAjC,UAAAmQ,EAAA,EACAkX,EAAAnhB,KAAAmL,IAAAjB,IAAA5C,EAAA,EAAA2C,EAAA,GAAAjK,KAAAoL,IAAAlB,IAAA5C,EAAA,EAAA2C,EAAA,KAGAlO,EAAAjC,UAAAwN,EACAvL,EAAAkP,YAAArT,EAAA9H,MAEA,EAAAwX,GACA6Z,EAAA,EAAA,GAGAplB,EAAA+N,cASAjS,QAjMA,CACAD,OAAA,CACA4pB,OAAA,CACAxpB,MAAA,EACA8B,UAAA,EACA2nB,WAAA,MA6LAtvB,KAAA,SACAogB,QAAA,QCrMA,SAAA1iB,gBAmJAA,EAAAmN,KAAArF,QAAA6J,KAAA,CACAnC,KAjIA,SAAArC,GACA,IACAolB,EAKAC,EANAC,GAAA,EAEAC,EAAAvlB,EACAkE,EAAA,KACAshB,EAAA,KAqCA,SAAAC,IACA,IAAAC,EAAAC,EAAA,IAAAtP,KACA,GAAAnS,EAAA0hB,WAAAJ,EAAA5qB,OAAAirB,KAAA1oB,MAAA,CACA+G,EAAA0hB,aACA,IAAA,IAAA3gB,EAAA,EAAAA,EAAAf,EAAAzQ,OAAAwR,IACA,IAAA,IAAAhS,EAAA,EAAAA,EAAAiR,EAAAe,GAAA4gB,KAAAC,SAAAryB,OAAAR,IAEA,GAAA,mBADAyyB,EAAAxhB,EAAAe,GAAA4gB,KAAAC,SAAA7yB,IACA8yB,SACAL,EAAAK,SAAA7hB,EAAAe,GAAAf,EAAA0hB,WAAAF,QAGA,GAAA,WAAAA,EAAAK,UAqBA,GACAvyB,OAAAA,EADA0Q,EAAA0hB,YAAA1hB,EAAAe,GAAA4gB,KAAA1oB,MACA,IAAA,IAAA3J,EAAA,EAAAA,EAAA0Q,EAAAe,GAAAf,KAAAzQ,OAAAD,IACA,OAAAkyB,EAAAM,cACA9hB,EAAAe,GAAAf,KAAA1Q,GAAAkyB,EAAAL,YAAAnhB,EAAAe,GAAAghB,QAAAzyB,GAAAkyB,EAAAL,YAAAnhB,EAAAe,GAAA4gB,KAAA1oB,MAAA+G,EAAA0hB,WAEA,SAAAF,EAAAM,gBACA9hB,EAAAe,GAAAf,KAAA1Q,GAAAkyB,EAAAL,YAAAnhB,EAAAe,GAAAghB,QAAAzyB,GAAAkyB,EAAAL,aAAAnhB,EAAAe,GAAAxI,MAAAtI,IAAA+P,EAAAe,GAAAghB,QAAAzyB,GAAAkyB,EAAAL,aAAAnhB,EAAAe,GAAA4gB,KAAA1oB,OAAA+G,EAAAe,GAAA4gB,KAAA1oB,MAAA+G,EAAA0hB,kBA1BA,GAAA,YAAAF,EAAAK,UAgCA,GACAvyB,OAAAA,EADA0Q,EAAA0hB,YAAA1hB,EAAAe,GAAA4gB,KAAA1oB,MACA,IAAA,IAAA3J,EAAA,EAAAA,EAAA0Q,EAAAe,GAAAf,KAAAzQ,OAAAD,IACA,OAAAkyB,EAAAM,cACA9hB,EAAAe,GAAAf,KAAA1Q,GAAAkyB,EAAAL,YAAAriB,KAAA/O,IAAAiQ,EAAAe,GAAAghB,QAAAzyB,GAAAkyB,EAAAL,YAAAnhB,EAAAe,GAAAxI,MAAAtI,IAAA+P,EAAAe,GAAA4gB,KAAA1oB,MAAA+G,EAAA0hB,YAEA,SAAAF,EAAAM,gBACA9hB,EAAAe,GAAAf,KAAA1Q,GAAAkyB,EAAAL,YAAAriB,KAAA7O,IAAA+P,EAAAe,GAAAghB,QAAAzyB,GAAAkyB,EAAAL,YAAAnhB,EAAAe,GAAAxI,MAAAtI,IAAA+P,EAAAe,GAAA4gB,KAAA1oB,OAAA+G,EAAAe,GAAA4gB,KAAA1oB,MAAA+G,EAAA0hB,mBArCA,GAAA,UAAAF,EAAAK,UA2CA,GACAvyB,OAAAA,EADA0Q,EAAA0hB,YAAA1hB,EAAAe,GAAA4gB,KAAA1oB,MACA,IAAA,IAAA3J,EAAA,EAAAA,EAAA0Q,EAAAe,GAAAf,KAAAzQ,OAAAD,IACA0Q,EAAAe,GAAAf,KAAA1Q,GAAAkyB,EAAAL,YAAAnhB,EAAAe,GAAAghB,QAAAzyB,GAAAkyB,EAAAL,iBAjCA,GACA7xB,OAAAA,EADA,IAAA0Q,EAAA0hB,WACA,IAAA,IAAApyB,EAAA,EAAAA,EAAA0Q,EAAAe,GAAAf,KAAAzQ,OAAAD,IACA0Q,EAAAe,GAAAf,KAAA1Q,GAAA6xB,GAAAnhB,EAAAe,GAAAghB,QAAAzyB,GAAAkyB,EAAAL,YATAE,EAAAtlB,QAAAiE,GACAqhB,EAAA3lB,OACAsmB,EAAA,IAAA7P,KAAAsP,EACAP,EAAAjsB,OAAA4Z,WAAA0S,EAAAziB,KAAA7O,IAAA,EAAAqxB,EAAA5qB,OAAAirB,KAAAM,UAAAD,SAEA/sB,OAAAqO,aAAA4d,GAAAA,EAAA,KAwCA,SAAAzO,IACAyO,IAAAjsB,OAAAqO,aAAA4d,GAAAA,EAAA,MAlGAplB,EAAArB,MAAAkB,WAAA2E,KAoBA,SAAAxE,EAAAlB,GAEA,IAAA,KADA0mB,EAAAxlB,EAAAsB,cACA1G,OAAAirB,KAAAjR,OAAA,CAEA,IADA,IAAArhB,EAAAyM,EAAAO,UACA0E,EAAA,EAAAA,EAAAf,EAAAzQ,OAAAwR,IACAugB,EAAA5qB,OAAAirB,KAAA1oB,MAAA6F,KAAA7O,IAAAqxB,EAAA5qB,OAAAirB,KAAA1oB,MAAA5J,EAAA0R,GAAA4gB,KAAA1oB,OAEA,IAAAqoB,EAAA5qB,OAAAirB,KAAAM,WAAAX,EAAA5qB,OAAAirB,KAAAM,YACAV,IA2EA,SAAAW,GAEA,IADA,IAAAzrB,EAAA9H,EAAAmN,KAAArF,QACAnH,EAAA,EAAA4oB,EAAAzhB,EAAAlH,OAAAD,EAAA4oB,EAAA5oB,IAEA,GADAmH,EAAAnH,GACA2B,OAAAixB,EACA,OAAA,EAGA,OAAA,EAlFAC,CAAA,WACArmB,EAAAG,iBAAA6Q,KAAA,SAAA2F,MA7BA3W,EAAArB,MAAAgB,WAAA6E,KAEA,SAAAxE,EAAAsmB,EAAA1rB,GAGA,GAFA4qB,EAAAxlB,EAAAsB,aACA+jB,EAAAG,EAAA5qB,OAAAirB,KAAAR,YACA,IAAAG,EAAA5qB,OAAAirB,KAAAjR,SACA,IAAA0Q,EAAA,EACAphB,EAAAlE,EAAAO,WACAqlB,WAAA,EAEA,IAAA,IAAA3gB,EADAf,EAAAqiB,aAAA,EACAthB,EAAAf,EAAAzQ,OAAAwR,IAAA,CACAf,EAAAe,GAAAghB,QAqGA,SAAA5xB,EAAA2S,GACA,GAAA,OAAAA,GAAA,iBAAA,EAAA,OAAAA,EACA,IAAAwf,EAAA,IAAAxf,EAAAyf,YACA,IAAA,IAAArlB,KAAA4F,EAAAwf,EAAAplB,GAAA/M,EAAA2S,EAAA5F,IACA,OAAAolB,EAzGAnyB,CAAA6P,EAAAe,GAAAf,MACA,IAAA,IAAA1Q,EAAA,EAAAA,EAAA0Q,EAAAe,GAAAf,KAAAzQ,OAAAD,IAAA0Q,EAAAe,GAAAf,KAAA1Q,GAAA6xB,GAAA,EAEArlB,EAAAC,QAAAiE,GACAohB,GAAA,KAdAtlB,EAAArB,MAAAoB,SAAAyE,KAkGA,SAAAxE,EAAAlB,GACAkB,EAAAG,iBAAA6D,OAAA,SAAA2S,MAqBA9b,QAlJA,CACAD,OAAA,CACAirB,KAAA,CACAjR,QAAA,EACAuR,UAAA,GACAhpB,MAAA,IACA2oB,SAAA,CACA,CACAT,WAAA,EACAU,SAAA,SACAC,cAAA,UAyIA7wB,KApJA,OAqJAogB,QArJA,QAFA,CAyJAtd,QCpLA,SAAAyuB,GACA,GAAA,mBAAAC,SAAA,iBAAAC,SAAA,iBAAAC,OAAA,CACA,IAAAC,EAAAH,QAAA,UACAE,OAAAD,QAAAF,EAAAI,QACA,GAAA,mBAAAC,QAAAA,OAAAC,IACAD,OAAA,CAAA,UACAL,OAEA,CACA,IAAAO,EACA,IACAA,GAAA,EAAAC,MAAA,QACA,MAAAhW,GACA+V,EAAA9tB,OAEA8tB,EAAAP,QAAAA,EAAAzuB,SAfA,CAiBA,SAAApF,GACA,SAAA6zB,EAAAS,EAAAC,GACA,IAAApgB,EAAA,GACAqgB,EAAA,CAAAC,MAAA,EAAAC,OAAA,EAAAC,KAAA,MAuFA,OApFAL,EAAAvkB,QAAA,MAAA,KAAA6kB,MAAA,KAAAC,QAAA,SAAA1iB,GACA,IAEAI,EAFAuiB,EAAA3iB,EAAAyiB,MAAA,KACArmB,EAAAwmB,mBAAAD,EAAA,IAEAE,EAAA7gB,EACAxT,EAAA,EAIAs0B,EAAA1mB,EAAAqmB,MAAA,MACAM,EAAAD,EAAAr0B,OAAA,EAYAs0B,EARA,KAAAre,KAAAoe,EAAA,KAAA,MAAApe,KAAAoe,EAAAC,KAEAD,EAAAC,GAAAD,EAAAC,GAAAnlB,QAAA,MAAA,KAIAklB,EAAAA,EAAAE,QAAAP,MAAA,KAAA/mB,OAAAonB,IAEAr0B,OAAA,GAGA,EAIA,GAAA,IAAAk0B,EAAAl0B,OAWA,GAVA2R,EAAAwiB,mBAAAD,EAAA,IAGAP,IACAhiB,EAAAA,IAAAsB,MAAAtB,KAAAA,EAAA,KAAAA,GAAAA,EACA,cAAAA,OAAA+B,OACAA,IAAAkgB,EAAAjiB,GAAAiiB,EAAAjiB,GACAA,GAGA2iB,EAUA,KAAAv0B,GAAAu0B,EAAAv0B,IAEAq0B,EAAAA,EADAzmB,EAAA,KAAA0mB,EAAAt0B,GAAAq0B,EAAAp0B,OAAAq0B,EAAAt0B,IACAA,EAAAu0B,EACAF,EAAAzmB,KAAA0mB,EAAAt0B,EAAA,IAAAkT,MAAAohB,EAAAt0B,EAAA,IAAA,GAAA,IACA4R,MAOA,mBAAAjN,OAAAC,UAAAtE,SAAAugB,KAAArN,EAAA5F,IAEA4F,EAAA5F,GAAAoD,KAAAY,IAEA,GAAAlN,eAAAmc,KAAArN,EAAA5F,GAOA4F,EAAA5F,GAAAgE,EAJA4B,EAAA5F,GAAA,CAAA4F,EAAA5F,GAAAgE,QAQAhE,IAEA4F,EAAA5F,GAAAgmB,OACAjgB,EACA,MAIAH,EAGA,OADAnU,EAAAuF,UAAAsuB,QAAA7zB,EAAA6zB,QAAAA,IC7GA,IAAAuB,OAAA,CACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAld,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAmd,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,QAEAC,KAAA,CACAR,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MACAC,GAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAld,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAmd,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OACAC,GAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,QCbA,SAAAE,YAAA9tB,EAAA+tB,EAAAC,EAAAC,EAAA/sB,gBAGA,KAAAxC,gBAAAovB,aACA,OAAA,IAAAA,YAAA9tB,EAAA+tB,EAAAC,EAAAC,EAAA/sB,GAGAxC,KAAAwvB,MAAA,KACAxvB,KAAAqvB,OAAAA,EACArvB,KAAAsB,QAAAA,EAEA,IACAD,EAEAouB,EAHAC,EAAA1vB,KAEA2vB,EAAA,EAEAC,EAAA,CACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,WACA,CAAA,UAAA,YAGA,SAAAC,EAAAtnB,EAAA8Z,GACA,GAAA,kBAAA9Z,EAAA,MAAA,GAAAA,EACA,IAAA4X,EAAAuP,EAAAL,OAAAnV,EAAAmI,GAAAlC,KAAA,IAAAuP,EAAAL,OAAAnV,EAAAmI,GAAAlC,KAAA,GACA,YAAAvS,IAAA8hB,EAAAL,OAAAnV,EAAAmI,GAAAyN,YAAA,OAAAJ,EAAAL,OAAAnV,EAAAmI,GAAAyN,YACAvnB,EAAA5M,WAAA4M,GACAmnB,EAAAL,OAAAU,SACAxnB,EAAA6H,QAAAsf,EAAAL,OAAAnV,EAAAmI,GAAAyN,YAAAv1B,WAAA8O,QAAA,IAAA,KAAA8W,EAEA5X,EAAA6H,QAAAsf,EAAAL,OAAAnV,EAAAmI,GAAAyN,YAAA3P,GAGAuP,EAAAL,OAAAU,UACAxnB,EAAA5M,WAAA4M,IACAhO,WAAA8O,QAAA,IAAA,KAAA8W,EAEA5X,EAAA4X,EAKA,SAAA6P,EAAAnjB,EAAAojB,GACA,GAAAztB,EACA,MAAA,IAEA0tB,EAAA,IAAApT,KAAAjiB,SAAAgS,EAAA,KACA,OAAA6iB,EAAAL,OAAAc,gBAAAT,EAAAL,OAAAe,gBACAH,EAAAztB,MAAAtI,QAGA,IAAA4iB,KAAAmT,EAAAztB,MAAAytB,EAAAztB,MAAAtI,OAAA,GAAAuR,GACA2S,YAAA8R,EAAA9R,UAHA,SAAA9kB,EAAAmN,KAAA6W,WAAA4S,EAAAR,EAAAL,OAAAc,eAAAzB,OAAA2B,YAAAlB,KAAAkB,aAAA,WAMA/2B,EAAAmN,KAAA6W,WAAA4S,EAAAR,EAAAL,OAAAe,eAAA1B,OAAA2B,YAAAlB,KAAAkB,aAEA/2B,EAAAmN,KAAA6W,WAAA4S,EAAAR,EAAAL,OAAAiB,WAAA5B,OAAA2B,YAAAlB,KAAAkB,aAIA,SAAAE,EAAA1jB,EAAAojB,GAGA,IAIAvgB,EAEAG,EANAigB,EAAAJ,EAAAL,OAAAnV,EAAA+V,EAAA3oB,EAAA,GAAAwoB,WAiBA3P,GAfA2P,MAAAA,IACArgB,EAAAqgB,EAAArmB,KAAAyF,IAAA,GAAA4gB,GAAA,EAMAjjB,GAHAgD,GAAA,KADAF,GADAD,GAAAjG,KAAAC,MAAAmD,EAAA4C,GAAAA,GAAAlV,YACAqV,QAAA,MACA,EAAAF,EAAAxV,OAAAyV,EAAA,GAEAmgB,GACAjgB,EAAAH,EAAAA,EAAA,KAAAD,EAAAlV,WAAAuV,OAAA,EAAAggB,EAAAjgB,GAEAH,GAIAggB,EAAAL,OAAAU,WAAAljB,EAAAA,EAAAtS,WAAA8O,QAAA,IAAA,MAEAqmB,EAAAL,OAAAnV,EAAA+V,EAAA3oB,EAAA,GAAA6Y,MAEA,OAAAtT,GAAAsT,EAAA,IAAAA,EAAA,IAGA,SAAAqQ,EAAAC,GACAf,EAAAL,OAAAqB,WACAlX,WAAA,WAGA,IAFA,IAAA7O,EAAA+kB,EAAAF,MAAAxoB,UAEAhN,EAAA21B,EAAA31B,EAAA2Q,EAAAzQ,OAAAF,IACA01B,EAAAL,OAAAnV,EAAAlgB,EAAA21B,IAAA,QAAAD,EAAAL,OAAAnV,EAAAlgB,EAAA21B,GAAAgB,WAEAr3B,EAAA4N,KAAAyD,EAAA3Q,GAAA2Q,KAAA,SAAA1Q,EAAA22B,GACA,IAGA/2B,EAHA,OAAA+2B,EAAA,IACA32B,GACAA,IAAA0Q,EAAA3Q,GAAA2Q,KAAAzQ,OAAA,IAEA,YAAAw1B,EAAAL,OAAAqB,WACA72B,EAAA61B,EAAAF,MAAArnB,YAAA,CAAAG,EAAAsoB,EAAA,GAAAroB,EAAAqoB,EAAA,MACAnxB,KAAA,GACA,aAAAiwB,EAAAL,OAAAqB,UACA72B,EAAA61B,EAAAF,MAAArnB,YAAA,CAAAG,EAAAsoB,EAAA,GAAAroB,EAAAqoB,EAAA,KAEA,WAAAlB,EAAAL,OAAAqB,WACA72B,EAAA61B,EAAAF,MAAArnB,YAAA,CAAAG,EAAAsoB,EAAA,GAAAroB,EAAA,KACA9I,KAAA,GAEA5F,EAAA61B,EAAAF,MAAArnB,YAAA,CAAAG,EAAAsoB,EAAA,GAAAroB,EAAAqoB,EAAA,GAAA,IAGAt3B,EAAA,8EAAAu2B,EAAAe,EAAA,GAAA52B,EAAA21B,GAAA,gBAAA10B,IAAA,CACAsE,SAAA,WACAC,KAAA3F,EAAA2F,KACAC,IAAA5F,EAAA4F,MACAC,SAAAgwB,EAAAF,MAAA5oB,sBAGA8oB,EAAAL,OAAAwB,aAAAnB,EAAAL,OAAAyB,eACAx3B,EAAA,qBAAA2B,IAAA,CACAugB,YAAAkU,EAAAL,OAAAwB,kBAAAjjB,EACArU,MAAAm2B,EAAAL,OAAAyB,mBAAAljB,KAIA6iB,EAAA51B,SAAA41B,GAAA,IAAA,GAGAlB,GAAAA,EAAAr1B,QACAsf,WAAA,WAGA,IAFA,IAKA3f,EAKAiH,EAVA6J,EAAA+kB,EAAAF,MAAAxoB,UACA+pB,EAAA,EACAt1B,EAAA,EAAAA,EAAA8zB,EAAAr1B,OAAAuB,IACA8zB,EAAA9zB,GAAAzB,GAAA2Q,EAAA4kB,EAAA9zB,GAAAye,EAAAyV,KACAtN,EAAA1X,EAAAomB,GAAApmB,KAMA7J,EAHA,MAAAyuB,EAAA9zB,GAAAoN,IACAhP,EAAA61B,EAAAF,MAAArnB,YAAA,CAAAG,EAAA+Z,EAAA,GAAA,GAAA9Z,EAAA8Z,EAAA,GAAA,GAAAnf,MAAAyH,EAAA4kB,EAAA9zB,GAAAye,EAAAyV,GAAAzsB,MAAAjB,MAAA0I,EAAA4kB,EAAA9zB,GAAAye,EAAAyV,GAAA1tB,SACAxC,KAAA8vB,EAAA9zB,GAAAorB,GACA0I,EAAA9zB,GAAAzB,KAEAH,EAAA61B,EAAAF,MAAArnB,YAAA,CAAAG,EAAA+Z,EAAA,GAAA,GAAA9Z,EAAA8Z,EAAA,GAAA,GAAAnf,MAAAyH,EAAA4kB,EAAA9zB,GAAAye,EAAAyV,GAAAzsB,MAAAjB,MAAA0I,EAAA4kB,EAAA9zB,GAAAye,EAAAyV,GAAA1tB,SACAxC,KAAA8vB,EAAA9zB,GAAAorB,GACA,0FAAA0I,EAAA9zB,GAAAzB,EAAA,UAEAV,EAAA,kFAAAwH,EAAA,UAAA7F,IAAA,CACAsE,SAAA,WACAC,KAAA3F,EAAA2F,KACAC,IAAA5F,EAAA4F,IACA+b,YAAA+T,EAAA9zB,GAAAu1B,SAAApjB,EACArU,MAAAg2B,EAAA9zB,GAAAw1B,SAAArjB,IACAlO,SAAAgwB,EAAAF,MAAA5oB,mBAEA,KAAA2oB,EAAA9zB,GAAAy1B,IAAA,OAAA3B,EAAA9zB,GAAAy1B,SAAAtjB,IAAA2hB,EAAA9zB,GAAAy1B,IACAH,IAEAA,KAEAN,EAAA51B,SAAA41B,GAAA,IAAA,GAMA,IAAAU,IADA9vB,EAAA,IAEA+vB,EAAA93B,EAAA,IAAAo2B,EAAApuB,QAAA+vB,SAEA,GAAA3B,EAAAL,OAAAiC,QAAAF,EAAAhf,SACAgf,EAAAhf,KAAAsd,EAAAL,OAAAkC,SAAAC,UAAA9B,EAAAL,OAAAiC,OAAA,IACA5B,EAAAL,OAAAoC,YAAAL,EAAAn2B,IAAA,QAAAy0B,EAAAL,OAAAoC,YACA/B,EAAAL,OAAAqC,WAAAN,EAAAn2B,IAAA,YAAAy0B,EAAAL,OAAAqC,WACAhC,EAAAL,OAAAkC,UAAA,CAGA,IAFA,IAAAI,EAAAjC,EAAAL,OAAAkC,SAAArD,MAAA,KACAjzB,EAAA,GACAuV,EAAA,EAAAA,EAAAmhB,EAAAz3B,OAAAsW,IAAA,CACA,IAAA3H,EAAA8oB,EAAAnhB,GAAA0d,MAAA,KAGA,WAAArlB,EAAA,IAAA,KAAAA,EAAA,IACA,IAAA6mB,EAAAL,OAAAzuB,OAAAgP,QAAA,KACA3U,EAAAwE,IAAA5E,SAAA60B,EAAAL,OAAAzuB,OAAA,IAAAwwB,EAAAxwB,SAAA,GAEA3F,EAAAwE,IAAA,QAAAiwB,EAAAL,OAAAzuB,OAAA,OAAAwwB,EAAAxwB,SAAA,IAAA,MAGA,WAAAiI,EAAA,IAAA,MAAAA,EAAA,IACA,IAAA6mB,EAAAL,OAAAzuB,OAAAgP,QAAA,KACA3U,EAAAwE,IAAA5E,SAAA60B,EAAAL,OAAAzuB,OAAA,IAAA,EAEA3F,EAAAwE,IAAA,QAAAiwB,EAAAL,OAAAzuB,OAAA,UAGA,QAAAiI,EAAA,IAAA,MAAAA,EAAA,IACA,IAAA6mB,EAAAL,OAAAzuB,OAAAgP,QAAA,KACA3U,EAAAwE,KAAA5E,SAAA60B,EAAAL,OAAAzuB,OAAA,IAAAwwB,EAAAxwB,UAAA,EAEA3F,EAAAwE,IAAA,cAAA2xB,EAAAxwB,SAAA,EAAA,MAGA,SAAAiI,EAAA,IAAA,MAAAA,EAAA,IACA,IAAA6mB,EAAAL,OAAA1uB,MAAAiP,QAAA,KACA3U,EAAAuE,MAAA3E,SAAA60B,EAAAL,OAAA1uB,MAAA,IAAAywB,EAAAzwB,SAAA,EAEA1F,EAAAuE,KAAA,cAAA4xB,EAAAzwB,QAAA,EAAA,MAGA,UAAAkI,EAAA,IAAA,KAAAA,EAAA,IACA,IAAA6mB,EAAAL,OAAA1uB,MAAAiP,QAAA,KACA3U,EAAAuE,KAAA3E,SAAA60B,EAAAL,OAAA1uB,MAAA,IAAAywB,EAAAzwB,QAAA,GAEA1F,EAAAuE,KAAA,QAAAkwB,EAAAL,OAAA1uB,MAAA,OAAAywB,EAAAzwB,QAAA,IAAA,MAGA,UAAAkI,EAAA,IAAA,MAAAA,EAAA,IACA,IAAA6mB,EAAAL,OAAA1uB,MAAAiP,QAAA,KACA3U,EAAAuE,KAAA3E,SAAA60B,EAAAL,OAAA1uB,MAAA,IAAA,GAEA1F,EAAAuE,KAAA,QAAAkwB,EAAAL,OAAA1uB,MAAA,UAGA1F,EAAA4N,EAAA,IAAAA,EAAA,GAIAuoB,EAAAn2B,IAAAA,GAWA,GANAy0B,EAAAL,OAAAuC,IAAAlC,EAAAL,OAAAuC,GAAA13B,OAAA,GAAA01B,EAAAF,EAAAL,OAAAuC,MACAlC,EAAAL,OAAAuC,GAAA,CAAArwB,OAAAquB,EAAAF,EAAAL,OAAAuC,MAGAjC,EAAA,EAEAJ,GAAAA,EAAAr1B,OACA,IAAA,IAAAuB,EAAA,EAAAA,EAAA8zB,EAAAr1B,OAAAuB,IACAk0B,IACAJ,EAAA9zB,GAAAgQ,EAAA9P,WAAA4zB,EAAA9zB,GAAAgQ,IAAA,EACA8jB,EAAA9zB,GAAAye,EAAArf,SAAA00B,EAAA9zB,GAAAye,IAAA,EACAqV,EAAA9zB,GAAAuP,EAAArP,WAAA4zB,EAAA9zB,GAAAuP,IAAA,EACAukB,EAAA9zB,GAAA+U,EAAA7U,WAAA4zB,EAAA9zB,GAAA+U,IAAA,EACA+e,EAAA9zB,GAAAorB,GAAAlrB,WAAA4zB,EAAA9zB,GAAAorB,KAAA,EACAxlB,EAAA4J,KAAA,CACA+a,GAAA,OAAAvqB,EACAwG,MAAA,CAAAR,MAAA,GACAlI,MAAAg2B,EAAA9zB,GAAA1B,QAAA6T,EACAjK,MAAA,CACAlC,MAAA,EACA+B,KAAA,MAAA+rB,EAAA9zB,GAAAnB,GAAA,IAAAi1B,EAAA9zB,GAAAnB,GAAA,SAAAi1B,EAAA9zB,GAAAnB,IAAA,IAAAi1B,EAAA9zB,GAAAnB,EACAsJ,OAAA,EACAL,UAAAgsB,EAAA9zB,GAAA+U,GAEA7F,KAAA,CAAA,CAAA,EAAA4kB,EAAA9zB,GAAAgQ,GAAA,CAAA,IAAA8jB,EAAA9zB,GAAAgQ,IACA8E,MAAA,cACArM,WAAAqrB,EAAA9zB,GAAAuP,IAGA,KAAAukB,EAAA9zB,GAAAy1B,IAAA,OAAA3B,EAAA9zB,GAAAy1B,SAAAtjB,IAAA2hB,EAAA9zB,GAAAy1B,KACAvB,IACAJ,EAAA9zB,GAAAy1B,GAAAv1B,WAAA4zB,EAAA9zB,GAAAy1B,KAAA,EACA7vB,EAAA4J,KAAA,CACAhJ,MAAA,CAAAR,MAAA,GACAlI,MAAAg2B,EAAA9zB,GAAA1B,QAAA6T,EACAjK,MAAA,CACAlC,MAAA,EACA+B,MAAA,EACAI,OAAA,EACAL,UAAAgsB,EAAA9zB,GAAA+U,GAEA7F,KAAA,CAAA,CAAA,EAAA4kB,EAAA9zB,GAAAy1B,IAAA,CAAA,IAAA3B,EAAA9zB,GAAAy1B,KACArL,YAAA,OAAApqB,EACA8U,MAAA,cACArM,WAAAqrB,EAAA9zB,GAAAuP,KAUA,IAFA,IAWA6mB,EAXAC,EAAA1kB,EAAAA,EACA2kB,EAAA,EACA93B,EAAA,EAAAA,EAAAq1B,EAAAp1B,OAAAD,IACAq1B,EAAAr1B,IAAAy1B,EAAAL,OAAAnV,EAAAjgB,KAEAy1B,EAAAL,OAAAnV,EAAAjgB,GAAA02B,UAAAjB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,WAAAjB,EAAAL,OAAAsB,WAAA,OACAjB,EAAAL,OAAAnV,EAAAjgB,GAAAgxB,QAAA,IAAAyE,EAAAL,OAAAnV,EAAAjgB,GAAAgxB,QAAA,SAAAyE,EAAAL,OAAAnV,EAAAjgB,GAAAgxB,OACAyE,EAAAL,OAAAnV,EAAAjgB,GAAAixB,WAAAvvB,WAAA+zB,EAAAL,OAAAnV,EAAAjgB,GAAAixB,aAAA,GACAwE,EAAAL,OAAAnV,EAAAjgB,GAAA+3B,YAAAr2B,WAAA+zB,EAAAL,OAAAnV,EAAAjgB,GAAA+3B,cAAA,GACAC,EAAA,gBAAAvC,EAAAL,OAAAnV,EAAAjgB,GAAA02B,WAAA,QAAAjB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,WAAA,WAAAjB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,UAEAkB,EAAA,CACAt4B,MAAAm2B,EAAAL,OAAAnV,EAAAjgB,GAAAV,YAAAqU,EACAjK,MAAA,CACAlC,MAAAiuB,EAAAL,OAAAnV,EAAAjgB,GAAAgxB,QAAAgH,EACAzuB,KAAAksB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,MAAA,MAAAksB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,KAAA7H,WAAA+zB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,MAAA,SAAAksB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,WAAA,QAAAjB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,UACA/sB,MAAA,UAAA8rB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,UACAptB,UAAAmsB,EAAAL,OAAAnV,EAAAjgB,GAAAi4B,WAEAxP,QAAA,CACAjhB,KAAA,WAAAiuB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,UACA1O,QAAA,GACA1e,UAAAmsB,EAAAL,OAAAnV,EAAAjgB,GAAAi4B,UACA1uB,QAAAksB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,MAAA,MAAAksB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,OAAA7H,WAAA+zB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,OAEAK,KAAA,CACApC,KAAA,QAAAiuB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,UACAwB,MAAAl4B,EAAA,EACA6J,SAAA,GACAP,UAAAmsB,EAAAL,OAAAnV,EAAAjgB,GAAAi4B,UACA1uB,QAAAksB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,MAAA,MAAAksB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,OAAA7H,WAAA+zB,EAAAL,OAAAnV,EAAAjgB,GAAAuJ,MACAC,UAAAisB,EAAAL,OAAA+C,eAAAxkB,EACA7J,MAAA,UAEAV,OAAA,CACA5B,KAAA,aAAAiuB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,WAAA,gBAAAjB,EAAAL,OAAAnV,EAAAjgB,GAAA02B,WAAA,SAAAjB,EAAAL,OAAAnV,EAAAjgB,GAAAoJ,SAAA,IAAAqsB,EAAAL,OAAAnV,EAAAjgB,GAAAoJ,QAEAsH,KAAA2kB,EAAAr1B,GACAsW,MAAAmf,EAAAL,OAAAnV,EAAAjgB,GAAA2B,KACAsI,WAAAwrB,EAAAL,OAAAnV,EAAAjgB,GAAAo4B,WACApH,OAAA,CACAxpB,KAAAiuB,EAAAL,OAAAnV,EAAAjgB,GAAAgxB,QAAAgH,EACA1uB,UAAAmsB,EAAAL,OAAAnV,EAAAjgB,GAAAi4B,UACAhH,WAAA,CAAAwE,EAAAL,OAAAnV,EAAAjgB,GAAAixB,WAAAwE,EAAAL,OAAAnV,EAAAjgB,GAAA+3B,eAIAtC,EAAAL,OAAA8B,WAAA,EAAAzB,EAAAL,OAAA8B,WAAAzB,EAAAL,OAAAnV,EAAAjgB,GAAAk3B,WAAA,EAAAzB,EAAAL,OAAAnV,EAAAjgB,GAAAk3B,WACAA,GAAA,EACAzB,EAAAL,OAAAnV,EAAAjgB,GAAAk3B,UAAAt2B,SAAA60B,EAAAL,OAAAnV,EAAAjgB,GAAAk3B,WAAAzB,EAAAL,OAAA8B,WACAU,EAAAlnB,KAAA2nB,IAAAT,EAAAlnB,KAAA+kB,EAAAL,OAAAnV,EAAAjgB,GAAAk3B,YAEAzB,EAAAL,OAAAnV,EAAAjgB,GAAAk3B,UAAA,EAGAzB,EAAAL,OAAAnV,EAAAjgB,GAAA61B,gBAAAliB,IAAA8hB,EAAAL,OAAAnV,EAAAjgB,GAAA61B,YAAA,KAAAJ,EAAAL,OAAAnV,EAAAjgB,GAAA61B,WAAAJ,EAAAL,OAAAS,WAAAj1B,SAAA60B,EAAAL,OAAAnV,EAAAjgB,GAAA61B,WAAA,IAEA,QAAAJ,EAAAL,OAAAnV,EAAAjgB,GAAA02B,YACAkB,EAAAhuB,KAAAC,UAAA+tB,EAAAlnB,KAAAknB,EAAAlnB,KAAAzQ,OAAA,GAAA,GAAA23B,EAAAlnB,KAAA,GAAA,IAAAknB,EAAAlnB,KAAAzQ,QAAAyB,WAAA+zB,EAAAL,OAAAvrB,WAAA,KA2BAzC,EAAA4J,KAAA4mB,GAEAvC,EAAAr1B,GAAA,GAAA,GAAA63B,IAAAA,EAAAxC,EAAAr1B,GAAA,GAAA,IACAq1B,EAAAr1B,GAAAq1B,EAAAr1B,GAAAC,OAAA,GAAA,GAAA63B,IAAAA,EAAAzC,EAAAr1B,GAAAq1B,EAAAr1B,GAAAC,OAAA,GAAA,KAKA,OAAAw1B,EAAAL,OAAA30B,UAAAkT,IAAA8hB,EAAAL,OAAA30B,KAAA,KAAAg1B,EAAAL,OAAA30B,KAAA,QAAAg1B,EAAAL,OAAA30B,IAAAH,WACAm1B,EAAAL,OAAA30B,SAAAkT,EAEA8hB,EAAAL,OAAA30B,IAAAiB,WAAA+zB,EAAAL,OAAA30B,KAGAg1B,EAAAL,OAAAkD,UACA7C,EAAAL,OAAA1uB,QAAA+uB,EAAAL,OAAA1uB,MAAA,QACA+uB,EAAAL,OAAAzuB,SAAA8uB,EAAAL,OAAAzuB,OAAA,SAEA,IAAA8uB,EAAAL,OAAA1uB,MAAAiP,QAAA,KACAtW,EAAA,oBAAA2B,IAAA,CAAA0F,MAAA,QAAA+uB,EAAAL,OAAA1uB,MAAA,aAEArH,EAAA,oBAAA2B,IAAA,CAAA0F,MAAA+uB,EAAAL,OAAA1uB,SAEA,IAAA+uB,EAAAL,OAAAzuB,OAAAgP,QAAA,KACAtW,EAAA,oBAAA2B,IAAA,CAAA2F,OAAA,QAAA8uB,EAAAL,OAAAzuB,OAAA,aAEAtH,EAAA,oBAAA2B,IAAA,CAAA2F,OAAA8uB,EAAAL,OAAAzuB,UAIAtH,EAAA,oBAAAoiB,SAAA,mBAAAzgB,IAAA,CAAA0F,MAAA+uB,EAAAL,OAAA1uB,MAAAC,OAAA8uB,EAAAL,OAAAzuB,SAIA,SAAA8uB,EAAAL,OAAAiB,aACAZ,EAAAL,OAAAiB,gBAAA1iB,GAGA8hB,EAAAL,OAAAiB,cACA,IAAAZ,EAAAL,OAAAiB,WAAA1gB,QAAA,YACA8f,EAAAL,OAAAe,eAAA,YACA,IAAAV,EAAAL,OAAAiB,WAAA1gB,QAAA,YACA8f,EAAAL,OAAAe,eAAA,YACA,IAAAV,EAAAL,OAAAiB,WAAA1gB,QAAA,UACA8f,EAAAL,OAAAe,eAAA,UACA,IAAAV,EAAAL,OAAAiB,WAAA1gB,QAAA,SACA8f,EAAAL,OAAAe,eAAA,QAEAV,EAAAL,OAAAe,eAAA,MAEA,IAAAV,EAAAL,OAAAiB,WAAA1gB,QAAA,YACA8f,EAAAL,OAAAc,eAAA,YACA,IAAAT,EAAAL,OAAAiB,WAAA1gB,QAAA,SACA8f,EAAAL,OAAAc,eAAA,SACA,IAAAT,EAAAL,OAAAiB,WAAA1gB,QAAA,YACA8f,EAAAL,OAAAc,eAAA,YACA,IAAAT,EAAAL,OAAAiB,WAAA1gB,QAAA,YACA8f,EAAAL,OAAAc,eAAA,YACA,IAAAT,EAAAL,OAAAiB,WAAA1gB,QAAA,SACA8f,EAAAL,OAAAc,eAAA,SACA,IAAAT,EAAAL,OAAAiB,WAAA1gB,QAAA,MACA8f,EAAAL,OAAAc,eAAA,KAEAT,EAAAL,OAAAc,eAAA,MAIAV,EAAA,CACArrB,KAAA,CACAW,UAAA,SAAA2qB,EAAAL,OAAAmD,cAAA,IAAA9C,EAAAL,OAAAmD,YACA1wB,gBAAA4tB,EAAAL,OAAAuC,SAAAhkB,EACAnJ,YAAAirB,EAAAL,OAAAoD,cAAA,MAAA/C,EAAAL,OAAAoD,cAAA,IAAA/C,EAAAL,OAAAoD,aAAA53B,SAAA60B,EAAAL,OAAAoD,aAAA,SAAA7kB,EACAtJ,YAAAorB,EAAAL,OAAAqD,mBAAA9kB,GAEAxK,MAAA,GACAD,MAAA,GACA3B,OAAA,CACAC,OAAAiuB,EAAAL,OAAA7tB,OACAjC,SAAAmwB,EAAAL,OAAA7tB,OACAkkB,UAAA,EACAhkB,UAAA7G,SAAA60B,EAAAL,OAAAsD,WAAA,UAAA/kB,EACA9L,gBAAA4tB,EAAAL,OAAAuD,YAAAhlB,EACA7L,uBAAA6L,IAAA8hB,EAAAL,OAAAwD,aAAAl3B,WAAA+zB,EAAAL,OAAAwD,cAAA,IACAlxB,eAAA,SAAA4O,EAAAlP,GACA,MAAA,gBAAAkP,EACA,KAGA,4BAAAA,EAAA,aAKAmf,EAAAL,OAAA/F,OACAmG,EAAAnG,KAAA,CACAqB,aAAA,EACApR,QAAA,WACA4Q,OAAA,KAEAsF,EAAA3F,IAAA,CACAa,aAAA,EACAZ,OAAA,OACAE,UAAA,KAOA,IAHA,IAAArmB,EAAA8rB,EAAAL,OAAAoB,UAAA,IAAA,GAAA,GAGAqC,EAAA,EAAAA,EAAApD,EAAAL,OAAAnV,EAAAhgB,OAAA44B,IAAA,CAEApD,EAAAL,OAAAnV,EAAA4Y,GAAAC,KAAArD,EAAAL,OAAAnV,EAAA4Y,GAAAC,MAAA,GACArD,EAAAL,OAAAnV,EAAA4Y,GAAAE,KAAAtD,EAAAL,OAAAnV,EAAA4Y,GAAAE,MAAA,GACAtD,EAAAL,OAAAnV,EAAA4Y,GAAAG,YAAAvD,EAAAL,OAAAnV,EAAA4Y,GAAAG,aAAA,GAEA,IA4DA/C,EA5DAgD,EAAA,CACAzxB,KAAA,QAAAiuB,EAAAL,OAAAnV,EAAA4Y,GAAAC,KACAr4B,IAAA,KAAAg1B,EAAAL,OAAAnV,EAAA4Y,GAAAp4B,KAAA,OAAAg1B,EAAAL,OAAAnV,EAAA4Y,GAAAp4B,UAAAkT,IAAA8hB,EAAAL,OAAAnV,EAAA4Y,GAAAp4B,IAAAiB,WAAA+zB,EAAAL,OAAAnV,EAAA4Y,GAAAp4B,UAAAkT,EACAhT,IAAA,KAAA80B,EAAAL,OAAAnV,EAAA4Y,GAAAl4B,KAAA,OAAA80B,EAAAL,OAAAnV,EAAA4Y,GAAAl4B,UAAAgT,IAAA8hB,EAAAL,OAAAnV,EAAA4Y,GAAAl4B,IAAAe,WAAA+zB,EAAAL,OAAAnV,EAAA4Y,GAAAl4B,UAAAgT,EACArO,UAAA,EAAAmwB,EAAAL,OAAAnV,EAAA4Y,GAAAC,KAAAnjB,QAAA,QAAA,OAAA,QACAzN,KAAA,CACA5I,OAAA,EAAAm2B,EAAAL,OAAAnV,EAAA4Y,GAAAC,KAAAnjB,QAAA,SAAA8f,EAAAL,OAAAnV,EAAA4Y,GAAAv5B,MAAAm2B,EAAAL,OAAA8D,gBAAA,SAEA3I,WAAA,EACAE,UAAA,EAWAloB,MAAA3H,SAAA60B,EAAAL,OAAAnV,EAAA4Y,GAAAM,OAAA,UAAAxlB,EACAxL,UAAAstB,EAAAL,OAAAgE,iBAAAzlB,EACAnL,cAAA8tB,GAGA+C,EAAA,CACA7xB,KAAA,QAAAiuB,EAAAL,OAAAnV,EAAA4Y,GAAAE,KACAzzB,UAAA,IAAAmwB,EAAAL,OAAAnV,EAAA4Y,GAAAE,KAAApjB,QAAA,OAAA,MAAA,SACAzN,KAAA,CACA5I,OAAA,IAAAm2B,EAAAL,OAAAnV,EAAA4Y,GAAAE,KAAApjB,QAAA,SAAA8f,EAAAL,OAAAnV,EAAA4Y,GAAAv5B,MAAAm2B,EAAAL,OAAAkE,gBAAA,SAEA/I,UAAA,KACAE,SAAA,KACAxoB,KAAA,OAEAgd,SAAA,UACAzc,cAAAitB,EAAAL,OAAAiB,WAAAN,EAAA,KACA/sB,YAAA,QAAAysB,EAAAL,OAAAnV,EAAA4Y,GAAAnC,UAAAtvB,EAAAyxB,EAAAnD,GAAA9rB,KAAAC,cAAA8J,EACAxL,UAAAstB,EAAAL,OAAAgE,iBAAAzlB,EACApL,MAAA3H,SAAA60B,EAAAL,OAAAnV,EAAA4Y,GAAAU,OAAA,UAAA5lB,EACAlT,SAAAkT,EACAhT,SAAAgT,GAIA,GAAA,QAAA8hB,EAAAL,OAAAnV,EAAA4Y,GAAAnC,UAAA,CACAlB,EAAAjuB,OAAAkkB,UAAA,EAEA4N,EAAA9wB,MAAA,GACA,IAAA,IAAAixB,EAAA,EAAAA,EAAAnE,EAAAwD,GAAA54B,OAAAu5B,IACAH,EAAA9wB,MAAAyI,KAAAqkB,EAAAwD,GAAAW,GAAA,IAGAnE,EAAAwD,GAAA,GAAA,GAAA,KACAxD,EAAAwD,GAAAxD,EAAAwD,GAAA54B,OAAA,GAAA,GAAA,UACAsI,IACA8wB,EAAA9wB,MAAAA,GAGAktB,EAAAL,OAAA/F,OACA4G,EAAA,IAAApT,KACAwW,EAAA9I,UAAA,CAAA,KAAA0F,EAAAnT,WACAuW,EAAA5I,SAAA,CAAA,KAAAwF,EAAAnT,YAGA0S,EAAArsB,MAAA6H,KAAAioB,GACAzD,EAAAtsB,MAAA8H,KAAAqoB,GAGA,KAAA5D,EAAAL,OAAAnV,EAAA4Y,GAAAG,YACA5xB,EAAAyxB,EAAAnD,GAAAzsB,MAAArI,SAAA60B,EAAAL,OAAAnV,EAAA4Y,GAAAG,aAEA5xB,EAAAyxB,EAAAnD,GAAAzsB,MAAA4vB,EAAA,EAEAzxB,EAAAyxB,EAAAnD,GAAA1tB,MAAA6wB,EAAA,EAEAzxB,EAAAyxB,EAAAnD,GAAA+D,YAAA,CACA5oB,QAAA4kB,EAAAL,OAAAnV,EAAA4Y,GAAA3B,UACA9V,SAAAqU,EAAAL,OAAAnV,EAAA4Y,GAAA3B,UACAwC,cAAA,GAKA,GAAApE,GAAAA,EAAAr1B,OAEA,IADA,IAAA62B,EAAA,EACA6C,EAAA,EAAAA,EAAArE,EAAAr1B,OAAA05B,IACAvyB,EAAAkuB,EAAAqE,GAAA1Z,EAAAyV,KACAJ,EAAAqE,GAAA1Z,EAAArf,SAAA00B,EAAAqE,GAAA1Z,EAAA,IACA7Y,EAAA0vB,GAAA7tB,MAAA7B,EAAAkuB,EAAAqE,GAAA1Z,EAAAyV,GAAAzsB,MACA7B,EAAA0vB,GAAApmB,KAAA,GAAA,GAAAmnB,EACAzwB,EAAA0vB,GAAApmB,KAAA,GAAA,GAAAonB,EACAhB,IAEA,KAAAxB,EAAAqE,GAAA1C,IAAA,OAAA3B,EAAAqE,GAAA1C,SAAAtjB,IAAA2hB,EAAAqE,GAAA1C,KACA7vB,EAAA0vB,GAAA7tB,MAAA7B,EAAAkuB,EAAAqE,GAAA1Z,EAAAyV,GAAAzsB,MACA7B,EAAA0vB,GAAApmB,KAAA,GAAA,GAAAmnB,EACAzwB,EAAA0vB,GAAApmB,KAAA,GAAA,GAAAonB,EACAhB,MAkNA,OA5MAI,IACA1B,EAAApuB,OAAAouB,EAAApuB,QAAA,GACAouB,EAAApuB,OAAAqyB,YAAA,CACA5oB,OAAA,EACAuQ,QAAA,EACAsY,cAAA,IAGAjE,EAAAL,OAAAoB,YACAhB,EAAApuB,OAAAouB,EAAApuB,QAAA,GACAouB,EAAApuB,OAAAirB,KAAA,CACAjR,QAAA,EACAzX,MAAAA,EACAgpB,UAAA8C,EAAAL,OAAAoB,UAAA7sB,IAKAtK,EAAAmN,KAAArF,QAAA6J,KAAA,CACAnC,KAAA,SAAArC,GACAA,EAAArB,MAAAW,eAAAkF,KAAA,SAAAxE,EAAAnF,GACAA,EAAAE,OAAAkkB,WAIApkB,EAAAE,OAAAG,eAAA,SAAA4O,EAAAlP,GACA,MAAA,gBAAAkP,EAAA,KACA,4BAAAA,EAAA,eAIAjP,QAAAA,EACA1F,KAAA,iBACAogB,QAAA,QAGA0T,EAAAF,MAAAl2B,EAAAmN,KAAA,IAAAipB,EAAApuB,QAAAuyB,QAAAxyB,EAAAouB,GAEAe,EAAAd,EAAAL,OAAAoB,WAEAqD,EAAAx6B,EAAA,IAAAo2B,EAAApuB,QAAAuyB,SAEAnE,EAAApuB,QAAAyyB,UAAArE,EAAApuB,QAAAyyB,WAAA,UAGA,SAAArE,EAAAL,OAAAmD,cAAA,IAAA9C,EAAAL,OAAAmD,cACAsB,EAAArpB,OAAA,aAAAgN,KAAA,YAAA,SAAAK,EAAAlQ,EAAAwQ,GACA,IAKA7P,EAKAzH,EAIAkzB,EAdA5b,GACA9P,EAAA8P,EAAAY,UAAA,GAAA5I,QAAA,GAIA7H,EADA,YAAAmnB,EAAAL,OAAAnV,EAAA9B,EAAAe,YAAAwW,GAAApN,OACA9Y,KAAAC,MAAA0O,EAAAY,UAAA,GAAA0W,EAAAL,OAAAnV,EAAA9B,EAAAe,YAAAwW,GAAAsE,UAEA7b,EAAAY,UAAA,GAAA0W,EAAAL,OAAAnV,EAAA9B,EAAAe,YAAAwW,GAAAsE,SAAA7jB,QAAA,GAGAtP,EAAAsX,EAAA/W,OAAAkP,MAAA6H,EAAA/W,OAAAkP,MAAA,OAAA,GAEAzP,GADAA,GAAAxH,EAAAmN,KAAA6W,WAAA,IAAAR,KAAAjiB,SAAAyN,EAAA,KAAAonB,EAAAL,OAAAiB,YAAA,QACA,MAAAT,EAAAtnB,EAAA6P,EAAAe,YAAAwW,GAAA,OAEAqE,EAAA16B,EAAA,IAAAo2B,EAAApuB,QAAAyyB,WAAA3hB,KAAAtR,GACAxH,EAAA0G,MAAAY,SAAAwX,EAAAD,MAAA6b,EAAApzB,WACAwX,EAAAD,OAAA,GAAA6b,EAAApzB,UAEAtH,EAAA0G,MAAAW,QAAAyX,EAAAH,MAAA+b,EAAArzB,UACAyX,EAAAH,OAAA,GAAA+b,EAAArzB,SAEAqzB,EAAA/4B,IAAA,CAAAwE,IAAA2Y,EAAAD,MAAA,EAAA3Y,KAAA4Y,EAAAH,MAAA,IAAAic,OAAA,MAEA56B,EAAA,YAAA4hB,SAIA5hB,EAAA,IAAAo2B,EAAApuB,QAAAyyB,WAAA75B,QACAZ,EAAA,YAAAo2B,EAAApuB,QAAAyyB,UAAA,YAAA94B,IAAA,CACAsE,SAAA,WACA40B,QAAA,OACAC,OAAA,iBACAljB,QAAA,MACAmjB,mBAAA,OACAha,QAAA,KACA3a,SAAA,SAIAgwB,EAAAL,OAAA/F,MAAAoG,EAAApuB,QAAAgzB,UACAR,EAAArpB,OAAA,YAAAgN,KAAA,WAAA,SAAAE,EAAAlR,EAAAoE,GACA6kB,EAAA6E,aAAAtmB,aAAAyhB,EAAA6E,aACA7E,EAAA6E,YAAA/a,WAAAkW,EAAApuB,QAAAgzB,SAAA,OACA7pB,OAAA,WAAAgN,KAAA,UAAA,SAAAE,EAAAlR,EAAAoE,GACA6kB,EAAA6E,aAAAtmB,aAAAyhB,EAAA6E,aACA7E,EAAA6E,YAAA/a,WAAAkW,EAAApuB,QAAAgzB,SAAA,OAKAt0B,KAAAw0B,OAAA,SAAAC,EAAAC,EAAAC,GACA,GAAAF,EAAA,CAIA,IAHA,IAAA3C,EAAA1kB,EAAAA,EACA2kB,EAAA,EAEAnQ,EAAA,EAAAA,EAAAyN,EAAAnV,EAAAhgB,OAAA0nB,IAMA,GALAvgB,EAAAugB,EAAA+N,GAAAhlB,KAAA8pB,EAAA7S,GACA6S,EAAA7S,GAAA,GAAA,GAAAkQ,IAAAA,EAAA2C,EAAA7S,GAAA,GAAA,IACA6S,EAAA7S,GAAA6S,EAAA7S,GAAA1nB,OAAA,GAAA,GAAA63B,IAAAA,EAAA0C,EAAA7S,GAAA6S,EAAA7S,GAAA1nB,OAAA,GAAA,IAGA,QAAAm1B,EAAAnV,EAAA0H,GAAA+O,UAAA,CACAlB,EAAAtsB,MAAAye,GAAApf,MAAA,GACA,IAAA,IAAA/G,EAAA,EAAAA,EAAAg5B,EAAA7S,GAAA1nB,OAAAuB,IACAg0B,EAAAtsB,MAAAye,GAAApf,MAAAyI,KAAAwpB,EAAA7S,GAAAnmB,GAAA,IAGAg5B,EAAA7S,GAAA,GAAA,GAAA,KACA6S,EAAA7S,GAAA6S,EAAA7S,GAAA1nB,OAAA,GAAA,GAAA,KAKA,GAAAq1B,GAAAA,EAAAr1B,OAEA,IADA,IAAA06B,EAAA,EACAn5B,EAAA,EAAAA,EAAA8zB,EAAAr1B,OAAAuB,IACA4F,EAAAuzB,GAAAjqB,KAAA,GAAA,GAAAmnB,EACAzwB,EAAAuzB,GAAAjqB,KAAA,GAAA,GAAAonB,EACA6C,IAEA,KAAArF,EAAA9zB,GAAAy1B,IAAA,OAAA3B,EAAA9zB,GAAAy1B,SAAAtjB,IAAA2hB,EAAA9zB,GAAAy1B,KACA7vB,EAAAuzB,GAAAjqB,KAAA,GAAA,GAAAmnB,EACAzwB,EAAAuzB,GAAAjqB,KAAA,GAAA,GAAAonB,EACA6C,KAKAt7B,EAAA,qBAAAkR,SACAlR,EAAA,oBAAAkR,SAEAilB,EAAApuB,QAAAouB,EAAApuB,OAAAirB,OAAAmD,EAAApuB,OAAAirB,KAAAjR,QAAA,GAEA,GAAAqZ,GACAA,EAAAx6B,OAEA,IADA,IAAA62B,EAAA,EACA6C,EAAA,EAAAA,EAAAc,EAAAx6B,OAAA05B,IACAvyB,EAAA0vB,GAAApmB,KAAA,GAAA,GAAA+pB,EAAAd,GAAAnoB,EACApK,EAAA0vB,GAAApmB,KAAA,GAAA,GAAA+pB,EAAAd,GAAAnoB,EACAslB,IAEA,KAAA2D,EAAAd,GAAA1C,IAAA,OAAAwD,EAAAd,GAAA1C,SAAAtjB,IAAA8mB,EAAAd,GAAA1C,KACA7vB,EAAA0vB,GAAApmB,KAAA,GAAA,GAAA+pB,EAAAd,GAAA1C,GACA7vB,EAAA0vB,GAAApmB,KAAA,GAAA,GAAA+pB,EAAAd,GAAA1C,GACAH,KAKA/wB,KAAAwvB,MAAAl2B,EAAAmN,KAAA,IAAAzG,KAAAsB,QAAAuyB,QAAAxyB,EAAAouB,GACAe,GAAA,IAGAxwB,KAAA60B,SAAA,WAGA,IAFA,IAAA5I,EAAAjsB,KAAAwvB,MAAAznB,aACA6f,EAAA,GACAhG,EAAA,EAAAA,EAAAqK,EAAA9oB,MAAAjJ,OAAA0nB,IACAgG,EAAAhG,GAAA,CACAlnB,IAAA+O,KAAAC,MAAAuiB,EAAA9oB,MAAAye,GAAAlnB,KACAE,IAAA6O,KAAAC,MAAAuiB,EAAA9oB,MAAAye,GAAAhnB,MAEA60B,EAAAtsB,MAAAye,GAAAhnB,IAAAgtB,EAAAhG,GAAAhnB,IACA60B,EAAAtsB,MAAAye,GAAAlnB,IAAAktB,EAAAhG,GAAAlnB,IAEA,OAAAktB,GAGA5nB,KAAA80B,SAAA,SAAAC,GACA,IAAA,IAAAnT,EAAA,EAAAA,EAAA6N,EAAAtsB,MAAAjJ,OAAA0nB,IACA6N,EAAAtsB,MAAAye,GAAAlnB,IAAAq6B,EAAAnT,GAAAlnB,IACA+0B,EAAAtsB,MAAAye,GAAAhnB,IAAAm6B,EAAAnT,GAAAhnB,KAIAoF,KAAAg1B,UAAA,SAAAC,GACAA,EAAAA,GAAA,IAAAnY,KACA,IAAA,IAAA8E,EAAA,EAAAA,EAAA6N,EAAAtsB,MAAAjJ,OAAA0nB,IACA6N,EAAAtsB,MAAAye,GAAA4I,UAAA,CAAA,KAAAyK,EAAAlY,WACA0S,EAAAtsB,MAAAye,GAAA8I,SAAA,CAAA,KAAAuK,EAAAlY,YAIA/c,KAAAspB,KAAA,SAAA4L,EAAA/K,GACA,IAAApjB,EAAA/G,KAAAwvB,MAAAzoB,SACA/G,KAAAwvB,MAAAlG,KAAA,CACAD,OAAA,CACA7pB,KAAA01B,EAAAnuB,EAAAvH,KACAoB,OAAAZ,KAAAwvB,MAAA5uB,SAAA,GAEAupB,OAAAA,KAIAnqB,KAAA8pB,IAAA,SAAAoL,GACAl1B,KAAAwvB,MAAA1F,IAAA,CAAAtqB,KAAA01B,EAAAz1B,IAAA,KAGAO,KCjyBA,IAAAm1B,kBAAA3b,WAAA,WACA2b,kBAAA,KAEA77B,EAAA,kBAAAmI,QACA,KAEA2zB,UAAA,EAEAC,KAAAC,SAAAC,KAAArH,MAAA,KAAA,GAEAmC,WAAA,KA0CAhB,QAzCA,oBAAAmG,UACAnF,WAAAmF,SAAA,MAwCArI,QAAAkI,MAAA,KAOA,GALAhG,OAAA1rB,QACA0rB,OAAAnV,EAAAub,KAAAn6B,MAAAm6B,KAAAC,UAAArG,OAAA1rB,eACA0rB,OAAA1rB,OAGA0rB,OAAAsG,KAAA,CACA,IAAAC,IAAAvG,OAAAsG,KAAAtG,OAAAsG,KAAAzH,MAAA,KAAA,GACA3sB,OAAA8tB,OAAAwG,QAAAxG,OAAAwG,QAAA3H,MAAA,KAAA,GACA4H,MAAAzG,OAAA0G,OAAA1G,OAAA0G,OAAA7H,MAAA,KAAA,GACA8H,MAAA3G,OAAA4G,OAAA5G,OAAA4G,OAAA/H,MAAA,KAAA,GACAmB,OAAAnV,EAAA,GACA,IAAA,IAAAjgB,EAAA,EAAAA,EAAA27B,IAAA17B,OAAAD,IACAo1B,OAAAnV,EAAAjP,KAAA,CACA+a,GAAA4P,IAAA37B,GACA8M,OAAA,EACAnL,KAAAk6B,MAAA77B,IAAA,GACAi8B,UAAA,WACA38B,MAAAgI,OAAAtH,IAAA,OACAi4B,UAAA7C,OAAA8G,aAAA,EACA9D,WAAAhD,OAAA8G,aAAA,EACAz7B,IAAA20B,OAAA30B,KAAA,GACAE,IAAAy0B,OAAAz0B,KAAA,GACAulB,KAAA6V,MAAA/7B,IAAA,KAGAo1B,OAAA+G,cAAA,OACA/G,OAAAgH,cAAA,IACAhH,OAAAiH,YAAA,MAIA,GAAAjH,OAAAnV,EACA,IAAA,IAAAxO,EAAA,EAAAA,EAAA2jB,OAAAnV,EAAAhgB,OAAAwR,IACA2jB,OAAAnV,EAAAxO,GAAA6qB,MACAlH,OAAAnV,EAAAxO,GAAAwqB,UAAA7G,OAAAnV,EAAAxO,GAAA6qB,WACAlH,OAAAnV,EAAAxO,GAAA6qB,KAEAlH,OAAAmH,WAAAnH,OAAAnV,EAAAxO,GAAA8qB,WACAnH,OAAAnV,EAAAxO,GAAA8qB,SAAAnH,OAAAmH,UAMAnH,OAAA1uB,MAAA0uB,OAAA1uB,OAAA,OACA0uB,OAAAzuB,OAAAyuB,OAAAzuB,QAAA,OACAyuB,OAAAiB,WAAAjB,OAAAiB,YAAA,oBACAjB,OAAAU,SAAA,SAAAV,OAAAU,WAAA,IAAAV,OAAAU,SACAV,OAAA/F,KAAA,SAAA+F,OAAA/F,OAAA,IAAA+F,OAAA/F,KACA+F,OAAAoB,UAAA51B,SAAAw0B,OAAAoB,YAAA,EACApB,OAAAoH,OAAA,SAAApH,OAAAoH,SAAA,IAAApH,OAAAoH,OACApH,OAAAS,gBAAAliB,IAAAyhB,OAAAS,WAAA,EAAAj1B,SAAAw0B,OAAAS,WAAA,IACAT,OAAAqH,SAAArH,OAAAsH,SAAAtH,OAAAqH,UAAA,WAEA,IAAApH,WAAA,GACA9sB,MAAA,KACAo0B,aAEAC,WAAA,GACAC,UAAA,GACAC,cAAA,GACA7G,IAAA,IAAApT,KACAka,MAAA,oBAGAzC,YAAA,KACA0C,MAAA,KACAC,WAAA,EACAC,UAAA,KACA3H,MAAA,KAEA4H,OAAA,EACAC,WAAA,GACAC,YAAA,EAEA,IACA13B,OAAAH,MAAAG,OAAA23B,WAAA,IAAA33B,OAAAH,IAAA+3B,UAAA,IAAA53B,OAAAH,IAAAg4B,YACAL,OAAA,GAEA,MAAAzf,IAIAyf,MACAN,UAAAl3B,OAAAH,IAAAg4B,UAEA,oBAAAA,YACAX,UAAAW,UACAX,WAAA,MAAAA,UAAA,KACAA,UAAAxB,SAAAoC,SAAA,KAAApC,SAAAqC,SAAAb,WAEAC,cAAAa,eAGA,IAAAC,OAAAC,GAAAC,QAAAjB,UAAA,CACAkB,MAAA,OAAAjB,cACAkB,qBAAA,IACAC,4BAAA9qB,EAAAA,EACA+qB,QAAA,oBAAAC,uBAAAA,2BAAAxqB,EACAyqB,gBAAA,oBAAAD,sBAAAA,2BAAAxqB,EACA0qB,WAAA,oBAAAF,uBAAAA,sBAAA,CAAA,kBAAAxqB,IAkDA,SAAA2qB,QAAAtD,EAAAluB,EAAAyxB,EAAAC,GA8CA,OA7CAxD,EAAA,IAAAnY,KAAAmY,GAEA,iBAAAluB,EACA,MAAAA,EAAA,IACAA,EAAAlM,SAAAkM,EAAA,IACAkuB,EAAAxU,SAAA+X,EAAAvD,EAAA9W,WAAApX,EAAAkuB,EAAA9W,WAAApX,GACAkuB,EAAAA,EAAAlY,WACA,MAAAhW,EAAA,IACAA,EAAAlM,SAAAkM,EAAA,IACAkuB,EAAAvU,YAAA8X,EAAAvD,EAAA1W,cAAAxX,EAAAkuB,EAAA1W,cAAAxX,GACAkuB,EAAAA,EAAAlY,YAEAkY,EAAAA,EAAAlY,UACA0b,EACAD,EACAvD,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,GAEAkuB,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,GAIAyxB,EACAvD,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,GAEAkuB,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,KAKAkuB,EAAAA,EAAAlY,UACA0b,EACAD,EACAvD,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,GAEAkuB,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,GAIAyxB,EACAvD,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,GAEAkuB,GAAA,KAAAp6B,SAAAkM,EAAA,KAAA,IAIAkuB,EAGA,SAAAyD,aAAA9W,EAAAxB,GACA,IA4CA7Q,EACAsR,EAaA/C,EA1DA+T,EAAA,GAQA,GAJAxC,OAAAnV,EAAA0H,GAAA7a,OAAAsoB,OAAAnV,EAAA0H,GAAA7a,QAAA,GAEA,IAAAsoB,OAAA7K,MAAA5U,QAAA,MAEA,EAAAyf,OAAAnV,EAAAhgB,OAEA,IADA,IAAAy+B,EAAA99B,SAAAw0B,OAAA7K,MAAA,KAAA,EACA5qB,EAAA,EAAAA,EAAAy1B,OAAAnV,EAAAhgB,OAAAN,IACA,GAAAy1B,OAAAnV,EAAAtgB,GAAAmN,QAAA,IAAAsoB,OAAAnV,EAAAtgB,GAAAmN,OAAA,CAGA,IADA6xB,EAAAL,QAAArI,IAAAb,OAAAnV,EAAA,GAAAnT,QACA8xB,EAAA,IAAA/b,KAAA8b,GACAC,EAAApY,SAAAoY,EAAA1a,WAAAwa,GACAtJ,OAAA7K,MAAA/a,KAAAmF,OAAAgqB,EAAAC,EAAA9b,WAAA,KAAA,GACA,MAKA,OAAAsS,OAAAyJ,QACAjC,WAAAjV,GAAAf,IAAAwO,OAAAnV,EAAA0H,GAAAmX,KACAlC,WAAAjV,GAAArS,MAAA8f,OAAAnV,EAAA0H,GAAAoX,KACAnC,WAAAjV,IAEAxB,GA4GAyR,EAAA,CACAtiB,MAHAA,GADAsR,EAAA0X,QAAArI,IAAAb,OAAAnV,EAAA0H,GAAA7a,SACAqZ,EAIAS,IAAAA,EACAoY,iBAAArrB,IAAAyhB,OAAAnV,EAAA0H,GAAAqX,WAAA5J,OAAAA,OAAAnV,EAAA0H,IAAAqX,WACA/C,UAAA7G,OAAAnV,EAAA0H,GAAAsU,WAAA7G,OAAA6G,WAAA,SACAgD,MAAA,GAGArC,WAAAjV,GAAAf,IAAAA,EACAgW,WAAAjV,GAAArS,MAAAgpB,QAAA1X,EAAAwO,OAAA7K,OAAA,GAAA,GACAqN,IArHA,WAAAxC,OAAAqH,UAIAtK,OADAxe,IAAAyhB,OAAA8J,WACA9J,OAAA8J,WAAAjL,MAAA,KAAAkL,IAAAltB,QAEA,CAAA,EAAA,GAIAmtB,OADAzrB,IAAAyhB,OAAAiK,SACAjK,OAAAiK,SAAApL,MAAA,KAAAkL,IAAAltB,QAEA,CAAA,GAAA,GAIAqD,EAAA,IAAAuN,KAAAuS,OAAA9f,OAAAiR,SAAA4L,EAAA,GAAAA,EAAA,IACAvL,EAAA,IAAA/D,KAAAuS,OAAAxO,KAAAL,SAAA6Y,EAAA,GAAAA,EAAA,IACA9pB,EAAAgpB,QAAAhpB,EAAA8f,OAAAnV,EAAA0H,GAAA7a,QACA8Z,EAAA0X,QAAA1X,EAAAwO,OAAAnV,EAAA0H,GAAA7a,UAEA,QAAAsoB,OAAAiH,YACAsC,EAAA,IAAA9b,KAAAoT,MACA,IAAAb,OAAAiH,YAAA1mB,QAAA,WACA2pB,EAAA1+B,SAAAw0B,OAAAiH,YAAA,KAAA,GACAsC,EAAA,IAAA9b,KAAAoT,MACA3P,WAAA9W,KAAAmF,MAAAgqB,EAAAva,aAAAkb,GAAAA,EAAAA,GACAX,EAAAtY,WAAA,GACAsY,EAAAjY,gBAAA,KACA,IAAA0O,OAAAiH,YAAA1mB,QAAA,SACAkO,EAAAjjB,SAAAw0B,OAAAiH,YAAA,KAAA,GACAsC,EAAA,IAAA9b,KAAAoT,MACA1P,SAAA/W,KAAAmF,MAAAgqB,EAAA7a,WAAAD,GAAAA,EAAAA,GACA8a,EAAArY,WAAA,GACAqY,EAAAtY,WAAA,GACAsY,EAAAjY,gBAAA,IACA,UAAA0O,OAAAiH,cACAsC,EAAA,IAAA9b,KAAAoT,MACAtP,QAAAgY,EAAAxa,UAAA,GACAwa,EAAApY,SAAA,GACAoY,EAAArY,WAAA,GACAqY,EAAAtY,WAAA,GACAsY,EAAAjY,gBAAA,IACA,YAAA0O,OAAAiH,cAEAsC,EAAA,IAAA9b,KAAAoT,MACAtP,QAAAgY,EAAAxa,UAAAwa,EAAA1a,SAAA,GACA0a,EAAApY,SAAA,GACAoY,EAAArY,WAAA,GACAqY,EAAAtY,WAAA,GACAsY,EAAAjY,gBAAA,IACA,eAAA0O,OAAAiH,aAIA,KAFAsC,EAAA,IAAA9b,KAAAoT,MAEAhS,SACA0a,EAAAhY,QAAAgY,EAAAxa,UAAA,GAEAwa,EAAAhY,QAAAgY,EAAAxa,UAAAwa,EAAA1a,SAAA,GAEA0a,EAAApY,SAAA,GACAoY,EAAArY,WAAA,GACAqY,EAAAtY,WAAA,GACAsY,EAAAjY,gBAAA,IACA,UAAA0O,OAAAiH,cACAsC,EAAA,IAAA9b,KAAAoT,MACAzP,SAAAmY,EAAAza,WAAA,GACAya,EAAAhY,QAAA,GACAgY,EAAApY,SAAA,GACAoY,EAAArY,WAAA,GACAqY,EAAAtY,WAAA,GACAsY,EAAAjY,gBAAA,IACA,SAAA0O,OAAAiH,eACAsC,EAAA,IAAA9b,KAAAoT,MACAxP,YAAAkY,EAAAra,cAAA,GACAqa,EAAAnY,SAAA,GACAmY,EAAAhY,QAAA,GACAgY,EAAApY,SAAA,GACAoY,EAAArY,WAAA,GACAqY,EAAAtY,WAAA,GACAsY,EAAAjY,gBAAA,IAGAE,EAAA0X,QAAAK,EAAAvJ,OAAAnV,EAAA0H,GAAA7a,QACAwI,EAAAgpB,QAAA1X,EAAAwO,OAAA7K,OAAA,GAAA,IAGAqN,EAAA,CACAtiB,MAAAA,EACAsR,IAAAA,EACAoY,iBAAArrB,IAAAyhB,OAAAnV,EAAA0H,GAAAqX,WAAA5J,OAAAA,OAAAnV,EAAA0H,IAAAqX,WACA/C,UAAA7G,OAAAnV,EAAA0H,GAAAsU,WAAA7G,OAAA6G,WAAA,UAGA,SAAA7G,OAAA+G,cACAvE,EAAAzR,KAAA,IAAAiP,OAAAgH,cACA,UAAAhH,OAAA+G,gBACAvE,EAAAqH,MAAA7J,OAAAgH,eAAAl3B,SAAAq6B,eAAA,mBAAAC,YAAA,IAGA5C,WAAAjV,GAAAiQ,GAsBA,SAAA6H,MAAAxpB,EAAAzU,GAUA,OATAyU,EAAA,IAAA4M,KAAA5M,GACA,eAAAzU,EAAAyU,EAAAoQ,WAAA,EAAA,GACA,aAAA7kB,EAAAyU,EAAAqQ,WAAA,EAAA,EAAA,GACA,YAAA9kB,EAAAyU,EAAAsQ,SAAA,EAAA,EAAA,EAAA,GACA,aAAA/kB,GACAyU,EAAAsQ,SAAA,EAAA,EAAA,EAAA,GACAtQ,EAAA0Q,QAAA1Q,EAAAkO,WAAAlO,EAAAgO,SAAA,GAAA,IACA,cAAAziB,GAAAyU,EAAAsQ,SAAA,EAAA,EAAA,EAAA,GAAAtQ,EAAA0Q,QAAA,IACA,aAAAnlB,IAAAyU,EAAAsQ,SAAA,EAAA,EAAA,EAAA,GAAAtQ,EAAAuQ,SAAA,EAAA,IACAvQ,EAAA6M,UAGA,SAAA4c,aAAA3T,EAAAwQ,EAAA5U,EAAAgY,GAEA,IAAA/H,EAAA6G,aAAA9W,GAIAiY,GAHAhI,EAAA2E,SAAAA,EACA3E,EAAAuD,UAAAA,UACA/F,OAAAnV,EAAA0H,GAAAqS,QAAAt4B,WAAA0zB,OAAAnV,EAAA0H,GAAAqS,UAAA,EACA5E,OAAAnV,EAAA0H,GAAAiY,cAAAl+B,WAAA0zB,OAAAnV,EAAA0H,GAAAiY,eAAA,GAEA5W,QAAApU,IAAA,IAAAiO,KAAA+U,EAAAtiB,OAAA,MAAA,IAAAuN,KAAA+U,EAAAhR,MACAgX,OAAAiC,KAAA,aAAA9T,EAAA6L,EAAA,SAAAkI,EAAAv+B,EAAAw+B,EAAAC,GAGA,GAFAF,GAAA9W,QAAAiX,MAAAH,GAEA3E,WAAA6E,GAAAA,IAAA7E,UACA,OAAAnS,QAAAkX,KAAA,iCAAAF,EAAA,eAAA7E,WAGA,IAAA2E,GAAAv+B,EAAA,CAEAq2B,EAAAoC,QAAA5E,OAAAnV,EAAA0H,GAAAqS,QAIA,IAFA,IAAAmG,EAAA9K,WAAA1N,GAEA3nB,EAAA,EAAAA,EAAAuB,EAAAtB,OAAAD,IAEA,SAAAuB,EAAAvB,GAAA4R,MAAA,IAAArQ,EAAAvB,GAAA4R,IACArQ,EAAAvB,GAAA4R,IAAA,EACA,UAAArQ,EAAAvB,GAAA4R,MAAA,IAAArQ,EAAAvB,GAAA4R,MACArQ,EAAAvB,GAAA4R,IAAA,GAEA,iBAAArQ,EAAAvB,GAAA4R,MAAArQ,EAAAvB,GAAA4R,IAAAlQ,WAAAH,EAAAvB,GAAA4R,MAEAuuB,EAAAnvB,KAAA,CAAAokB,OAAAnV,EAAA0H,GAAA8X,MAAAA,MAAAl+B,EAAAvB,GAAAiW,GAAAmf,OAAAnV,EAAA0H,GAAA8X,OAAAl+B,EAAAvB,GAAAiW,GAAA,OAAA1U,EAAAvB,GAAA4R,IAAArQ,EAAAvB,GAAA4R,IAAAguB,EAAAhI,EAAAoC,QAAA,OAGAmG,EAAAlgC,QACAkgC,EAAA,GAAA,GAAAvI,EAAAtiB,OAAA6qB,EAAA1R,QAAA,CAAAmJ,EAAAtiB,MAAA,OACA6qB,EAAAA,EAAAlgC,OAAA,GAAA,GAAA23B,EAAAhR,KAAAuZ,EAAAnvB,KAAA,CAAA4mB,EAAAhR,IAAA,SAEAuZ,EAAAnvB,KAAA,CAAA4mB,EAAAtiB,MAAA,OACA6qB,EAAAnvB,KAAA,CAAA4mB,EAAAhR,IAAA,QAGArlB,EAAA,KAGAo+B,GAAAA,EAAA5T,EAAApE,KAIA,SAAAyY,UAAArU,EAAApE,EAAAgY,GACA/B,OAAAiC,KAAA,WAAA9T,EAAA,SAAA+T,EAAAO,GAEAV,EAAAhY,EADA0Y,GACA3+B,WAAA2+B,EAAAzuB,MAEA,KAKA,SAAA0uB,eACA/K,MAAA,IAAAJ,YAAA,CACAyE,QAAAmD,MACA3F,QAAA,QACA0C,UAAA,UACAO,SAAAkG,QACAnL,OAAAC,WAAAD,OAAA5zB,EAAA+G,OAEA6sB,OAAA/F,OACAhwB,EAAA,cAAAmR,OAAA,SAAAiN,MAAA,WACA4X,WAAA,GACAh2B,EAAA,cAAA4hB,OACAmU,OAAAyJ,QAAA,EACA5I,IAAA,IAAApT,KACA2d,UAAA,KAIAnhC,EAAA,IAAA09B,OA0BAvsB,OAAA,cACAiwB,GAAA,aAAA,SAAA/iB,GACAA,EAAA6R,iBACA0N,WAAA,EACAyD,EAAAhjB,EAAAgjB,SAAAhjB,EAAAijB,cAAAD,QACAA,IACA1D,MAAA0D,EAAAA,EAAAzgC,OAAA,GAAA+d,MAEAkf,UADA,EAAAwD,EAAAzgC,OACAuP,KAAAqI,IAAA6oB,EAAA,GAAA1iB,MAAA0iB,EAAA,GAAA1iB,OAEA,QAIAxN,OAAA,YACAiwB,GAAA,WAAA,SAAA/iB,GACAA,EAAA6R,iBACA0N,WAAA,EACA3C,aAAAtmB,aAAAsmB,aACAA,YAAA/a,WAAAghB,OAAA,OAEA/vB,OAAA,aACAiwB,GAAA,YAAA,SAAA/iB,GACAA,EAAA6R,iBACA,IAGAvR,EAGAtX,EAGAwpB,EATAwQ,EAAAhjB,EAAAgjB,SAAAhjB,EAAAijB,cAAAD,QACAA,IACAzD,YACAjf,EAAA0iB,EAAAA,EAAAzgC,OAAA,GAAA+d,MACA,EAAA0iB,EAAAzgC,QAEAyG,EAAA8I,KAAAqI,IAAA6oB,EAAA,GAAA1iB,MAAA0iB,EAAA,GAAA1iB,OAEA,OAAAkf,WAAAx2B,IAAAw2B,YACAhN,EAAAgN,UAAAx2B,EAAA,IAAA,GACAu0B,EAAAyF,EAAA,GAAA1iB,MAAA0iB,EAAA,GAAA1iB,MAAA0iB,EAAA,GAAA1iB,MAAAtX,EAAA,EAAAg6B,EAAA,GAAA1iB,MAAAtX,EAAA,EAEA6uB,MAAAlG,KAAA4L,EAAA/K,GAEAoK,aAAAtmB,aAAAsmB,aACAA,YAAA/a,WAAAghB,OAAA,MAEArD,UAAAx2B,GAGA6uB,MAAA1F,IAAAmN,MAAAhf,IAGAgf,MAAAhf,MAIAoX,OAAAwL,MAAA,aAAAxL,OAAAqH,YACA,IAAArH,OAAAwL,MAAA,SAAAxL,OAAAwL,OACAxL,OAAAwL,KAAA,IAEAxL,OAAAwL,KAAAhgC,SAAAw0B,OAAAwL,KAAA,KAAA,GACAC,mBAIA,SAAAC,aAAAnZ,EAAAoZ,GACAnD,OAAAiC,KAAA,YAAAzK,OAAAnV,EAAA0H,GAAAoE,GAAA,SAAA+T,EAAAv+B,IACAu+B,GAAAv+B,GAAAA,EAAAy/B,QACA5L,OAAAnV,EAAA0H,GAAAhmB,KAAAyzB,OAAAnV,EAAA0H,GAAAhmB,MAAAJ,EAAAy/B,OAAAr/B,KACAyzB,OAAAnV,EAAA0H,GAAAzB,KAAAkP,OAAAnV,EAAA0H,GAAAzB,OAAA3kB,EAAAy/B,OAAA9a,KAAA3kB,EAAAy/B,OAAA9a,KAAA9W,QAAA,IAAA,KAAA,IACAgmB,OAAAnV,EAAA0H,GAAAW,KAAA/mB,EAAAy/B,OAAA1Y,OAEA8M,OAAAnV,EAAA0H,GAAAhmB,KAAAyzB,OAAAnV,EAAA0H,GAAAhmB,MAAAyzB,OAAAnV,EAAA0H,GAAAoE,GACAqJ,OAAAnV,EAAA0H,GAAAzB,KAAAkP,OAAAnV,EAAA0H,GAAAzB,MAAA,IAEA,iBAAAkP,OAAAnV,EAAA0H,GAAAhmB,OACAyzB,OAAAnV,EAAA0H,GAAAhmB,KAAAyzB,OAAAnV,EAAA0H,GAAAhmB,KAAAy0B,aAAAhB,OAAAnV,EAAA0H,GAAAhmB,KAAA+yB,IAEAgL,aAAAtK,OAAAnV,EAAA0H,GAAAoE,GAAAqJ,OAAAnV,EAAA0H,GAAA4U,SAAA5U,EAAAoZ,KAIA,SAAAE,UAAAtB,GACAvK,OAAA7sB,MAGAq1B,OAAAiC,KAAA,YAAAzK,OAAA7sB,MAAA,SAAAu3B,EAAAv+B,GACA,IACAq2B,EAAA4D,KAAAn6B,MAAAm6B,KAAAC,UAAAgD,aADA,KAEA7G,EAAA2E,SAAAnH,OAAAnV,EAFA,GAEAsc,SACA3E,EAAAuD,UAAAA,UACAvD,EAAAqE,UAAA,WAGAjT,QAAApU,IAAA,UAAA,IAAAiO,KAAA+U,EAAAtiB,OAAA,MAAA,IAAAuN,KAAA+U,EAAAhR,MACAgX,OAAAiC,KAAA,aAAAzK,OAAA7sB,MAAAqvB,EAAA,SAAAkI,EAAAv+B,EAAAw+B,EAAAC,GAGA,GAFAF,GAAA9W,QAAAiX,MAAAH,GAEA3E,WAAA6E,GAAAA,IAAA7E,UACAnS,QAAAkX,KAAA,iCAAAF,EAAA,eAAA7E,eADA,CAKA,IAAA2E,GAAAv+B,EAAA,CACA,IAAA4+B,EAAA53B,OAAA,GACAA,OAAAA,MAAAtI,QAAAsI,MAAAqX,OAAA,EAAArX,MAAAtI,QAEA,IAAA,IAAAD,EAAA,EAAAA,EAAAuB,EAAAtB,OAAAD,IACA,QAAAuB,EAAAvB,GAAA4R,KAAAuuB,EAAAnvB,KAAA,CAAAzP,EAAAvB,GAAAiW,GAAA1U,EAAAvB,GAAA4R,MAGAuuB,EAAAlgC,QACAkgC,EAAA,GAAA,GAAAvI,EAAAtiB,OAAA6qB,EAAA1R,QAAA,CAAAmJ,EAAAtiB,MAAA,KACA6qB,EAAAA,EAAAlgC,OAAA,GAAA,GAAA23B,EAAAhR,KAAAuZ,EAAAnvB,KAAA,CAAA4mB,EAAAhR,IAAA,OAEAuZ,EAAAnvB,KAAA,CAAA4mB,EAAAtiB,MAAA,KACA6qB,EAAAnvB,KAAA,CAAA4mB,EAAAhR,IAAA,MAGArlB,EAAA,KACAgH,MAAA43B,EAEAR,GAAAA,EAAAQ,QAtCAR,GAAAA,EAAA,MA4CA,SAAAuB,aAAAH,EAAAv/B,GAEA,GADAA,EAAAA,GAAA,GACA4zB,OAAA5zB,IAAA4zB,OAAA5zB,EAAAvB,QAAAuB,GAAA4zB,OAAA5zB,EAAAvB,OACA,OAAA8gC,GAAAA,KAEA3L,OAAA5zB,EAAAA,GAAA2/B,KAAA/L,OAAA5zB,EAAAA,GAAAgQ,GAAA9P,WAAA0zB,OAAA5zB,EAAAA,GAAAgQ,IAAA4jB,OAAA5zB,EAAAA,GAAAgQ,IAAA,IAAA4jB,OAAA5zB,EAAAA,GAAAgQ,EAAAmE,QAAA,OACA,IAAAynB,WAAAznB,QAAAyf,OAAA5zB,EAAAA,GAAAgQ,IAAA4rB,WAAApsB,KAAAokB,OAAA5zB,EAAAA,GAAAgQ,GAEA4uB,UAAAhL,OAAA5zB,EAAAA,GAAAgQ,EAAAhQ,EAAA,SAAAmmB,EAAA/V,GACAwjB,OAAA5zB,EAAAmmB,GAAAwZ,IAAA/L,OAAA5zB,EAAAmmB,GAAAnW,EACA4jB,OAAA5zB,EAAAmmB,GAAAnW,EAAAI,GAEAwjB,OAAA5zB,EAAAA,GAAA4/B,MAAAhM,OAAA5zB,EAAAA,GAAAy1B,IAAAv1B,WAAA0zB,OAAA5zB,EAAAA,GAAAy1B,KAAA7B,OAAA5zB,EAAAA,GAAAy1B,KAAA,IAAA7B,OAAA5zB,EAAAA,GAAAy1B,GAAAthB,QAAA,OACA,IAAAynB,WAAAznB,QAAAyf,OAAA5zB,EAAAA,GAAAy1B,KAAAmG,WAAApsB,KAAAokB,OAAA5zB,EAAAA,GAAAy1B,IACAmJ,UAAAhL,OAAA5zB,EAAAA,GAAAy1B,GAAAz1B,EAAA,SAAAmmB,EAAA/V,GACAwjB,OAAA5zB,EAAAmmB,GAAAyZ,KAAAhM,OAAA5zB,EAAAmmB,GAAAsP,GACA7B,OAAA5zB,EAAAmmB,GAAAsP,GAAArlB,EACA2N,WAAA2hB,aAAA,EAAAH,EAAAv/B,EAAA,MAGA+d,WAAA2hB,aAAA,EAAAH,EAAAv/B,EAAA,OAIA4zB,OAAA5zB,EAAAA,GAAA4/B,MAAAhM,OAAA5zB,EAAAA,GAAAy1B,IAAAv1B,WAAA0zB,OAAA5zB,EAAAA,GAAAy1B,KAAA7B,OAAA5zB,EAAAA,GAAAy1B,KAAA,IAAA7B,OAAA5zB,EAAAA,GAAAy1B,GAAAthB,QAAA,OACA,IAAAynB,WAAAznB,QAAAyf,OAAA5zB,EAAAA,GAAAy1B,KAAAmG,WAAApsB,KAAAokB,OAAA5zB,EAAAA,GAAAy1B,IACAmJ,UAAAhL,OAAA5zB,EAAAA,GAAAy1B,GAAAz1B,EAAA,SAAAmmB,EAAA/V,GACAwjB,OAAA5zB,EAAAmmB,GAAAyZ,KAAAhM,OAAA5zB,EAAAmmB,GAAAsP,GACA7B,OAAA5zB,EAAAmmB,GAAAsP,GAAArlB,EACA2N,WAAA2hB,aAAA,EAAAH,EAAAv/B,EAAA,MAGA+d,WAAA2hB,aAAA,EAAAH,EAAAv/B,EAAA,GAKA,SAAA6/B,UAAA1B,EAAAluB,GAEA,IADAA,EAAAA,GAAA,IACA2jB,OAAAnV,EAAAhgB,OACA,OAAA0/B,GAAAA,IAEA,KAAAvK,OAAAnV,EAAAxO,SAAAkC,IAAAyhB,OAAAnV,EAAAxO,IAAA4jB,WAAArkB,KAAA,IACA8vB,aAAArvB,EAAA,WACA8N,WAAA,WACA8hB,UAAA1B,EAAAluB,EAAA,IACA,MAKA,SAAA6vB,aAAAlE,EAAA2D,EAAAhwB,GACAA,EAAAA,GAAA,GACAqsB,IAAAA,EAAAn9B,QAAA8Q,GAAAqsB,EAAAn9B,OACA8gC,GAAAA,IAEAnD,OAAAiC,KAAA,YAAAzC,EAAArsB,GAAA,WACAwO,WAAA,WACA+hB,aAAAlE,EAAA2D,EAAAhwB,EAAA,IACA,KAKA,SAAAyvB,SAAApV,GACA8P,oBACA77B,EAAA,kBAAA4hB,OACAjN,aAAAknB,mBACAA,kBAAA,MAEAC,YAEA/F,OAAAnV,IACAmL,GAAA/rB,EAAA,sBAAAmI,OAmBA65B,UAAA,WACAJ,UAAA,SAAAM,GACAL,aAAA,WACA7D,aACAA,YAAA,EACAiE,gBAGAjiC,EAAA,sBAAA4hB,OACAqf,sBAMAlL,OAAAoH,QAEAn9B,EAAA,SACAmI,OACAiW,MAAA,WACA9X,OAAA67B,KAAAnG,SAAAC,KAAAlsB,QAAA,aAAA,aAAA,QACAqa,UAKA,SAAAoX,kBACAlE,aAAA8E,YAAA,WACA,GAAArM,OAAAyJ,OAAA,CAKA,IAJA,IAAAl+B,EAAA,EACAF,EAAA,KAGAknB,EAAA,EAAAA,EAAAyN,OAAAnV,EAAAhgB,OAAA0nB,IACAhnB,EAAAy0B,OAAAnV,EAAA0H,GAAAmX,OAAAn+B,EAAAy0B,OAAAnV,EAAA0H,GAAAmX,OACA,OAAAr+B,GAAAA,EAAA20B,OAAAnV,EAAA0H,GAAAoX,QAAAt+B,EAAA20B,OAAAnV,EAAA0H,GAAAoX,MAIA,KAAAp+B,GAAAA,EAAAF,GAAA,KAAA,IAAAoiB,MAAAC,WAUA,OAPA,IADA,IADAniB,GAAA,IAAAkiB,MAAAC,UAAAmT,IAAAnT,UACA6K,EAAA,GACA+T,EAAA,EAAAA,EAAAtM,OAAAnV,EAAAhgB,OAAAyhC,IACAtM,OAAAnV,EAAAyhB,GAAA5C,MAAAn+B,EACAy0B,OAAAnV,EAAAyhB,GAAA3C,MAAAp+B,EACAgtB,EAAA3c,KAAA,CAAAvQ,IAAA20B,OAAAnV,EAAAyhB,GAAA3C,KAAAp+B,IAAAy0B,OAAAnV,EAAAyhB,GAAA5C,OAEAvJ,MAAAsF,SAAAlN,GAMA3E,QAAApU,IAAA,WACA+sB,cACA,IAAAvM,OAAAwL,MAGA,SAAAe,aACA,IAAAC,EAAA,EACA3L,IAAA,IAAApT,KACAxjB,EAAA,WAAAmI,OACA2zB,YAEA/F,OAAA/F,MAAAkG,MAAAwF,UAAA9E,KAEA,IAAA,IAAAtO,EAAA,EAAAA,EAAAyN,OAAAnV,EAAAhgB,OAAA0nB,IACAia,IACAvM,WAAA1N,GAAA,GACA+X,aAAAtK,OAAAnV,EAAA0H,GAAAoE,GAAAqJ,OAAAnV,EAAA0H,GAAA4U,SAAA5U,EAAA,aACAia,GACAX,UAAA,SAAAM,GACAhM,MAAAgF,OAAAlF,WAAA,KAAAkM,GACAliC,EAAA,WAAA4hB,WAOA,SAAAoX,IAAA3nB,EAAA6Z,GAMA,IALA,IACAsX,EACAC,EAFAtiC,EAAA,GAKAQ,EAAA,EAAAA,EAAA0Q,EAAAzQ,OAAAD,IAAA,CAOA,GALA8hC,EADA9hC,EAAAuqB,EACA,EAEAvqB,EAAAuqB,EAAA,EAEAsX,EAAA,CAAAnxB,EAAA1Q,GAAA,GAAA,MACA,OAAA0Q,EAAA1Q,GAAA,GAAA,CAGA,IAAA,IAFA+Q,EAAA,EACAgxB,EAAA,EACAtwB,EAAAqwB,EAAArwB,GAAAzR,EAAAyR,IACA,OAAAf,EAAAe,GAAA,KACAV,GAAAL,EAAAe,GAAA,GACAswB,KAEAF,EAAA,GAAA9wB,EAAAgxB,EAEAviC,EAAAwR,KAAA6wB,GAEA,OAAAriC,EAGA,SAAA+gC,SACAnL,OAAAyJ,SACAx/B,EAAA,cAAAmI,OACA4tB,OAAAyJ,QAAA,GAKA,IAFA,IAAAlR,EAAA4H,MAAAqF,WAEAp7B,EAAA,EAAAA,EAAAmuB,EAAA1tB,OAAAT,IACA41B,OAAAnV,EAAAzgB,GAAAu/B,KAAApR,EAAAnuB,GAAAiB,IACA20B,OAAAnV,EAAAzgB,GAAAs/B,KAAAnR,EAAAnuB,GAAAmB,IAGAqoB,QAAApU,IAAA,WACA+sB,aA5rBA/D,OAAA6C,GAAA,UAAA,WACAvF,oBACA77B,EAAA,kBAAA4hB,OACAjN,aAAAknB,mBACAA,kBAAA,MAEA3b,WAAA,WACAqe,OAAAiC,KAAA,OAAA,SACA,IAEAtgB,WAAA,WACAihB,YACA,OAGA5C,OAAA6C,GAAA,cAAA,SAAA1U,EAAAsU,GACA,GAAA9K,OAAAH,QAAAA,OAAA5zB,EAAA,CAIAwnB,QAAApU,IAAAmX,EAAA,MAAAsU,EAAAzuB,KAEA,IAAA,IAAApQ,EAAA,EAAAA,EAAA4zB,OAAA5zB,EAAAvB,OAAAuB,IACA4zB,OAAA5zB,EAAAA,GAAA2/B,MAAApV,IACAqJ,OAAA5zB,EAAAA,GAAAgQ,EAAA9P,WAAA2+B,EAAAzuB,MAAA,GAEAwjB,OAAA5zB,EAAAA,GAAA4/B,OAAArV,IACAqJ,OAAA5zB,EAAAA,GAAAy1B,GAAAv1B,WAAA2+B,EAAAzuB,MAAA,GAGA2jB,MAAAgF,OAAA,KAAAnF,OAAA5zB,MAGA4zB,OAAA4M,WACA3iC,EAAA,QAAA2B,IAAA,aAAAo0B,OAAA4M,WAGApE,OAAA6C,GAAA,aAAA,WAEAvF,kBADAA,mBACA3b,WAAA,WACA2b,kBAAA,KAEA77B,EAAA,kBAAAmI,QACA","file":"flot.js","sourcesContent":["/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return\"rgb(\"+[o.r,o.g,o.b].join(\",\")+\")\"}else{return\"rgba(\"+[o.r,o.g,o.b,o.a].join(\",\")+\")\"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=\"\"&&c!=\"transparent\")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),\"body\"));if(c==\"rgba(0, 0, 0, 0)\")c=\"transparent\";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name==\"transparent\")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);(function($){var hasOwnProperty=Object.prototype.hasOwnProperty;if(!$.fn.detach){$.fn.detach=function(){return this.each(function(){if(this.parentNode){this.parentNode.removeChild(this)}})}}function Canvas(cls,container){var element=container.children(\".\"+cls)[0];if(element==null){element=document.createElement(\"canvas\");element.className=cls;$(element).css({direction:\"ltr\",position:\"absolute\",left:0,top:0}).appendTo(container);if(!element.getContext){if(window.G_vmlCanvasManager){element=window.G_vmlCanvasManager.initElement(element)}else{throw new Error(\"Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.\")}}}this.element=element;var context=this.context=element.getContext(\"2d\");var devicePixelRatio=window.devicePixelRatio||1,backingStoreRatio=context.webkitBackingStorePixelRatio||context.mozBackingStorePixelRatio||context.msBackingStorePixelRatio||context.oBackingStorePixelRatio||context.backingStorePixelRatio||1;this.pixelRatio=devicePixelRatio/backingStoreRatio;this.resize(container.width(),container.height());this.textContainer=null;this.text={};this._textCache={}}Canvas.prototype.resize=function(width,height){if(width<=0||height<=0){throw new Error(\"Invalid dimensions for plot, width = \"+width+\", height = \"+height)}var element=this.element,context=this.context,pixelRatio=this.pixelRatio;if(this.width!=width){element.width=width*pixelRatio;element.style.width=width+\"px\";this.width=width}if(this.height!=height){element.height=height*pixelRatio;element.style.height=height+\"px\";this.height=height}context.restore();context.save();context.scale(pixelRatio,pixelRatio)};Canvas.prototype.clear=function(){this.context.clearRect(0,0,this.width,this.height)};Canvas.prototype.render=function(){var cache=this._textCache;for(var layerKey in cache){if(hasOwnProperty.call(cache,layerKey)){var layer=this.getTextLayer(layerKey),layerCache=cache[layerKey];layer.hide();for(var styleKey in layerCache){if(hasOwnProperty.call(layerCache,styleKey)){var styleCache=layerCache[styleKey];for(var key in styleCache){if(hasOwnProperty.call(styleCache,key)){var positions=styleCache[key].positions;for(var i=0,position;position=positions[i];i++){if(position.active){if(!position.rendered){layer.append(position.element);position.rendered=true}}else{positions.splice(i--,1);if(position.rendered){position.element.detach()}}}if(positions.length==0){delete styleCache[key]}}}}}layer.show()}}};Canvas.prototype.getTextLayer=function(classes){var layer=this.text[classes];if(layer==null){if(this.textContainer==null){this.textContainer=$(\"<div class='flot-text'></div>\").css({position:\"absolute\",top:0,left:0,bottom:0,right:0,\"font-size\":\"smaller\",color:\"#545454\"}).insertAfter(this.element)}layer=this.text[classes]=$(\"<div></div>\").addClass(classes).css({position:\"absolute\",top:0,left:0,bottom:0,right:0}).appendTo(this.textContainer)}return layer};Canvas.prototype.getTextInfo=function(layer,text,font,angle,width){var textStyle,layerCache,styleCache,info;text=\"\"+text;if(typeof font===\"object\"){textStyle=font.style+\" \"+font.variant+\" \"+font.weight+\" \"+font.size+\"px/\"+font.lineHeight+\"px \"+font.family}else{textStyle=font}layerCache=this._textCache[layer];if(layerCache==null){layerCache=this._textCache[layer]={}}styleCache=layerCache[textStyle];if(styleCache==null){styleCache=layerCache[textStyle]={}}info=styleCache[text];if(info==null){var element=$(\"<div></div>\").html(text).css({position:\"absolute\",\"max-width\":width,top:-9999}).appendTo(this.getTextLayer(layer));if(typeof font===\"object\"){element.css({font:textStyle,color:font.color})}else if(typeof font===\"string\"){element.addClass(font)}info=styleCache[text]={width:element.outerWidth(true),height:element.outerHeight(true),element:element,positions:[]};element.detach()}return info};Canvas.prototype.addText=function(layer,x,y,text,font,angle,width,halign,valign){var info=this.getTextInfo(layer,text,font,angle,width),positions=info.positions;if(halign==\"center\"){x-=info.width/2}else if(halign==\"right\"){x-=info.width}if(valign==\"middle\"){y-=info.height/2}else if(valign==\"bottom\"){y-=info.height}for(var i=0,position;position=positions[i];i++){if(position.x==x&&position.y==y){position.active=true;return}}position={active:true,rendered:false,element:positions.length?info.element.clone():info.element,x:x,y:y};positions.push(position);position.element.css({top:Math.round(y),left:Math.round(x),\"text-align\":halign})};Canvas.prototype.removeText=function(layer,x,y,text,font,angle){if(text==null){var layerCache=this._textCache[layer];if(layerCache!=null){for(var styleKey in layerCache){if(hasOwnProperty.call(layerCache,styleKey)){var styleCache=layerCache[styleKey];for(var key in styleCache){if(hasOwnProperty.call(styleCache,key)){var positions=styleCache[key].positions;for(var i=0,position;position=positions[i];i++){position.active=false}}}}}}}else{var positions=this.getTextInfo(layer,text,font,angle).positions;for(var i=0,position;position=positions[i];i++){if(position.x==x&&position.y==y){position.active=false}}}};function Plot(placeholder,data_,options_,plugins){var series=[],options={colors:[\"#edc240\",\"#afd8f8\",\"#cb4b4b\",\"#4da74d\",\"#9440ed\"],legend:{show:true,noColumns:1,labelFormatter:null,labelBoxBorderColor:\"#ccc\",container:null,position:\"ne\",margin:5,backgroundColor:null,backgroundOpacity:.85,sorted:null},xaxis:{show:null,position:\"bottom\",mode:null,font:null,color:null,tickColor:null,transform:null,inverseTransform:null,min:null,max:null,autoscaleMargin:null,ticks:null,tickFormatter:null,labelWidth:null,labelHeight:null,reserveSpace:null,tickLength:null,alignTicksWithAxis:null,tickDecimals:null,tickSize:null,minTickSize:null},yaxis:{autoscaleMargin:.02,position:\"left\"},xaxes:[],yaxes:[],series:{points:{show:false,radius:3,lineWidth:2,fill:true,fillColor:\"#ffffff\",symbol:\"circle\"},lines:{lineWidth:2,fill:false,fillColor:null,steps:false},bars:{show:false,lineWidth:2,barWidth:1,fill:true,fillColor:null,align:\"left\",horizontal:false,zero:true},shadowSize:3,highlightColor:null},grid:{show:true,aboveData:false,color:\"#545454\",backgroundColor:null,borderColor:null,tickColor:null,margin:0,labelMargin:5,axisMargin:8,borderWidth:2,minBorderMargin:null,markings:null,markingsColor:\"#f4f4f4\",markingsLineWidth:2,clickable:false,hoverable:false,autoHighlight:true,mouseActiveRadius:10},interaction:{redrawOverlayInterval:1e3/60},hooks:{}},surface=null,overlay=null,eventHolder=null,ctx=null,octx=null,xaxes=[],yaxes=[],plotOffset={left:0,right:0,top:0,bottom:0},plotWidth=0,plotHeight=0,hooks={processOptions:[],processRawData:[],processDatapoints:[],processOffset:[],drawBackground:[],drawSeries:[],draw:[],bindEvents:[],drawOverlay:[],shutdown:[]},plot=this;plot.setData=setData;plot.setupGrid=setupGrid;plot.draw=draw;plot.getPlaceholder=function(){return placeholder};plot.getCanvas=function(){return surface.element};plot.getPlotOffset=function(){return plotOffset};plot.width=function(){return plotWidth};plot.height=function(){return plotHeight};plot.offset=function(){var o=eventHolder.offset();o.left+=plotOffset.left;o.top+=plotOffset.top;return o};plot.getData=function(){return series};plot.getAxes=function(){var res={},i;$.each(xaxes.concat(yaxes),function(_,axis){if(axis)res[axis.direction+(axis.n!=1?axis.n:\"\")+\"axis\"]=axis});return res};plot.getXAxes=function(){return xaxes};plot.getYAxes=function(){return yaxes};plot.c2p=canvasToAxisCoords;plot.p2c=axisToCanvasCoords;plot.getOptions=function(){return options};plot.highlight=highlight;plot.unhighlight=unhighlight;plot.triggerRedrawOverlay=triggerRedrawOverlay;plot.pointOffset=function(point){return{left:parseInt(xaxes[axisNumber(point,\"x\")-1].p2c(+point.x)+plotOffset.left,10),top:parseInt(yaxes[axisNumber(point,\"y\")-1].p2c(+point.y)+plotOffset.top,10)}};plot.shutdown=shutdown;plot.destroy=function(){shutdown();placeholder.removeData(\"plot\").empty();series=[];options=null;surface=null;overlay=null;eventHolder=null;ctx=null;octx=null;xaxes=[];yaxes=[];hooks=null;highlights=[];plot=null};plot.resize=function(){var width=placeholder.width(),height=placeholder.height();surface.resize(width,height);overlay.resize(width,height)};plot.hooks=hooks;initPlugins(plot);parseOptions(options_);setupCanvases();setData(data_);setupGrid();draw();bindEvents();function executeHooks(hook,args){args=[plot].concat(args);for(var i=0;i<hook.length;++i)hook[i].apply(this,args)}function initPlugins(){var classes={Canvas:Canvas};for(var i=0;i<plugins.length;++i){var p=plugins[i];p.init(plot,classes);if(p.options)$.extend(true,options,p.options)}}function parseOptions(opts){$.extend(true,options,opts);if(opts&&opts.colors){options.colors=opts.colors}if(options.xaxis.color==null)options.xaxis.color=$.color.parse(options.grid.color).scale(\"a\",.22).toString();if(options.yaxis.color==null)options.yaxis.color=$.color.parse(options.grid.color).scale(\"a\",.22).toString();if(options.xaxis.tickColor==null)options.xaxis.tickColor=options.grid.tickColor||options.xaxis.color;if(options.yaxis.tickColor==null)options.yaxis.tickColor=options.grid.tickColor||options.yaxis.color;if(options.grid.borderColor==null)options.grid.borderColor=options.grid.color;if(options.grid.tickColor==null)options.grid.tickColor=$.color.parse(options.grid.color).scale(\"a\",.22).toString();var i,axisOptions,axisCount,fontSize=placeholder.css(\"font-size\"),fontSizeDefault=fontSize?+fontSize.replace(\"px\",\"\"):13,fontDefaults={style:placeholder.css(\"font-style\"),size:Math.round(.8*fontSizeDefault),variant:placeholder.css(\"font-variant\"),weight:placeholder.css(\"font-weight\"),family:placeholder.css(\"font-family\")};axisCount=options.xaxes.length||1;for(i=0;i<axisCount;++i){axisOptions=options.xaxes[i];if(axisOptions&&!axisOptions.tickColor){axisOptions.tickColor=axisOptions.color}axisOptions=$.extend(true,{},options.xaxis,axisOptions);options.xaxes[i]=axisOptions;if(axisOptions.font){axisOptions.font=$.extend({},fontDefaults,axisOptions.font);if(!axisOptions.font.color){axisOptions.font.color=axisOptions.color}if(!axisOptions.font.lineHeight){axisOptions.font.lineHeight=Math.round(axisOptions.font.size*1.15)}}}axisCount=options.yaxes.length||1;for(i=0;i<axisCount;++i){axisOptions=options.yaxes[i];if(axisOptions&&!axisOptions.tickColor){axisOptions.tickColor=axisOptions.color}axisOptions=$.extend(true,{},options.yaxis,axisOptions);options.yaxes[i]=axisOptions;if(axisOptions.font){axisOptions.font=$.extend({},fontDefaults,axisOptions.font);if(!axisOptions.font.color){axisOptions.font.color=axisOptions.color}if(!axisOptions.font.lineHeight){axisOptions.font.lineHeight=Math.round(axisOptions.font.size*1.15)}}}if(options.xaxis.noTicks&&options.xaxis.ticks==null)options.xaxis.ticks=options.xaxis.noTicks;if(options.yaxis.noTicks&&options.yaxis.ticks==null)options.yaxis.ticks=options.yaxis.noTicks;if(options.x2axis){options.xaxes[1]=$.extend(true,{},options.xaxis,options.x2axis);options.xaxes[1].position=\"top\";if(options.x2axis.min==null){options.xaxes[1].min=null}if(options.x2axis.max==null){options.xaxes[1].max=null}}if(options.y2axis){options.yaxes[1]=$.extend(true,{},options.yaxis,options.y2axis);options.yaxes[1].position=\"right\";if(options.y2axis.min==null){options.yaxes[1].min=null}if(options.y2axis.max==null){options.yaxes[1].max=null}}if(options.grid.coloredAreas)options.grid.markings=options.grid.coloredAreas;if(options.grid.coloredAreasColor)options.grid.markingsColor=options.grid.coloredAreasColor;if(options.lines)$.extend(true,options.series.lines,options.lines);if(options.points)$.extend(true,options.series.points,options.points);if(options.bars)$.extend(true,options.series.bars,options.bars);if(options.shadowSize!=null)options.series.shadowSize=options.shadowSize;if(options.highlightColor!=null)options.series.highlightColor=options.highlightColor;for(i=0;i<options.xaxes.length;++i)getOrCreateAxis(xaxes,i+1).options=options.xaxes[i];for(i=0;i<options.yaxes.length;++i)getOrCreateAxis(yaxes,i+1).options=options.yaxes[i];for(var n in hooks)if(options.hooks[n]&&options.hooks[n].length)hooks[n]=hooks[n].concat(options.hooks[n]);executeHooks(hooks.processOptions,[options])}function setData(d){series=parseData(d);fillInSeriesOptions();processData()}function parseData(d){var res=[];for(var i=0;i<d.length;++i){var s=$.extend(true,{},options.series);if(d[i].data!=null){s.data=d[i].data;delete d[i].data;$.extend(true,s,d[i]);d[i].data=s.data}else s.data=d[i];res.push(s)}return res}function axisNumber(obj,coord){var a=obj[coord+\"axis\"];if(typeof a==\"object\")a=a.n;if(typeof a!=\"number\")a=1;return a}function allAxes(){return $.grep(xaxes.concat(yaxes),function(a){return a})}function canvasToAxisCoords(pos){var res={},i,axis;for(i=0;i<xaxes.length;++i){axis=xaxes[i];if(axis&&axis.used)res[\"x\"+axis.n]=axis.c2p(pos.left)}for(i=0;i<yaxes.length;++i){axis=yaxes[i];if(axis&&axis.used)res[\"y\"+axis.n]=axis.c2p(pos.top)}if(res.x1!==undefined)res.x=res.x1;if(res.y1!==undefined)res.y=res.y1;return res}function axisToCanvasCoords(pos){var res={},i,axis,key;for(i=0;i<xaxes.length;++i){axis=xaxes[i];if(axis&&axis.used){key=\"x\"+axis.n;if(pos[key]==null&&axis.n==1)key=\"x\";if(pos[key]!=null){res.left=axis.p2c(pos[key]);break}}}for(i=0;i<yaxes.length;++i){axis=yaxes[i];if(axis&&axis.used){key=\"y\"+axis.n;if(pos[key]==null&&axis.n==1)key=\"y\";if(pos[key]!=null){res.top=axis.p2c(pos[key]);break}}}return res}function getOrCreateAxis(axes,number){if(!axes[number-1])axes[number-1]={n:number,direction:axes==xaxes?\"x\":\"y\",options:$.extend(true,{},axes==xaxes?options.xaxis:options.yaxis)};return axes[number-1]}function fillInSeriesOptions(){var neededColors=series.length,maxIndex=-1,i;for(i=0;i<series.length;++i){var sc=series[i].color;if(sc!=null){neededColors--;if(typeof sc==\"number\"&&sc>maxIndex){maxIndex=sc}}}if(neededColors<=maxIndex){neededColors=maxIndex+1}var c,colors=[],colorPool=options.colors,colorPoolSize=colorPool.length,variation=0;for(i=0;i<neededColors;i++){c=$.color.parse(colorPool[i%colorPoolSize]||\"#666\");if(i%colorPoolSize==0&&i){if(variation>=0){if(variation<.5){variation=-variation-.2}else variation=0}else variation=-variation}colors[i]=c.scale(\"rgb\",1+variation)}var colori=0,s;for(i=0;i<series.length;++i){s=series[i];if(s.color==null){s.color=colors[colori].toString();++colori}else if(typeof s.color==\"number\")s.color=colors[s.color].toString();if(s.lines.show==null){var v,show=true;for(v in s)if(s[v]&&s[v].show){show=false;break}if(show)s.lines.show=true}if(s.lines.zero==null){s.lines.zero=!!s.lines.fill}s.xaxis=getOrCreateAxis(xaxes,axisNumber(s,\"x\"));s.yaxis=getOrCreateAxis(yaxes,axisNumber(s,\"y\"))}}function processData(){var topSentry=Number.POSITIVE_INFINITY,bottomSentry=Number.NEGATIVE_INFINITY,fakeInfinity=Number.MAX_VALUE,i,j,k,m,length,s,points,ps,x,y,axis,val,f,p,data,format;function updateAxis(axis,min,max){if(min<axis.datamin&&min!=-fakeInfinity)axis.datamin=min;if(max>axis.datamax&&max!=fakeInfinity)axis.datamax=max}$.each(allAxes(),function(_,axis){axis.datamin=topSentry;axis.datamax=bottomSentry;axis.used=false});for(i=0;i<series.length;++i){s=series[i];s.datapoints={points:[]};executeHooks(hooks.processRawData,[s,s.data,s.datapoints])}for(i=0;i<series.length;++i){s=series[i];data=s.data;format=s.datapoints.format;if(!format){format=[];format.push({x:true,number:true,required:true});format.push({y:true,number:true,required:true});if(s.bars.show||s.lines.show&&s.lines.fill){var autoscale=!!(s.bars.show&&s.bars.zero||s.lines.show&&s.lines.zero);format.push({y:true,number:true,required:false,defaultValue:0,autoscale:autoscale});if(s.bars.horizontal){delete format[format.length-1].y;format[format.length-1].x=true}}s.datapoints.format=format}if(s.datapoints.pointsize!=null)continue;s.datapoints.pointsize=format.length;ps=s.datapoints.pointsize;points=s.datapoints.points;var insertSteps=s.lines.show&&s.lines.steps;s.xaxis.used=s.yaxis.used=true;for(j=k=0;j<data.length;++j,k+=ps){p=data[j];var nullify=p==null;if(!nullify){for(m=0;m<ps;++m){val=p[m];f=format[m];if(f){if(f.number&&val!=null){val=+val;if(isNaN(val))val=null;else if(val==Infinity)val=fakeInfinity;else if(val==-Infinity)val=-fakeInfinity}if(val==null){if(f.required)nullify=true;if(f.defaultValue!=null)val=f.defaultValue}if(f.autoscale!==false){if(f.x){updateAxis(s.xaxis, val, val);}if(f.y){updateAxis(s.yaxis, val, val);}}}points[k+m]=val}}if(nullify){for(m=0;m<ps;++m){val=points[k+m];if(val!=null){f=format[m];if(f.autoscale!==false){if(f.x){updateAxis(s.xaxis,val,val)}if(f.y){updateAxis(s.yaxis,val,val)}}}points[k+m]=null}}else{if(insertSteps&&k>0&&points[k-ps]!=null&&points[k-ps]!=points[k]&&points[k-ps+1]!=points[k+1]){for(m=0;m<ps;++m)points[k+ps+m]=points[k+m];points[k+1]=points[k-ps+1];k+=ps}}}}for(i=0;i<series.length;++i){s=series[i];executeHooks(hooks.processDatapoints,[s,s.datapoints])}for(i=0;i<series.length;++i){s=series[i];points=s.datapoints.points;ps=s.datapoints.pointsize;format=s.datapoints.format;var xmin=topSentry,ymin=topSentry,xmax=bottomSentry,ymax=bottomSentry;for(j=0;j<points.length;j+=ps){if(points[j]==null)continue;for(m=0;m<ps;++m){val=points[j+m];f=format[m];if(!f||f.autoscale===false||val==fakeInfinity||val==-fakeInfinity)continue;if(f.x){if(val<xmin)xmin=val;if(val>xmax)xmax=val}if(f.y){if(val<ymin)ymin=val;if(val>ymax)ymax=val}}}if(s.bars.show){var delta;switch(s.bars.align){case\"left\":delta=0;break;case\"right\":delta=-s.bars.barWidth;break;default:delta=-s.bars.barWidth/2}if(s.bars.horizontal){ymin+=delta;ymax+=delta+s.bars.barWidth}else{xmin+=delta;xmax+=delta+s.bars.barWidth}}updateAxis(s.xaxis,xmin,xmax);updateAxis(s.yaxis,ymin,ymax)}$.each(allAxes(),function(_,axis){if(axis.datamin==topSentry)axis.datamin=null;if(axis.datamax==bottomSentry)axis.datamax=null})}function setupCanvases(){placeholder.css(\"padding\",0).children().filter(function(){return!$(this).hasClass(\"flot-overlay\")&&!$(this).hasClass(\"flot-base\")}).remove();if(placeholder.css(\"position\")==\"static\")placeholder.css(\"position\",\"relative\");surface=new Canvas(\"flot-base\",placeholder);overlay=new Canvas(\"flot-overlay\",placeholder);ctx=surface.context;octx=overlay.context;eventHolder=$(overlay.element).unbind();var existing=placeholder.data(\"plot\");if(existing){existing.shutdown();overlay.clear()}placeholder.data(\"plot\",plot)}function bindEvents(){if(options.grid.hoverable){eventHolder.mousemove(onMouseMove);eventHolder.bind(\"mouseleave\",onMouseLeave)}if(options.grid.clickable)eventHolder.click(onClick);executeHooks(hooks.bindEvents,[eventHolder])}function shutdown(){if(redrawTimeout)clearTimeout(redrawTimeout);eventHolder.unbind(\"mousemove\",onMouseMove);eventHolder.unbind(\"mouseleave\",onMouseLeave);eventHolder.unbind(\"click\",onClick);executeHooks(hooks.shutdown,[eventHolder])}function setTransformationHelpers(axis){function identity(x){return x}var s,m,t=axis.options.transform||identity,it=axis.options.inverseTransform;if(axis.direction==\"x\"){s=axis.scale=plotWidth/Math.abs(t(axis.max)-t(axis.min));m=Math.min(t(axis.max),t(axis.min))}else{s=axis.scale=plotHeight/Math.abs(t(axis.max)-t(axis.min));s=-s;m=Math.max(t(axis.max),t(axis.min))}if(t==identity)axis.p2c=function(p){return(p-m)*s};else axis.p2c=function(p){return(t(p)-m)*s};if(!it)axis.c2p=function(c){return m+c/s};else axis.c2p=function(c){return it(m+c/s)}}function measureTickLabels(axis){var opts=axis.options,ticks=axis.ticks||[],labelWidth=opts.labelWidth||0,labelHeight=opts.labelHeight||0,maxWidth=labelWidth||(axis.direction==\"x\"?Math.floor(surface.width/(ticks.length||1)):null),legacyStyles=axis.direction+\"Axis \"+axis.direction+axis.n+\"Axis\",layer=\"flot-\"+axis.direction+\"-axis flot-\"+axis.direction+axis.n+\"-axis \"+legacyStyles,font=opts.font||\"flot-tick-label tickLabel\";for(var i=0;i<ticks.length;++i){var t=ticks[i];if(!t.label)continue;var info=surface.getTextInfo(layer,t.label,font,null,maxWidth);labelWidth=Math.max(labelWidth,info.width);labelHeight=Math.max(labelHeight,info.height)}axis.labelWidth=opts.labelWidth||labelWidth;axis.labelHeight=opts.labelHeight||labelHeight}function allocateAxisBoxFirstPhase(axis){var lw=axis.labelWidth,lh=axis.labelHeight,pos=axis.options.position,isXAxis=axis.direction===\"x\",tickLength=axis.options.tickLength,axisMargin=options.grid.axisMargin,padding=options.grid.labelMargin,innermost=true,outermost=true,first=true,found=false;$.each(isXAxis?xaxes:yaxes,function(i,a){if(a&&(a.show||a.reserveSpace)){if(a===axis){found=true}else if(a.options.position===pos){if(found){outermost=false}else{innermost=false}}if(!found){first=false}}});if(outermost){axisMargin=0}if(tickLength==null){tickLength=first?\"full\":5}if(!isNaN(+tickLength))padding+=+tickLength;if(isXAxis){lh+=padding;if(pos==\"bottom\"){plotOffset.bottom+=lh+axisMargin;axis.box={top:surface.height-plotOffset.bottom,height:lh}}else{axis.box={top:plotOffset.top+axisMargin,height:lh};plotOffset.top+=lh+axisMargin}}else{lw+=padding;if(pos==\"left\"){axis.box={left:plotOffset.left+axisMargin,width:lw};plotOffset.left+=lw+axisMargin}else{plotOffset.right+=lw+axisMargin;axis.box={left:surface.width-plotOffset.right,width:lw}}}axis.position=pos;axis.tickLength=tickLength;axis.box.padding=padding;axis.innermost=innermost}function allocateAxisBoxSecondPhase(axis){if(axis.direction==\"x\"){axis.box.left=plotOffset.left-axis.labelWidth/2;axis.box.width=surface.width-plotOffset.left-plotOffset.right+axis.labelWidth}else{axis.box.top=plotOffset.top-axis.labelHeight/2;axis.box.height=surface.height-plotOffset.bottom-plotOffset.top+axis.labelHeight}}function adjustLayoutForThingsStickingOut(){var minMargin=options.grid.minBorderMargin,axis,i;if(minMargin==null){minMargin=0;for(i=0;i<series.length;++i)minMargin=Math.max(minMargin,2*(series[i].points.radius+series[i].points.lineWidth/2))}var margins={left:minMargin,right:minMargin,top:minMargin,bottom:minMargin};$.each(allAxes(),function(_,axis){if(axis.reserveSpace&&axis.ticks&&axis.ticks.length){if(axis.direction===\"x\"){margins.left=Math.max(margins.left,axis.labelWidth/2);margins.right=Math.max(margins.right,axis.labelWidth/2)}else{margins.bottom=Math.max(margins.bottom,axis.labelHeight/2);margins.top=Math.max(margins.top,axis.labelHeight/2)}}});plotOffset.left=Math.ceil(Math.max(margins.left,plotOffset.left));plotOffset.right=Math.ceil(Math.max(margins.right,plotOffset.right));plotOffset.top=Math.ceil(Math.max(margins.top,plotOffset.top));plotOffset.bottom=Math.ceil(Math.max(margins.bottom,plotOffset.bottom))}function setupGrid(){var i,axes=allAxes(),showGrid=options.grid.show;for(var a in plotOffset){var margin=options.grid.margin||0;plotOffset[a]=typeof margin==\"number\"?margin:margin[a]||0}executeHooks(hooks.processOffset,[plotOffset]);for(var a in plotOffset){if(typeof options.grid.borderWidth==\"object\"){plotOffset[a]+=showGrid?options.grid.borderWidth[a]:0}else{plotOffset[a]+=showGrid?options.grid.borderWidth:0}}$.each(axes,function(_,axis){var axisOpts=axis.options;axis.show=axisOpts.show==null?axis.used:axisOpts.show;axis.reserveSpace=axisOpts.reserveSpace==null?axis.show:axisOpts.reserveSpace;setRange(axis)});if(showGrid){var allocatedAxes=$.grep(axes,function(axis){return axis.show||axis.reserveSpace});$.each(allocatedAxes,function(_,axis){setupTickGeneration(axis);setTicks(axis);snapRangeToTicks(axis,axis.ticks);measureTickLabels(axis)});for(i=allocatedAxes.length-1;i>=0;--i)allocateAxisBoxFirstPhase(allocatedAxes[i]);adjustLayoutForThingsStickingOut();$.each(allocatedAxes,function(_,axis){allocateAxisBoxSecondPhase(axis)})}plotWidth=surface.width-plotOffset.left-plotOffset.right;plotHeight=surface.height-plotOffset.bottom-plotOffset.top;$.each(axes,function(_,axis){setTransformationHelpers(axis)});if(showGrid){drawAxisLabels()}insertLegend()}function setRange(axis){var opts=axis.options,min=+(opts.min!=null?opts.min:axis.datamin),max=+(opts.max!=null?opts.max:axis.datamax),delta=max-min;if(delta==0){var widen=max==0?1:.01;if(opts.min==null)min-=widen;if(opts.max==null||opts.min!=null)max+=widen}else{var margin=opts.autoscaleMargin;if(margin!=null){if(opts.min==null){min-=delta*margin;if(min<0&&axis.datamin!=null&&axis.datamin>=0)min=0}if(opts.max==null){max+=delta*margin;if(max>0&&axis.datamax!=null&&axis.datamax<=0)max=0}}}axis.min=min;axis.max=max}function setupTickGeneration(axis){var opts=axis.options;var noTicks;if(typeof opts.ticks==\"number\"&&opts.ticks>0)noTicks=opts.ticks;else noTicks=.3*Math.sqrt(axis.direction==\"x\"?surface.width:surface.height);var delta=(axis.max-axis.min)/noTicks,dec=-Math.floor(Math.log(delta)/Math.LN10),maxDec=opts.tickDecimals;if(maxDec!=null&&dec>maxDec){dec=maxDec}var magn=Math.pow(10,-dec),norm=delta/magn,size;if(norm<1.5){size=1}else if(norm<3){size=2;if(norm>2.25&&(maxDec==null||dec+1<=maxDec)){size=2.5;++dec}}else if(norm<7.5){size=5}else{size=10}size*=magn;if(opts.minTickSize!=null&&size<opts.minTickSize){size=opts.minTickSize}axis.delta=delta;axis.tickDecimals=Math.max(0,maxDec!=null?maxDec:dec);axis.tickSize=opts.tickSize||size;if(opts.mode==\"time\"&&!axis.tickGenerator){throw new Error(\"Time mode requires the flot.time plugin.\")}if(!axis.tickGenerator){axis.tickGenerator=function(axis){var ticks=[],start=floorInBase(axis.min,axis.tickSize),i=0,v=Number.NaN,prev;do{prev=v;v=start+i*axis.tickSize;ticks.push(v);++i}while(v<axis.max&&v!=prev);return ticks};axis.tickFormatter=function(value,axis){var factor=axis.tickDecimals?Math.pow(10,axis.tickDecimals):1;var formatted=\"\"+Math.round(value*factor)/factor;if(axis.tickDecimals!=null){var decimal=formatted.indexOf(\".\");var precision=decimal==-1?0:formatted.length-decimal-1;if(precision<axis.tickDecimals){return(precision?formatted:formatted+\".\")+(\"\"+factor).substr(1,axis.tickDecimals-precision)}}return formatted}}if($.isFunction(opts.tickFormatter))axis.tickFormatter=function(v,axis){return\"\"+opts.tickFormatter(v,axis)};if(opts.alignTicksWithAxis!=null){var otherAxis=(axis.direction==\"x\"?xaxes:yaxes)[opts.alignTicksWithAxis-1];if(otherAxis&&otherAxis.used&&otherAxis!=axis){var niceTicks=axis.tickGenerator(axis);if(niceTicks.length>0){if(opts.min==null)axis.min=Math.min(axis.min,niceTicks[0]);if(opts.max==null&&niceTicks.length>1)axis.max=Math.max(axis.max,niceTicks[niceTicks.length-1])}axis.tickGenerator=function(axis){var ticks=[],v,i;for(i=0;i<otherAxis.ticks.length;++i){v=(otherAxis.ticks[i].v-otherAxis.min)/(otherAxis.max-otherAxis.min);v=axis.min+v*(axis.max-axis.min);ticks.push(v)}return ticks};if(!axis.mode&&opts.tickDecimals==null){var extraDec=Math.max(0,-Math.floor(Math.log(axis.delta)/Math.LN10)+1),ts=axis.tickGenerator(axis);if(!(ts.length>1&&/\\..*0$/.test((ts[1]-ts[0]).toFixed(extraDec))))axis.tickDecimals=extraDec}}}}function setTicks(axis){var oticks=axis.options.ticks,ticks=[];if(oticks==null||typeof oticks==\"number\"&&oticks>0)ticks=axis.tickGenerator(axis);else if(oticks){if($.isFunction(oticks))ticks=oticks(axis);else ticks=oticks}var i,v;axis.ticks=[];for(i=0;i<ticks.length;++i){var label=null;var t=ticks[i];if(typeof t==\"object\"){v=+t[0];if(t.length>1)label=t[1]}else v=+t;if(label===null)label=axis.tickFormatter(v,axis);if(!isNaN(v))axis.ticks.push({v:v,label:label})}}function snapRangeToTicks(axis,ticks){if(axis.options.autoscaleMargin&&ticks.length>0){if(axis.options.min==null)axis.min=Math.min(axis.min,ticks[0].v);if(axis.options.max==null&&ticks.length>1)axis.max=Math.max(axis.max,ticks[ticks.length-1].v)}}function draw(){surface.clear();executeHooks(hooks.drawBackground,[ctx]);var grid=options.grid;if(grid.show&&grid.backgroundColor)drawBackground();if(grid.show&&!grid.aboveData){drawGrid()}for(var i=0;i<series.length;++i){executeHooks(hooks.drawSeries,[ctx,series[i]]);drawSeries(series[i])}executeHooks(hooks.draw,[ctx]);if(grid.show&&grid.aboveData){drawGrid()}surface.render();triggerRedrawOverlay()}function extractRange(ranges,coord){var axis,from,to,key,axes=allAxes();for(var i=0;i<axes.length;++i){axis=axes[i];if(axis.direction==coord){key=coord+axis.n+\"axis\";if(!ranges[key]&&axis.n==1)key=coord+\"axis\";if(ranges[key]){from=ranges[key].from;to=ranges[key].to;break}}}if(!ranges[key]){axis=coord==\"x\"?xaxes[0]:yaxes[0];from=ranges[coord+\"1\"];to=ranges[coord+\"2\"]}if(from!=null&&to!=null&&from>to){var tmp=from;from=to;to=tmp}return{from:from,to:to,axis:axis}}function drawBackground(){ctx.save();ctx.translate(plotOffset.left,plotOffset.top);ctx.fillStyle=getColorOrGradient(options.grid.backgroundColor,plotHeight,0,\"rgba(255, 255, 255, 0)\");ctx.fillRect(0,0,plotWidth,plotHeight);ctx.restore()}function drawGrid(){var i,axes,bw,bc;ctx.save();ctx.translate(plotOffset.left,plotOffset.top);var markings=options.grid.markings;if(markings){if($.isFunction(markings)){axes=plot.getAxes();axes.xmin=axes.xaxis.min;axes.xmax=axes.xaxis.max;axes.ymin=axes.yaxis.min;axes.ymax=axes.yaxis.max;markings=markings(axes)}for(i=0;i<markings.length;++i){var m=markings[i],xrange=extractRange(m,\"x\"),yrange=extractRange(m,\"y\");if(xrange.from==null)xrange.from=xrange.axis.min;if(xrange.to==null)xrange.to=xrange.axis.max;\r\nif(yrange.from==null)yrange.from=yrange.axis.min;if(yrange.to==null)yrange.to=yrange.axis.max;if(xrange.to<xrange.axis.min||xrange.from>xrange.axis.max||yrange.to<yrange.axis.min||yrange.from>yrange.axis.max)continue;xrange.from=Math.max(xrange.from,xrange.axis.min);xrange.to=Math.min(xrange.to,xrange.axis.max);yrange.from=Math.max(yrange.from,yrange.axis.min);yrange.to=Math.min(yrange.to,yrange.axis.max);var xequal=xrange.from===xrange.to,yequal=yrange.from===yrange.to;if(xequal&&yequal){continue}xrange.from=Math.floor(xrange.axis.p2c(xrange.from));xrange.to=Math.floor(xrange.axis.p2c(xrange.to));yrange.from=Math.floor(yrange.axis.p2c(yrange.from));yrange.to=Math.floor(yrange.axis.p2c(yrange.to));if(xequal||yequal){var lineWidth=m.lineWidth||options.grid.markingsLineWidth,subPixel=lineWidth%2?.5:0;ctx.beginPath();ctx.strokeStyle=m.color||options.grid.markingsColor;ctx.lineWidth=lineWidth;if(xequal){ctx.moveTo(xrange.to+subPixel,yrange.from);ctx.lineTo(xrange.to+subPixel,yrange.to)}else{ctx.moveTo(xrange.from,yrange.to+subPixel);ctx.lineTo(xrange.to,yrange.to+subPixel)}ctx.stroke()}else{ctx.fillStyle=m.color||options.grid.markingsColor;ctx.fillRect(xrange.from,yrange.to,xrange.to-xrange.from,yrange.from-yrange.to)}}}axes=allAxes();bw=options.grid.borderWidth;for(var j=0;j<axes.length;++j){var axis=axes[j],box=axis.box,t=axis.tickLength,x,y,xoff,yoff;if(!axis.show||axis.ticks.length==0)continue;ctx.lineWidth=1;if(axis.direction==\"x\"){x=0;if(t==\"full\")y=axis.position==\"top\"?0:plotHeight;else y=box.top-plotOffset.top+(axis.position==\"top\"?box.height:0)}else{y=0;if(t==\"full\")x=axis.position==\"left\"?0:plotWidth;else x=box.left-plotOffset.left+(axis.position==\"left\"?box.width:0)}if(!axis.innermost){ctx.strokeStyle=axis.options.color;ctx.beginPath();xoff=yoff=0;if(axis.direction==\"x\")xoff=plotWidth+1;else yoff=plotHeight+1;if(ctx.lineWidth==1){if(axis.direction==\"x\"){y=Math.floor(y)+.5}else{x=Math.floor(x)+.5}}ctx.moveTo(x,y);ctx.lineTo(x+xoff,y+yoff);ctx.stroke()}ctx.strokeStyle=axis.options.tickColor;ctx.beginPath();for(i=0;i<axis.ticks.length;++i){var v=axis.ticks[i].v;xoff=yoff=0;if(isNaN(v)||v<axis.min||v>axis.max||t==\"full\"&&(typeof bw==\"object\"&&bw[axis.position]>0||bw>0)&&(v==axis.min||v==axis.max))continue;if(axis.direction==\"x\"){x=axis.p2c(v);yoff=t==\"full\"?-plotHeight:t;if(axis.position==\"top\")yoff=-yoff}else{y=axis.p2c(v);xoff=t==\"full\"?-plotWidth:t;if(axis.position==\"left\")xoff=-xoff}if(ctx.lineWidth==1){if(axis.direction==\"x\")x=Math.floor(x)+.5;else y=Math.floor(y)+.5}ctx.moveTo(x,y);ctx.lineTo(x+xoff,y+yoff)}ctx.stroke()}if(bw){bc=options.grid.borderColor;if(typeof bw==\"object\"||typeof bc==\"object\"){if(typeof bw!==\"object\"){bw={top:bw,right:bw,bottom:bw,left:bw}}if(typeof bc!==\"object\"){bc={top:bc,right:bc,bottom:bc,left:bc}}if(bw.top>0){ctx.strokeStyle=bc.top;ctx.lineWidth=bw.top;ctx.beginPath();ctx.moveTo(0-bw.left,0-bw.top/2);ctx.lineTo(plotWidth,0-bw.top/2);ctx.stroke()}if(bw.right>0){ctx.strokeStyle=bc.right;ctx.lineWidth=bw.right;ctx.beginPath();ctx.moveTo(plotWidth+bw.right/2,0-bw.top);ctx.lineTo(plotWidth+bw.right/2,plotHeight);ctx.stroke()}if(bw.bottom>0){ctx.strokeStyle=bc.bottom;ctx.lineWidth=bw.bottom;ctx.beginPath();ctx.moveTo(plotWidth+bw.right,plotHeight+bw.bottom/2);ctx.lineTo(0,plotHeight+bw.bottom/2);ctx.stroke()}if(bw.left>0){ctx.strokeStyle=bc.left;ctx.lineWidth=bw.left;ctx.beginPath();ctx.moveTo(0-bw.left/2,plotHeight+bw.bottom);ctx.lineTo(0-bw.left/2,0);ctx.stroke()}}else{ctx.lineWidth=bw;ctx.strokeStyle=options.grid.borderColor;ctx.strokeRect(-bw/2,-bw/2,plotWidth+bw,plotHeight+bw)}}ctx.restore()}function drawAxisLabels(){$.each(allAxes(),function(_,axis){var box=axis.box,legacyStyles=axis.direction+\"Axis \"+axis.direction+axis.n+\"Axis\",layer=\"flot-\"+axis.direction+\"-axis flot-\"+axis.direction+axis.n+\"-axis \"+legacyStyles,font=axis.options.font||\"flot-tick-label tickLabel\",tick,x,y,halign,valign;surface.removeText(layer);if(!axis.show||axis.ticks.length==0)return;for(var i=0;i<axis.ticks.length;++i){tick=axis.ticks[i];if(!tick.label||tick.v<axis.min||tick.v>axis.max)continue;if(axis.direction==\"x\"){halign=\"center\";x=plotOffset.left+axis.p2c(tick.v);if(axis.position==\"bottom\"){y=box.top+box.padding}else{y=box.top+box.height-box.padding;valign=\"bottom\"}}else{valign=\"middle\";y=plotOffset.top+axis.p2c(tick.v);if(axis.position==\"left\"){x=box.left+box.width-box.padding;halign=\"right\"}else{x=box.left+box.padding}}surface.addText(layer,x,y,tick.label,font,null,null,halign,valign)}})}function drawSeries(series){if(series.lines.show)drawSeriesLines(series);if(series.bars.show)drawSeriesBars(series);if(series.points.show)drawSeriesPoints(series)}function drawSeriesLines(series){function plotLine(datapoints,xoffset,yoffset,axisx,axisy){var points=datapoints.points,ps=datapoints.pointsize,prevx=null,prevy=null;ctx.beginPath();for(var i=ps;i<points.length;i+=ps){var x1=points[i-ps],y1=points[i-ps+1],x2=points[i],y2=points[i+1];if(x1==null||x2==null)continue;if(y1<=y2&&y1<axisy.min){if(y2<axisy.min)continue;x1=(axisy.min-y1)/(y2-y1)*(x2-x1)+x1;y1=axisy.min}else if(y2<=y1&&y2<axisy.min){if(y1<axisy.min)continue;x2=(axisy.min-y1)/(y2-y1)*(x2-x1)+x1;y2=axisy.min}if(y1>=y2&&y1>axisy.max){if(y2>axisy.max)continue;x1=(axisy.max-y1)/(y2-y1)*(x2-x1)+x1;y1=axisy.max}else if(y2>=y1&&y2>axisy.max){if(y1>axisy.max)continue;x2=(axisy.max-y1)/(y2-y1)*(x2-x1)+x1;y2=axisy.max}if(x1<=x2&&x1<axisx.min){if(x2<axisx.min)continue;y1=(axisx.min-x1)/(x2-x1)*(y2-y1)+y1;x1=axisx.min}else if(x2<=x1&&x2<axisx.min){if(x1<axisx.min)continue;y2=(axisx.min-x1)/(x2-x1)*(y2-y1)+y1;x2=axisx.min}if(x1>=x2&&x1>axisx.max){if(x2>axisx.max)continue;y1=(axisx.max-x1)/(x2-x1)*(y2-y1)+y1;x1=axisx.max}else if(x2>=x1&&x2>axisx.max){if(x1>axisx.max)continue;y2=(axisx.max-x1)/(x2-x1)*(y2-y1)+y1;x2=axisx.max}if(x1!=prevx||y1!=prevy)ctx.moveTo(axisx.p2c(x1)+xoffset,axisy.p2c(y1)+yoffset);prevx=x2;prevy=y2;ctx.lineTo(axisx.p2c(x2)+xoffset,axisy.p2c(y2)+yoffset)}ctx.stroke()}function plotLineArea(datapoints,axisx,axisy){var points=datapoints.points,ps=datapoints.pointsize,bottom=Math.min(Math.max(0,axisy.min),axisy.max),i=0,top,areaOpen=false,ypos=1,segmentStart=0,segmentEnd=0;while(true){if(ps>0&&i>points.length+ps)break;i+=ps;var x1=points[i-ps],y1=points[i-ps+ypos],x2=points[i],y2=points[i+ypos];if(areaOpen){if(ps>0&&x1!=null&&x2==null){segmentEnd=i;ps=-ps;ypos=2;continue}if(ps<0&&i==segmentStart+ps){ctx.fill();areaOpen=false;ps=-ps;ypos=1;i=segmentStart=segmentEnd+ps;continue}}if(x1==null||x2==null)continue;if(x1<=x2&&x1<axisx.min){if(x2<axisx.min)continue;y1=(axisx.min-x1)/(x2-x1)*(y2-y1)+y1;x1=axisx.min}else if(x2<=x1&&x2<axisx.min){if(x1<axisx.min)continue;y2=(axisx.min-x1)/(x2-x1)*(y2-y1)+y1;x2=axisx.min}if(x1>=x2&&x1>axisx.max){if(x2>axisx.max)continue;y1=(axisx.max-x1)/(x2-x1)*(y2-y1)+y1;x1=axisx.max}else if(x2>=x1&&x2>axisx.max){if(x1>axisx.max)continue;y2=(axisx.max-x1)/(x2-x1)*(y2-y1)+y1;x2=axisx.max}if(!areaOpen){ctx.beginPath();ctx.moveTo(axisx.p2c(x1),axisy.p2c(bottom));areaOpen=true}if(y1>=axisy.max&&y2>=axisy.max){ctx.lineTo(axisx.p2c(x1),axisy.p2c(axisy.max));ctx.lineTo(axisx.p2c(x2),axisy.p2c(axisy.max));continue}else if(y1<=axisy.min&&y2<=axisy.min){ctx.lineTo(axisx.p2c(x1),axisy.p2c(axisy.min));ctx.lineTo(axisx.p2c(x2),axisy.p2c(axisy.min));continue}var x1old=x1,x2old=x2;if(y1<=y2&&y1<axisy.min&&y2>=axisy.min){x1=(axisy.min-y1)/(y2-y1)*(x2-x1)+x1;y1=axisy.min}else if(y2<=y1&&y2<axisy.min&&y1>=axisy.min){x2=(axisy.min-y1)/(y2-y1)*(x2-x1)+x1;y2=axisy.min}if(y1>=y2&&y1>axisy.max&&y2<=axisy.max){x1=(axisy.max-y1)/(y2-y1)*(x2-x1)+x1;y1=axisy.max}else if(y2>=y1&&y2>axisy.max&&y1<=axisy.max){x2=(axisy.max-y1)/(y2-y1)*(x2-x1)+x1;y2=axisy.max}if(x1!=x1old){ctx.lineTo(axisx.p2c(x1old),axisy.p2c(y1))}ctx.lineTo(axisx.p2c(x1),axisy.p2c(y1));ctx.lineTo(axisx.p2c(x2),axisy.p2c(y2));if(x2!=x2old){ctx.lineTo(axisx.p2c(x2),axisy.p2c(y2));ctx.lineTo(axisx.p2c(x2old),axisy.p2c(y2))}}}ctx.save();ctx.translate(plotOffset.left,plotOffset.top);ctx.lineJoin=\"round\";var lw=series.lines.lineWidth,sw=series.shadowSize;if(lw>0&&sw>0){ctx.lineWidth=sw;ctx.strokeStyle=\"rgba(0,0,0,0.1)\";var angle=Math.PI/18;plotLine(series.datapoints,Math.sin(angle)*(lw/2+sw/2),Math.cos(angle)*(lw/2+sw/2),series.xaxis,series.yaxis);ctx.lineWidth=sw/2;plotLine(series.datapoints,Math.sin(angle)*(lw/2+sw/4),Math.cos(angle)*(lw/2+sw/4),series.xaxis,series.yaxis)}ctx.lineWidth=lw;ctx.strokeStyle=series.color;var fillStyle=getFillStyle(series.lines,series.color,0,plotHeight);if(fillStyle){ctx.fillStyle=fillStyle;plotLineArea(series.datapoints,series.xaxis,series.yaxis)}if(lw>0)plotLine(series.datapoints,0,0,series.xaxis,series.yaxis);ctx.restore()}function drawSeriesPoints(series){function plotPoints(datapoints,radius,fillStyle,offset,shadow,axisx,axisy,symbol){var points=datapoints.points,ps=datapoints.pointsize;for(var i=0;i<points.length;i+=ps){var x=points[i],y=points[i+1];if(x==null||x<axisx.min||x>axisx.max||y<axisy.min||y>axisy.max)continue;ctx.beginPath();x=axisx.p2c(x);y=axisy.p2c(y)+offset;if(symbol==\"circle\")ctx.arc(x,y,radius,0,shadow?Math.PI:Math.PI*2,false);else symbol(ctx,x,y,radius,shadow);ctx.closePath();if(fillStyle){ctx.fillStyle=fillStyle;ctx.fill()}ctx.stroke()}}ctx.save();ctx.translate(plotOffset.left,plotOffset.top);var lw=series.points.lineWidth,sw=series.shadowSize,radius=series.points.radius,symbol=series.points.symbol;if(lw==0)lw=1e-4;if(lw>0&&sw>0){var w=sw/2;ctx.lineWidth=w;ctx.strokeStyle=\"rgba(0,0,0,0.1)\";plotPoints(series.datapoints,radius,null,w+w/2,true,series.xaxis,series.yaxis,symbol);ctx.strokeStyle=\"rgba(0,0,0,0.2)\";plotPoints(series.datapoints,radius,null,w/2,true,series.xaxis,series.yaxis,symbol)}ctx.lineWidth=lw;ctx.strokeStyle=series.color;plotPoints(series.datapoints,radius,getFillStyle(series.points,series.color),0,false,series.xaxis,series.yaxis,symbol);ctx.restore()}function drawBar(x,y,b,barLeft,barRight,fillStyleCallback,axisx,axisy,c,horizontal,lineWidth){var left,right,bottom,top,drawLeft,drawRight,drawTop,drawBottom,tmp;if(horizontal){drawBottom=drawRight=drawTop=true;drawLeft=false;left=b;right=x;top=y+barLeft;bottom=y+barRight;if(right<left){tmp=right;right=left;left=tmp;drawLeft=true;drawRight=false}}else{drawLeft=drawRight=drawTop=true;drawBottom=false;left=x+barLeft;right=x+barRight;bottom=b;top=y;if(top<bottom){tmp=top;top=bottom;bottom=tmp;drawBottom=true;drawTop=false}}if(right<axisx.min||left>axisx.max||top<axisy.min||bottom>axisy.max)return;if(left<axisx.min){left=axisx.min;drawLeft=false}if(right>axisx.max){right=axisx.max;drawRight=false}if(bottom<axisy.min){bottom=axisy.min;drawBottom=false}if(top>axisy.max){top=axisy.max;drawTop=false}left=axisx.p2c(left);bottom=axisy.p2c(bottom);right=axisx.p2c(right);top=axisy.p2c(top);if(fillStyleCallback){c.fillStyle=fillStyleCallback(bottom,top);c.fillRect(left,top,right-left,bottom-top)}if(lineWidth>0&&(drawLeft||drawRight||drawTop||drawBottom)){c.beginPath();c.moveTo(left,bottom);if(drawLeft)c.lineTo(left,top);else c.moveTo(left,top);if(drawTop)c.lineTo(right,top);else c.moveTo(right,top);if(drawRight)c.lineTo(right,bottom);else c.moveTo(right,bottom);if(drawBottom)c.lineTo(left,bottom);else c.moveTo(left,bottom);c.stroke()}}function drawSeriesBars(series){function plotBars(datapoints,barLeft,barRight,fillStyleCallback,axisx,axisy){var points=datapoints.points,ps=datapoints.pointsize;for(var i=0;i<points.length;i+=ps){if(points[i]==null)continue;drawBar(points[i],points[i+1],points[i+2],barLeft,barRight,fillStyleCallback,axisx,axisy,ctx,series.bars.horizontal,series.bars.lineWidth)}}ctx.save();ctx.translate(plotOffset.left,plotOffset.top);ctx.lineWidth=series.bars.lineWidth;ctx.strokeStyle=series.color;var barLeft;switch(series.bars.align){case\"left\":barLeft=0;break;case\"right\":barLeft=-series.bars.barWidth;break;default:barLeft=-series.bars.barWidth/2}var fillStyleCallback=series.bars.fill?function(bottom,top){return getFillStyle(series.bars,series.color,bottom,top)}:null;plotBars(series.datapoints,barLeft,barLeft+series.bars.barWidth,fillStyleCallback,series.xaxis,series.yaxis);ctx.restore()}function getFillStyle(filloptions,seriesColor,bottom,top){var fill=filloptions.fill;if(!fill)return null;if(filloptions.fillColor)return getColorOrGradient(filloptions.fillColor,bottom,top,seriesColor);var c=$.color.parse(seriesColor);c.a=typeof fill==\"number\"?fill:.4;c.normalize();return c.toString()}function insertLegend(){if(options.legend.container!=null){$(options.legend.container).html(\"\")}else{placeholder.find(\".legend\").remove()}if(!options.legend.show){return}var fragments=[],entries=[],rowStarted=false,lf=options.legend.labelFormatter,s,label;for(var i=0;i<series.length;++i){s=series[i];if(s.label){label=lf?lf(s.label,s):s.label;if(label){entries.push({label:label,color:s.color})}}}if(options.legend.sorted){if($.isFunction(options.legend.sorted)){entries.sort(options.legend.sorted)}else if(options.legend.sorted==\"reverse\"){entries.reverse()}else{var ascending=options.legend.sorted!=\"descending\";entries.sort(function(a,b){return a.label==b.label?0:a.label<b.label!=ascending?1:-1})}}for(var i=0;i<entries.length;++i){var entry=entries[i];if(i%options.legend.noColumns==0){if(rowStarted)fragments.push(\"</tr>\");fragments.push(\"<tr>\");rowStarted=true}fragments.push('<td class=\"legendColorBox\"><div style=\"border:1px solid '+options.legend.labelBoxBorderColor+';padding:1px\"><div style=\"width:4px;height:0;border:5px solid '+entry.color+';overflow:hidden\"></div></div></td>'+'<td class=\"legendLabel\">'+entry.label+\"</td>\")}if(rowStarted)fragments.push(\"</tr>\");if(fragments.length==0)return;var table='<table style=\"font-size:smaller;color:'+options.grid.color+'\">'+fragments.join(\"\")+\"</table>\";if(options.legend.container!=null)$(options.legend.container).html(table);else{var pos=\"\",p=options.legend.position,m=options.legend.margin;if(m[0]==null)m=[m,m];if(p.charAt(0)==\"n\")pos+=\"top:\"+(m[1]+plotOffset.top)+\"px;\";else if(p.charAt(0)==\"s\")pos+=\"bottom:\"+(m[1]+plotOffset.bottom)+\"px;\";if(p.charAt(1)==\"e\")pos+=\"right:\"+(m[0]+plotOffset.right)+\"px;\";else if(p.charAt(1)==\"w\")pos+=\"left:\"+(m[0]+plotOffset.left)+\"px;\";var legend=$('<div class=\"legend\">'+table.replace('style=\"','style=\"position:absolute;'+pos+\";\")+\"</div>\").appendTo(placeholder);if(options.legend.backgroundOpacity!=0){var c=options.legend.backgroundColor;if(c==null){c=options.grid.backgroundColor;if(c&&typeof c==\"string\")c=$.color.parse(c);else c=$.color.extract(legend,\"background-color\");c.a=1;c=c.toString()}var div=legend.children();$('<div style=\"position:absolute;width:'+div.width()+\"px;height:\"+div.height()+\"px;\"+pos+\"background-color:\"+c+';\"> </div>').prependTo(legend).css(\"opacity\",options.legend.backgroundOpacity)}}}var highlights=[],redrawTimeout=null;function findNearbyItem(mouseX,mouseY,seriesFilter){var maxDistance=options.grid.mouseActiveRadius,smallestDistance=maxDistance*maxDistance+1,item=null,foundPoint=false,i,j,ps;for(i=series.length-1;i>=0;--i){if(!seriesFilter(series[i]))continue;var s=series[i],axisx=s.xaxis,axisy=s.yaxis,points=s.datapoints.points,mx=axisx.c2p(mouseX),my=axisy.c2p(mouseY),maxx=maxDistance/axisx.scale,maxy=maxDistance/axisy.scale;ps=s.datapoints.pointsize;if(axisx.options.inverseTransform)maxx=Number.MAX_VALUE;if(axisy.options.inverseTransform)maxy=Number.MAX_VALUE;if(s.lines.show||s.points.show){for(j=0;j<points.length;j+=ps){var x=points[j],y=points[j+1];if(x==null)continue;if(x-mx>maxx||x-mx<-maxx||y-my>maxy||y-my<-maxy)continue;var dx=Math.abs(axisx.p2c(x)-mouseX),dy=Math.abs(axisy.p2c(y)-mouseY),dist=dx*dx+dy*dy;if(dist<smallestDistance){smallestDistance=dist;item=[i,j/ps]}}}if(s.bars.show&&!item){var barLeft,barRight;switch(s.bars.align){case\"left\":barLeft=0;break;case\"right\":barLeft=-s.bars.barWidth;break;default:barLeft=-s.bars.barWidth/2}barRight=barLeft+s.bars.barWidth;for(j=0;j<points.length;j+=ps){var x=points[j],y=points[j+1],b=points[j+2];if(x==null)continue;if(series[i].bars.horizontal?mx<=Math.max(b,x)&&mx>=Math.min(b,x)&&my>=y+barLeft&&my<=y+barRight:mx>=x+barLeft&&mx<=x+barRight&&my>=Math.min(b,y)&&my<=Math.max(b,y))item=[i,j/ps]}}}if(item){i=item[0];j=item[1];ps=series[i].datapoints.pointsize;return{datapoint:series[i].datapoints.points.slice(j*ps,(j+1)*ps),dataIndex:j,series:series[i],seriesIndex:i}}return null}function onMouseMove(e){if(options.grid.hoverable)triggerClickHoverEvent(\"plothover\",e,function(s){return s[\"hoverable\"]!=false})}function onMouseLeave(e){if(options.grid.hoverable)triggerClickHoverEvent(\"plothover\",e,function(s){return false})}function onClick(e){triggerClickHoverEvent(\"plotclick\",e,function(s){return s[\"clickable\"]!=false})}function triggerClickHoverEvent(eventname,event,seriesFilter){var offset=eventHolder.offset(),canvasX=event.pageX-offset.left-plotOffset.left,canvasY=event.pageY-offset.top-plotOffset.top,pos=canvasToAxisCoords({left:canvasX,top:canvasY});pos.pageX=event.pageX;pos.pageY=event.pageY;var item=findNearbyItem(canvasX,canvasY,seriesFilter);if(item){item.pageX=parseInt(item.series.xaxis.p2c(item.datapoint[0])+offset.left+plotOffset.left,10);item.pageY=parseInt(item.series.yaxis.p2c(item.datapoint[1])+offset.top+plotOffset.top,10)}if(options.grid.autoHighlight){for(var i=0;i<highlights.length;++i){var h=highlights[i];if(h.auto==eventname&&!(item&&h.series==item.series&&h.point[0]==item.datapoint[0]&&h.point[1]==item.datapoint[1]))unhighlight(h.series,h.point)}if(item)highlight(item.series,item.datapoint,eventname)}placeholder.trigger(eventname,[pos,item])}function triggerRedrawOverlay(){var t=options.interaction.redrawOverlayInterval;if(t==-1){drawOverlay();return}if(!redrawTimeout)redrawTimeout=setTimeout(drawOverlay,t)}function drawOverlay(){redrawTimeout=null;octx.save();overlay.clear();octx.translate(plotOffset.left,plotOffset.top);var i,hi;for(i=0;i<highlights.length;++i){hi=highlights[i];if(hi.series.bars.show)drawBarHighlight(hi.series,hi.point);else drawPointHighlight(hi.series,hi.point)}octx.restore();executeHooks(hooks.drawOverlay,[octx])}function highlight(s,point,auto){if(typeof s==\"number\")s=series[s];if(typeof point==\"number\"){var ps=s.datapoints.pointsize;point=s.datapoints.points.slice(ps*point,ps*(point+1))}var i=indexOfHighlight(s,point);if(i==-1){highlights.push({series:s,point:point,auto:auto});triggerRedrawOverlay()}else if(!auto)highlights[i].auto=false}function unhighlight(s,point){if(s==null&&point==null){highlights=[];triggerRedrawOverlay();return}if(typeof s==\"number\")s=series[s];if(typeof point==\"number\"){var ps=s.datapoints.pointsize;point=s.datapoints.points.slice(ps*point,ps*(point+1))}var i=indexOfHighlight(s,point);if(i!=-1){highlights.splice(i,1);triggerRedrawOverlay()}}function indexOfHighlight(s,p){for(var i=0;i<highlights.length;++i){var h=highlights[i];if(h.series==s&&h.point[0]==p[0]&&h.point[1]==p[1])return i}return-1}function drawPointHighlight(series,point){var x=point[0],y=point[1],axisx=series.xaxis,axisy=series.yaxis,highlightColor=typeof series.highlightColor===\"string\"?series.highlightColor:$.color.parse(series.color).scale(\"a\",.5).toString();if(x<axisx.min||x>axisx.max||y<axisy.min||y>axisy.max)return;var pointRadius=series.points.radius+series.points.lineWidth/2;octx.lineWidth=pointRadius;octx.strokeStyle=highlightColor;var radius=1.5*pointRadius;x=axisx.p2c(x);y=axisy.p2c(y);octx.beginPath();if(series.points.symbol==\"circle\")octx.arc(x,y,radius,0,2*Math.PI,false);else series.points.symbol(octx,x,y,radius,false);octx.closePath();octx.stroke()}function drawBarHighlight(series,point){var highlightColor=typeof series.highlightColor===\"string\"?series.highlightColor:$.color.parse(series.color).scale(\"a\",.5).toString(),fillStyle=highlightColor,barLeft;switch(series.bars.align){case\"left\":barLeft=0;break;case\"right\":barLeft=-series.bars.barWidth;break;default:barLeft=-series.bars.barWidth/2}octx.lineWidth=series.bars.lineWidth;octx.strokeStyle=highlightColor;drawBar(point[0],point[1],point[2]||0,barLeft,barLeft+series.bars.barWidth,function(){return fillStyle},series.xaxis,series.yaxis,octx,series.bars.horizontal,series.bars.lineWidth)}function getColorOrGradient(spec,bottom,top,defaultColor){if(typeof spec==\"string\")return spec;else{var gradient=ctx.createLinearGradient(0,top,0,bottom);for(var i=0,l=spec.colors.length;i<l;++i){var c=spec.colors[i];if(typeof c!=\"string\"){var co=$.color.parse(defaultColor);if(c.brightness!=null)co=co.scale(\"rgb\",c.brightness);if(c.opacity!=null)co.a*=c.opacity;c=co.toString()}gradient.addColorStop(i/(l-1),c)}return gradient}}}$.plot=function(placeholder,data,options){var plot=new Plot($(placeholder),data,options,$.plot.plugins);return plot};$.plot.version=\"0.8.3\";$.plot.plugins=[];$.fn.plot=function(data,options){return this.each(function(){$.plot(this,data,options)})};function floorInBase(n,base){return base*Math.floor(n/base)}})(jQuery);","/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n(function($,e,t){\"$:nomunge\";var i=[],n=$.resize=$.extend($.resize,{}),a,r=false,s=\"setTimeout\",u=\"resize\",m=u+\"-special-event\",o=\"pendingDelay\",l=\"activeDelay\",f=\"throttleWindow\";n[o]=200;n[l]=20;n[f]=true;$.event.special[u]={setup:function(){if(!n[f]&&this[s]){return false}var e=$(this);i.push(this);e.data(m,{w:e.width(),h:e.height()});if(i.length===1){a=t;h()}},teardown:function(){if(!n[f]&&this[s]){return false}var e=$(this);for(var t=i.length-1;t>=0;t--){if(i[t]==this){i.splice(t,1);break}}e.removeData(m);if(!i.length){if(r){cancelAnimationFrame(a)}else{clearTimeout(a)}a=null}},add:function(e){if(!n[f]&&this[s]){return false}var i;function a(e,n,a){var r=$(this),s=r.data(m)||{};s.w=n!==t?n:r.width();s.h=a!==t?a:r.height();i.apply(this,arguments)}if($.isFunction(e)){i=e;return a}else{i=e.handler;e.handler=a}}};function h(t){if(r===true){r=t||1}for(var s=i.length-1;s>=0;s--){var l=$(i[s]);if(l[0]==e||l.is(\":visible\")){var f=l.width(),c=l.height(),d=l.data(m);if(d&&(f!==d.w||c!==d.h)){l.trigger(u,[d.w=f,d.h=c]);r=t||true}}else{d=l.data(m);d.w=0;d.h=0}}if(a!==null){if(r&&(t==null||t-r<1e3)){a=e.requestAnimationFrame(h)}else{a=setTimeout(h,n[o]);r=false}}}if(!e.requestAnimationFrame){e.requestAnimationFrame=function(){return e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(t,i){return e.setTimeout(function(){t((new Date).getTime())},n[l])}}()}if(!e.cancelAnimationFrame){e.cancelAnimationFrame=function(){return e.webkitCancelRequestAnimationFrame||e.mozCancelRequestAnimationFrame||e.oCancelRequestAnimationFrame||e.msCancelRequestAnimationFrame||clearTimeout}()}})(jQuery,this);(function($){var options={};function init(plot){function onResize(){var placeholder=plot.getPlaceholder();if(placeholder.width()==0||placeholder.height()==0)return;plot.resize();plot.setupGrid();plot.draw()}function bindEvents(plot,eventHolder){plot.getPlaceholder().resize(onResize)}function shutdown(plot,eventHolder){plot.getPlaceholder().unbind(\"resize\",onResize)}plot.hooks.bindEvents.push(bindEvents);plot.hooks.shutdown.push(shutdown)}$.plot.plugins.push({init:init,options:options,name:\"resize\",version:\"1.0\"})})(jQuery);","/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n(function($){var options={xaxis:{timezone:null,timeformat:null,twelveHourClock:false,monthNames:null}};function floorInBase(n,base){return base*Math.floor(n/base)}function formatDate(d,fmt,monthNames,dayNames){if(typeof d.strftime==\"function\"){return d.strftime(fmt)}var leftPad=function(n,pad){n=\"\"+n;pad=\"\"+(pad==null?\"0\":pad);return n.length==1?pad+n:n};var r=[];var escape=false;var hours=d.getHours();var isAM=hours<12;if(monthNames==null){monthNames=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]}if(dayNames==null){dayNames=[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]}var hours12;if(hours>12){hours12=hours-12}else if(hours==0){hours12=12}else{hours12=hours}for(var i=0;i<fmt.length;++i){var c=fmt.charAt(i);if(escape){switch(c){case\"a\":c=\"\"+dayNames[d.getDay()];break;case\"b\":c=\"\"+monthNames[d.getMonth()];break;case\"d\":c=leftPad(d.getDate());break;case\"e\":c=leftPad(d.getDate(),\" \");break;case\"h\":case\"H\":c=leftPad(hours);break;case\"I\":c=leftPad(hours12);break;case\"l\":c=leftPad(hours12,\" \");break;case\"m\":c=leftPad(d.getMonth()+1);break;case\"M\":c=leftPad(d.getMinutes());break;case\"q\":c=\"\"+(Math.floor(d.getMonth()/3)+1);break;case\"S\":c=leftPad(d.getSeconds());break;case\"y\":c=leftPad(d.getFullYear()%100);break;case\"Y\":c=\"\"+d.getFullYear();break;case\"p\":c=isAM?\"\"+\"am\":\"\"+\"pm\";break;case\"P\":c=isAM?\"\"+\"AM\":\"\"+\"PM\";break;case\"w\":c=\"\"+d.getDay();break}r.push(c);escape=false}else{if(c==\"%\"){escape=true}else{r.push(c)}}}return r.join(\"\")}function makeUtcWrapper(d){function addProxyMethod(sourceObj,sourceMethod,targetObj,targetMethod){sourceObj[sourceMethod]=function(){return targetObj[targetMethod].apply(targetObj,arguments)}}var utc={date:d};if(d.strftime!=undefined){addProxyMethod(utc,\"strftime\",d,\"strftime\")}addProxyMethod(utc,\"getTime\",d,\"getTime\");addProxyMethod(utc,\"setTime\",d,\"setTime\");var props=[\"Date\",\"Day\",\"FullYear\",\"Hours\",\"Milliseconds\",\"Minutes\",\"Month\",\"Seconds\"];for(var p=0;p<props.length;p++){addProxyMethod(utc,\"get\"+props[p],d,\"getUTC\"+props[p]);addProxyMethod(utc,\"set\"+props[p],d,\"setUTC\"+props[p])}return utc}function dateGenerator(ts,opts){if(opts.timezone==\"browser\"){return new Date(ts)}else if(!opts.timezone||opts.timezone==\"utc\"){return makeUtcWrapper(new Date(ts))}else if(typeof timezoneJS!=\"undefined\"&&typeof timezoneJS.Date!=\"undefined\"){var d=new timezoneJS.Date;d.setTimezone(opts.timezone);d.setTime(ts);return d}else{return makeUtcWrapper(new Date(ts))}}var timeUnitSize={second:1e3,minute:60*1e3,hour:60*60*1e3,day:24*60*60*1e3,month:30*24*60*60*1e3,quarter:3*30*24*60*60*1e3,year:365.2425*24*60*60*1e3};var baseSpec=[[1,\"second\"],[2,\"second\"],[5,\"second\"],[10,\"second\"],[30,\"second\"],[1,\"minute\"],[2,\"minute\"],[5,\"minute\"],[10,\"minute\"],[30,\"minute\"],[1,\"hour\"],[2,\"hour\"],[4,\"hour\"],[8,\"hour\"],[12,\"hour\"],[1,\"day\"],[2,\"day\"],[3,\"day\"],[.25,\"month\"],[.5,\"month\"],[1,\"month\"],[2,\"month\"]];var specMonths=baseSpec.concat([[3,\"month\"],[6,\"month\"],[1,\"year\"]]);var specQuarters=baseSpec.concat([[1,\"quarter\"],[2,\"quarter\"],[1,\"year\"]]);function init(plot){plot.hooks.processOptions.push(function(plot,options){$.each(plot.getAxes(),function(axisName,axis){var opts=axis.options;if(opts.mode==\"time\"){axis.tickGenerator=function(axis){var ticks=[];var d=dateGenerator(axis.min,opts);var minSize=0;var spec=opts.tickSize&&opts.tickSize[1]===\"quarter\"||opts.minTickSize&&opts.minTickSize[1]===\"quarter\"?specQuarters:specMonths;if(opts.minTickSize!=null){if(typeof opts.tickSize==\"number\"){minSize=opts.tickSize}else{minSize=opts.minTickSize[0]*timeUnitSize[opts.minTickSize[1]]}}for(var i=0;i<spec.length-1;++i){if(axis.delta<(spec[i][0]*timeUnitSize[spec[i][1]]+spec[i+1][0]*timeUnitSize[spec[i+1][1]])/2&&spec[i][0]*timeUnitSize[spec[i][1]]>=minSize){break}}var size=spec[i][0];var unit=spec[i][1];if(unit==\"year\"){if(opts.minTickSize!=null&&opts.minTickSize[1]==\"year\"){size=Math.floor(opts.minTickSize[0])}else{var magn=Math.pow(10,Math.floor(Math.log(axis.delta/timeUnitSize.year)/Math.LN10));var norm=axis.delta/timeUnitSize.year/magn;if(norm<1.5){size=1}else if(norm<3){size=2}else if(norm<7.5){size=5}else{size=10}size*=magn}if(size<1){size=1}}axis.tickSize=opts.tickSize||[size,unit];var tickSize=axis.tickSize[0];unit=axis.tickSize[1];var step=tickSize*timeUnitSize[unit];if(unit==\"second\"){d.setSeconds(floorInBase(d.getSeconds(),tickSize))}else if(unit==\"minute\"){d.setMinutes(floorInBase(d.getMinutes(),tickSize))}else if(unit==\"hour\"){d.setHours(floorInBase(d.getHours(),tickSize))}else if(unit==\"month\"){d.setMonth(floorInBase(d.getMonth(),tickSize))}else if(unit==\"quarter\"){d.setMonth(3*floorInBase(d.getMonth()/3,tickSize))}else if(unit==\"year\"){d.setFullYear(floorInBase(d.getFullYear(),tickSize))}d.setMilliseconds(0);if(step>=timeUnitSize.minute){d.setSeconds(0)}if(step>=timeUnitSize.hour){d.setMinutes(0)}if(step>=timeUnitSize.day){d.setHours(0)}if(step>=timeUnitSize.day*4){d.setDate(1)}if(step>=timeUnitSize.month*2){d.setMonth(floorInBase(d.getMonth(),3))}if(step>=timeUnitSize.quarter*2){d.setMonth(floorInBase(d.getMonth(),6))}if(step>=timeUnitSize.year){d.setMonth(0)}var carry=0;var v=Number.NaN;var prev;do{prev=v;v=d.getTime();ticks.push(v);if(unit==\"month\"||unit==\"quarter\"){if(tickSize<1){d.setDate(1);var start=d.getTime();d.setMonth(d.getMonth()+(unit==\"quarter\"?3:1));var end=d.getTime();d.setTime(v+carry*timeUnitSize.hour+(end-start)*tickSize);carry=d.getHours();d.setHours(0)}else{d.setMonth(d.getMonth()+tickSize*(unit==\"quarter\"?3:1))}}else if(unit==\"year\"){d.setFullYear(d.getFullYear()+tickSize)}else{d.setTime(v+step)}}while(v<axis.max&&v!=prev);return ticks};axis.tickFormatter=function(v,axis){var d=dateGenerator(v,axis.options);if(opts.timeformat!=null){return formatDate(d,opts.timeformat,opts.monthNames,opts.dayNames)}var useQuarters=axis.options.tickSize&&axis.options.tickSize[1]==\"quarter\"||axis.options.minTickSize&&axis.options.minTickSize[1]==\"quarter\";var t=axis.tickSize[0]*timeUnitSize[axis.tickSize[1]];var span=axis.max-axis.min;var suffix=opts.twelveHourClock?\" %p\":\"\";var hourCode=opts.twelveHourClock?\"%I\":\"%H\";var fmt;if(t<timeUnitSize.minute){fmt=hourCode+\":%M:%S\"+suffix}else if(t<timeUnitSize.day){if(span<2*timeUnitSize.day){fmt=hourCode+\":%M\"+suffix}else{fmt=\"%b %d \"+hourCode+\":%M\"+suffix}}else if(t<timeUnitSize.month){fmt=\"%b %d\"}else if(useQuarters&&t<timeUnitSize.quarter||!useQuarters&&t<timeUnitSize.year){if(span<timeUnitSize.year){fmt=\"%b\"}else{fmt=\"%b %Y\"}}else if(useQuarters&&t<timeUnitSize.year){if(span<timeUnitSize.year){fmt=\"Q%q\"}else{fmt=\"Q%q %Y\"}}else{fmt=\"%Y\"}var rt=formatDate(d,fmt,opts.monthNames,opts.dayNames);return rt}}})})}$.plot.plugins.push({init:init,options:options,name:\"time\",version:\"1.0\"});$.plot.formatDate=formatDate;$.plot.dateGenerator=dateGenerator})(jQuery);","/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n(function($){var options={xaxis:{categories:null},yaxis:{categories:null}};function processRawData(plot,series,data,datapoints){var xCategories=series.xaxis.options.mode==\"categories\",yCategories=series.yaxis.options.mode==\"categories\";if(!(xCategories||yCategories))return;var format=datapoints.format;if(!format){var s=series;format=[];format.push({x:true,number:true,required:true});format.push({y:true,number:true,required:true});if(s.bars.show||s.lines.show&&s.lines.fill){var autoscale=!!(s.bars.show&&s.bars.zero||s.lines.show&&s.lines.zero);format.push({y:true,number:true,required:false,defaultValue:0,autoscale:autoscale});if(s.bars.horizontal){delete format[format.length-1].y;format[format.length-1].x=true}}datapoints.format=format}for(var m=0;m<format.length;++m){if(format[m].x&&xCategories)format[m].number=false;if(format[m].y&&yCategories)format[m].number=false}}function getNextIndex(categories){var index=-1;for(var v in categories)if(categories[v]>index)index=categories[v];return index+1}function categoriesTickGenerator(axis){var res=[];for(var label in axis.categories){var v=axis.categories[label];if(v>=axis.min&&v<=axis.max)res.push([v,label])}res.sort(function(a,b){return a[0]-b[0]});return res}function setupCategoriesForAxis(series,axis,datapoints){if(series[axis].options.mode!=\"categories\")return;if(!series[axis].categories){var c={},o=series[axis].options.categories||{};if($.isArray(o)){for(var i=0;i<o.length;++i)c[o[i]]=i}else{for(var v in o)c[v]=o[v]}series[axis].categories=c}if(!series[axis].options.ticks)series[axis].options.ticks=categoriesTickGenerator;transformPointsOnAxis(datapoints,axis,series[axis].categories)}function transformPointsOnAxis(datapoints,axis,categories){var points=datapoints.points,ps=datapoints.pointsize,format=datapoints.format,formatColumn=axis.charAt(0),index=getNextIndex(categories);for(var i=0;i<points.length;i+=ps){if(points[i]==null)continue;for(var m=0;m<ps;++m){var val=points[i+m];if(val==null||!format[m][formatColumn])continue;if(!(val in categories)){categories[val]=index;++index}points[i+m]=categories[val]}}}function processDatapoints(plot,series,datapoints){setupCategoriesForAxis(series,\"xaxis\",datapoints);setupCategoriesForAxis(series,\"yaxis\",datapoints)}function init(plot){plot.hooks.processRawData.push(processRawData);plot.hooks.processDatapoints.push(processDatapoints)}$.plot.plugins.push({init:init,options:options,name:\"categories\",version:\"1.0\"})})(jQuery);","/**\r\n * Flot plugin that provides spline interpolation for line graphs\r\n * author: Alex Bardas < alex.bardas@gmail.com >\r\n * modified by: Avi Kohn https://github.com/AMKohn\r\n * based on the spline interpolation described at:\r\n *     http://scaledinnovation.com/analytics/splines/aboutSplines.html\r\n *\r\n * Example usage: (add in plot options series object)\r\n *    for linespline:\r\n *      series: {\r\n *        ...\r\n *        lines: {\r\n *          show: false\r\n *        },\r\n *        splines: {\r\n *          show: true,\r\n *          tension: x, (float between 0 and 1, defaults to 0.5),\r\n *          lineWidth: y (number, defaults to 2),\r\n *          fill: z (float between 0 .. 1 or false, as in flot documentation)\r\n *        },\r\n *        ...\r\n *      }\r\n *    areaspline:\r\n *      series: {\r\n *        ...\r\n *        lines: {\r\n *          show: true,\r\n *          lineWidth: 0, (line drawing will not execute)\r\n *          fill: x, (float between 0 .. 1, as in flot documentation)\r\n *          ...\r\n *        },\r\n *        splines: {\r\n *          show: true,\r\n *          tension: 0.5 (float between 0 and 1)\r\n *        },\r\n *        ...\r\n *      }\r\n *\r\n */\r\n\r\n(function($) {\r\n    'use strict'\r\n\r\n    /**\r\n     * @param {Number} x0, y0, x1, y1: coordinates of the end (knot) points of the segment\r\n     * @param {Number} x2, y2: the next knot (not connected, but needed to calculate p2)\r\n     * @param {Number} tension: control how far the control points spread\r\n     * @return {Array}: p1 -> control point, from x1 back toward x0\r\n     *          p2 -> the next control point, returned to become the next segment's p1\r\n     *\r\n     * @api private\r\n     */\r\n    function getControlPoints(x0, y0, x1, y1, x2, y2, tension) {\r\n\r\n        var pow = Math.pow,\r\n            sqrt = Math.sqrt,\r\n            d01, d12, fa, fb, p1x, p1y, p2x, p2y;\r\n\r\n        //  Scaling factors: distances from this knot to the previous and following knots.\r\n        d01 = sqrt(pow(x1 - x0, 2) + pow(y1 - y0, 2));\r\n        d12 = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));\r\n\r\n        fa = tension * d01 / (d01 + d12);\r\n        fb = tension - fa;\r\n\r\n        p1x = x1 + fa * (x0 - x2);\r\n        p1y = y1 + fa * (y0 - y2);\r\n\r\n        p2x = x1 - fb * (x0 - x2);\r\n        p2y = y1 - fb * (y0 - y2);\r\n\r\n        return [p1x, p1y, p2x, p2y];\r\n    }\r\n\r\n    var line = [];\r\n\r\n    function drawLine(points, ctx, height, fill, seriesColor) {\r\n        var c = $.color.parse(seriesColor);\r\n\r\n        c.a = typeof fill == \"number\" ? fill : .3;\r\n        c.normalize();\r\n        c = c.toString();\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(points[0][0], points[0][1]);\r\n\r\n        var plength = points.length;\r\n\r\n        for (var i = 0; i < plength; i++) {\r\n            try {\r\n                ctx[points[i][3]].apply(ctx, points[i][2]);\r\n            } catch(e) {\r\n                console.log(e);\r\n                break;\r\n            }\r\n        }\r\n\r\n        ctx.stroke();\r\n\r\n        ctx.lineWidth = 0;\r\n        ctx.lineTo(points[plength - 1][0], height);\r\n        ctx.lineTo(points[0][0], height);\r\n\r\n        ctx.closePath();\r\n\r\n        if (fill !== false) {\r\n            ctx.fillStyle = c;\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Object} ctx: canvas context\r\n     * @param {String} type: accepted strings: 'bezier' or 'quadratic' (defaults to quadratic)\r\n     * @param {Array} points: 2 points for which to draw the interpolation\r\n     * @param {Array} cpoints: control points for those segment points\r\n     *\r\n     * @api private\r\n     */\r\n    function queue(ctx, type, points, cpoints) {\r\n        if (type === void 0 || (type !== 'bezier' && type !== 'quadratic')) {\r\n            type = 'quadratic';\r\n        }\r\n        type = type + 'CurveTo';\r\n\r\n        if (line.length == 0) line.push([points[0], points[1], cpoints.concat(points.slice(2)), type]);\r\n        else if (type == \"quadraticCurveTo\" && points.length == 2) {\r\n            cpoints = cpoints.slice(0, 2).concat(points);\r\n\r\n            line.push([points[0], points[1], cpoints, type]);\r\n        }\r\n        else line.push([points[2], points[3], cpoints.concat(points.slice(2)), type]);\r\n    }\r\n\r\n    /**\r\n     * @param {Object} plot\r\n     * @param {Object} ctx: canvas context\r\n     * @param {Object} series\r\n     *\r\n     * @api private\r\n     */\r\n\r\n    function drawSpline(plot, ctx, series) {\r\n        // Not interested if spline is not requested\r\n        if (series.splines.show !== true) {\r\n            return;\r\n        }\r\n\r\n        var cp = [],\r\n        // array of control points\r\n            tension = series.splines.tension || 0.5,\r\n            idx, x, y, points = series.datapoints.points,\r\n            ps = series.datapoints.pointsize,\r\n            plotOffset = plot.getPlotOffset(),\r\n            len = points.length,\r\n            pts = [];\r\n\r\n        line = [];\r\n\r\n        // Cannot display a linespline/areaspline if there are less than 3 points\r\n        if (len / ps < 4) {\r\n            $.extend(series.lines, series.splines);\r\n            return;\r\n        }\r\n\r\n        for (idx = 0; idx < len; idx += ps) {\r\n            x = points[idx];\r\n            y = points[idx + 1];\r\n            if (x == null || x < series.xaxis.min || x > series.xaxis.max || y < series.yaxis.min || y > series.yaxis.max) {\r\n                continue;\r\n            }\r\n\r\n            pts.push(series.xaxis.p2c(x) + plotOffset.left, series.yaxis.p2c(y) + plotOffset.top);\r\n        }\r\n\r\n        len = pts.length;\r\n\r\n        // Draw an open curve, not connected at the ends\r\n        for (idx = 0; idx < len - 2; idx += 2) {\r\n            cp = cp.concat(getControlPoints.apply(this, pts.slice(idx, idx + 6).concat([tension])));\r\n        }\r\n\r\n        ctx.save();\r\n        ctx.strokeStyle = series.color;\r\n        ctx.lineWidth = series.splines.lineWidth;\r\n\r\n        queue(ctx, 'quadratic', pts.slice(0, 4), cp.slice(0, 2));\r\n\r\n        for (idx = 2; idx < len - 3; idx += 2) {\r\n            queue(ctx, 'bezier', pts.slice(idx, idx + 4), cp.slice(2 * idx - 2, 2 * idx + 2));\r\n        }\r\n\r\n        queue(ctx, 'quadratic', pts.slice(len - 2, len), [cp[2 * len - 10], cp[2 * len - 9], pts[len - 4], pts[len - 3]]);\r\n\r\n        drawLine(line, ctx, plot.height() + 10, series.splines.fill, series.color);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    $.plot.plugins.push({\r\n        init: function(plot) {\r\n            plot.hooks.drawSeries.push(drawSpline);\r\n        },\r\n        options: {\r\n            series: {\r\n                splines: {\r\n                    show: false,\r\n                    lineWidth: 2,\r\n                    tension: 0.5,\r\n                    fill: false\r\n                }\r\n            }\r\n        },\r\n        name: 'spline',\r\n        version: '0.8.2'\r\n    });\r\n})(jQuery);","/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n(function($){function init(plot){var selection={first:{x:-1,y:-1},second:{x:-1,y:-1},show:false,active:false};var savedhandlers={};var mouseUpHandler=null;function onMouseMove(e){if(selection.active){updateSelection(e);plot.getPlaceholder().trigger(\"plotselecting\",[getSelection()])}}function onMouseDown(e){if(e.which!=1)return;document.body.focus();if(document.onselectstart!==undefined&&savedhandlers.onselectstart==null){savedhandlers.onselectstart=document.onselectstart;document.onselectstart=function(){return false}}if(document.ondrag!==undefined&&savedhandlers.ondrag==null){savedhandlers.ondrag=document.ondrag;document.ondrag=function(){return false}}setSelectionPos(selection.first,e);selection.active=true;mouseUpHandler=function(e){onMouseUp(e)};$(document).one(\"mouseup\",mouseUpHandler)}function onMouseUp(e){mouseUpHandler=null;if(document.onselectstart!==undefined)document.onselectstart=savedhandlers.onselectstart;if(document.ondrag!==undefined)document.ondrag=savedhandlers.ondrag;selection.active=false;updateSelection(e);if(selectionIsSane())triggerSelectedEvent();else{plot.getPlaceholder().trigger(\"plotunselected\",[]);plot.getPlaceholder().trigger(\"plotselecting\",[null])}return false}function getSelection(){if(!selectionIsSane())return null;if(!selection.show)return null;var r={},c1=selection.first,c2=selection.second;$.each(plot.getAxes(),function(name,axis){if(axis.used){var p1=axis.c2p(c1[axis.direction]),p2=axis.c2p(c2[axis.direction]);r[name]={from:Math.min(p1,p2),to:Math.max(p1,p2)}}});return r}function triggerSelectedEvent(){var r=getSelection();plot.getPlaceholder().trigger(\"plotselected\",[r]);if(r.xaxis&&r.yaxis)plot.getPlaceholder().trigger(\"selected\",[{x1:r.xaxis.from,y1:r.yaxis.from,x2:r.xaxis.to,y2:r.yaxis.to}])}function clamp(min,value,max){return value<min?min:value>max?max:value}function setSelectionPos(pos,e){var o=plot.getOptions();var offset=plot.getPlaceholder().offset();var plotOffset=plot.getPlotOffset();pos.x=clamp(0,e.pageX-offset.left-plotOffset.left,plot.width());pos.y=clamp(0,e.pageY-offset.top-plotOffset.top,plot.height());if(o.selection.mode==\"y\")pos.x=pos==selection.first?0:plot.width();if(o.selection.mode==\"x\")pos.y=pos==selection.first?0:plot.height()}function updateSelection(pos){if(pos.pageX==null)return;setSelectionPos(selection.second,pos);if(selectionIsSane()){selection.show=true;plot.triggerRedrawOverlay()}else clearSelection(true)}function clearSelection(preventEvent){if(selection.show){selection.show=false;plot.triggerRedrawOverlay();if(!preventEvent)plot.getPlaceholder().trigger(\"plotunselected\",[])}}function extractRange(ranges,coord){var axis,from,to,key,axes=plot.getAxes();for(var k in axes){axis=axes[k];if(axis.direction==coord){key=coord+axis.n+\"axis\";if(!ranges[key]&&axis.n==1)key=coord+\"axis\";if(ranges[key]){from=ranges[key].from;to=ranges[key].to;break}}}if(!ranges[key]){axis=coord==\"x\"?plot.getXAxes()[0]:plot.getYAxes()[0];from=ranges[coord+\"1\"];to=ranges[coord+\"2\"]}if(from!=null&&to!=null&&from>to){var tmp=from;from=to;to=tmp}return{from:from,to:to,axis:axis}}function setSelection(ranges,preventEvent){var axis,range,o=plot.getOptions();if(o.selection.mode==\"y\"){selection.first.x=0;selection.second.x=plot.width()}else{range=extractRange(ranges,\"x\");selection.first.x=range.axis.p2c(range.from);selection.second.x=range.axis.p2c(range.to)}if(o.selection.mode==\"x\"){selection.first.y=0;selection.second.y=plot.height()}else{range=extractRange(ranges,\"y\");selection.first.y=range.axis.p2c(range.from);selection.second.y=range.axis.p2c(range.to)}selection.show=true;plot.triggerRedrawOverlay();if(!preventEvent&&selectionIsSane())triggerSelectedEvent()}function selectionIsSane(){var minSize=plot.getOptions().selection.minSize;return Math.abs(selection.second.x-selection.first.x)>=minSize&&Math.abs(selection.second.y-selection.first.y)>=minSize}plot.clearSelection=clearSelection;plot.setSelection=setSelection;plot.getSelection=getSelection;plot.hooks.bindEvents.push(function(plot,eventHolder){var o=plot.getOptions();if(o.selection.mode!=null){eventHolder.mousemove(onMouseMove);eventHolder.mousedown(onMouseDown)}});plot.hooks.drawOverlay.push(function(plot,ctx){if(selection.show&&selectionIsSane()){var plotOffset=plot.getPlotOffset();var o=plot.getOptions();ctx.save();ctx.translate(plotOffset.left,plotOffset.top);var c=$.color.parse(o.selection.color);ctx.strokeStyle=c.scale(\"a\",.8).toString();ctx.lineWidth=1;ctx.lineJoin=o.selection.shape;ctx.fillStyle=c.scale(\"a\",.4).toString();var x=Math.min(selection.first.x,selection.second.x)+.5,y=Math.min(selection.first.y,selection.second.y)+.5,w=Math.abs(selection.second.x-selection.first.x)-1,h=Math.abs(selection.second.y-selection.first.y)-1;ctx.fillRect(x,y,w,h);ctx.strokeRect(x,y,w,h);ctx.restore()}});plot.hooks.shutdown.push(function(plot,eventHolder){eventHolder.unbind(\"mousemove\",onMouseMove);eventHolder.unbind(\"mousedown\",onMouseDown);if(mouseUpHandler)$(document).unbind(\"mouseup\",mouseUpHandler)})}$.plot.plugins.push({init:init,options:{selection:{mode:null,color:\"#e8cfac\",shape:\"round\",minSize:5}},name:\"selection\",version:\"1.1\"})})(jQuery);","/* This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this file,\r\n * You can obtain one at http://mozilla.org/MPL/2.0/. */\r\n\r\n/*\r\n * Plugin to hide series in flot graphs.\r\n *\r\n * To activate, set legend.hideable to true in the flot options object.\r\n * To hide one or more series by default, set legend.hidden to an array of\r\n * label strings.\r\n *\r\n * At the moment, this only works with line and point graphs.\r\n *\r\n * Example:\r\n *\r\n *     var plotdata = [\r\n *         {\r\n *             data: [[1, 1], [2, 1], [3, 3], [4, 2], [5, 5]],\r\n *             label: \"graph 1\"\r\n *         },\r\n *         {\r\n *             data: [[1, 0], [2, 1], [3, 0], [4, 4], [5, 3]],\r\n *             label: \"graph 2\"\r\n *         }\r\n *     ];\r\n *\r\n *     plot = $.plot($(\"#placeholder\"), plotdata, {\r\n *        series: {\r\n *             points: { show: true },\r\n *             lines: { show: true }\r\n *         },\r\n *         legend: {\r\n *             hideable: true,\r\n *             hidden: [\"graph 1\", \"graph 2\"]\r\n *         }\r\n *     });\r\n *\r\n */\r\n(function ($) {\r\n    var options = { };\r\n\r\n    function init(plot) {\r\n        var drawnOnce = false;\r\n\r\n        function findPlotSeries(label) {\r\n            var plotdata = plot.getData();\r\n            for (var i = 0; i < plotdata.length; i++) {\r\n                if (plotdata[i].label == label) {\r\n                    return plotdata[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function plotLabelClicked(label, mouseOut) {\r\n            var series = findPlotSeries(label);\r\n            if (!series) {\r\n                return;\r\n            }\r\n\r\n            var options = plot.getOptions();\r\n            var switchedOff = false;\r\n\r\n            if (typeof series.points.oldShow === \"undefined\") {\r\n                series.points.oldShow = false;\r\n            }\r\n            if (typeof series.lines.oldShow === \"undefined\") {\r\n                series.lines.oldShow = false;\r\n            }\r\n\r\n            if (series.points.show && !series.points.oldShow) {\r\n                series.points.show = false;\r\n                series.points.oldShow = true;\r\n                switchedOff = true;\r\n            }\r\n            if (series.lines.show && !series.lines.oldShow) {\r\n                series.lines.show = false;\r\n                series.lines.oldShow = true;\r\n                switchedOff = true;\r\n            }\r\n\r\n            if (switchedOff) {\r\n                series.oldColor = series.color;\r\n                series.color = \"#fff\";\r\n                setHidden(options, label, true);\r\n            } else {\r\n                var switchedOn = false;\r\n\r\n                if (!series.points.show && series.points.oldShow) {\r\n                    series.points.show = true;\r\n                    series.points.oldShow = false;\r\n                    switchedOn = true;\r\n                }\r\n                if (!series.lines.show && series.lines.oldShow) {\r\n            \t    series.lines.show = true;\r\n                    series.lines.oldShow = false;\r\n                    switchedOn = true;\r\n                }\r\n\r\n                if (switchedOn) {\r\n            \t    series.color = series.oldColor;\r\n                    setHidden(options, label, false);\r\n            \t}\r\n            }\r\n        }\r\n\r\n        function setSetupRedraw () {\r\n            // HACK: Reset the data, triggering recalculation of graph bounds\r\n            plot.setData(plot.getData());\r\n\r\n            plot.setupGrid();\r\n            plot.draw();\r\n        }\r\n\r\n        function setHidden(options, label, hide) {\r\n            // Record state to a new variable in the legend option object.\r\n            if (!options.legend.hidden) {\r\n                options.legend.hidden = [];\r\n            }\r\n\r\n            var pos = options.legend.hidden.indexOf(label);\r\n\r\n            if (hide) {\r\n                if (pos < 0) {\r\n                    options.legend.hidden.push(label);\r\n                }\r\n            } else {\r\n                if (pos > -1) {\r\n                    options.legend.hidden.splice(pos, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        function setHideAction(elem) {\r\n            elem.mouseenter(function() { $(this).css(\"cursor\", \"pointer\"); })\r\n                .mouseleave(function() { $(this).css(\"cursor\", \"default\"); })\r\n                .unbind(\"click\").click(function() {\r\n                    if ($(this).is(\".legendColorBox\")) {\r\n                        plotLabelClicked($(this).next('.legendLabel').text());\r\n                    } else {\r\n                        plotLabelClicked($(this).parent().text());\r\n                    }\r\n                    setSetupRedraw();\r\n                });\r\n        }\r\n\r\n        function plotLabelHandlers(plot) {\r\n            var options = plot.getOptions();\r\n\r\n            if (!options.legend.hideable) {\r\n                return;\r\n            }\r\n\r\n            var p = plot.getPlaceholder();\r\n\r\n            setHideAction(p.find(\".graphlabel\"));\r\n            setHideAction(p.find(\".legendColorBox\"));\r\n\r\n            if (!drawnOnce) {\r\n                drawnOnce = true;\r\n                if (options.legend.hidden) {\r\n                    for (var i = 0; i < options.legend.hidden.length; i++) {\r\n                        plotLabelClicked(options.legend.hidden[i], true);\r\n                    }\r\n                    setSetupRedraw();\r\n                }\r\n            }\r\n        }\r\n\r\n        function checkOptions(plot, options) {\r\n            if (!options.legend.hideable) {\r\n                return;\r\n            }\r\n\r\n            options.legend.labelFormatter = function(label, series) {\r\n                return '<span class=\"graphlabel\">' + label + '</span>';\r\n            };\r\n        }\r\n\r\n        function hideDatapointsIfNecessary(plot, s, datapoints) {\r\n            var options = plot.getOptions();\r\n\r\n            if (!options.legend.hideable) {\r\n                return;\r\n            }\r\n\r\n            if (options.legend.hidden &&\r\n                options.legend.hidden.indexOf(s.label) > -1) {\r\n                var off = false;\r\n\r\n                if (s.points.show) {\r\n                    s.points.show = false;\r\n                    s.points.oldShow = true;\r\n                    off = true;\r\n                }\r\n                if (s.lines.show) {\r\n                    s.lines.show = false;\r\n                    s.lines.oldShow = true;\r\n                    off = true;\r\n                }\r\n\r\n                if (off) {\r\n                    s.oldColor = s.color;\r\n                    s.color = \"#fff\";\r\n                }\r\n            }\r\n\r\n            if (!s.points.show && !s.lines.show) {\r\n                s.datapoints.format = [ null, null ];\r\n            }\r\n        }\r\n\r\n        plot.hooks.processOptions.push(checkOptions);\r\n\r\n        plot.hooks.draw.push(function (plot, ctx) {\r\n            plotLabelHandlers(plot);\r\n        });\r\n\r\n        plot.hooks.processDatapoints.push(hideDatapointsIfNecessary);\r\n    }\r\n\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: 'hiddenGraphs',\r\n        version: '1.1'\r\n    });\r\n\r\n})(jQuery);\r\n","/*\r\nFlot plugin for computing bottoms for filled line and bar charts.\r\n\r\nThe case: you've got two series that you want to fill the area\r\nbetween. In Flot terms, you need to use one as the fill bottom of the\r\nother. You can specify the bottom of each data point as the third\r\ncoordinate manually, or you can use this plugin to compute it for you.\r\n\r\nIn order to name the other series, you need to give it an id, like this\r\n\r\n  var dataset = [\r\n       { data: [ ... ], id: \"foo\" } ,         // use default bottom\r\n       { data: [ ... ], fillBetween: \"foo\" }, // use first dataset as bottom\r\n       ];\r\n\r\n  $.plot($(\"#placeholder\"), dataset, { line: { show: true, fill: true }});\r\n\r\nAs a convenience, if the id given is a number that doesn't appear as\r\nan id in the series, it is interpreted as the index in the array\r\ninstead (so fillBetween: 0 can also mean the first series).\r\n  \r\nInternally, the plugin modifies the datapoints in each series. For\r\nline series, extra data points might be inserted through\r\ninterpolation. Note that at points where the bottom line is not\r\ndefined (due to a null point or start/end of line), the current line\r\nwill show a gap too. The algorithm comes from the jquery.flot.stack.js\r\nplugin, possibly some code could be shared.\r\n*/\r\n\r\n(function ($) {\r\n    var options = {\r\n        series: { fillBetween: null } // or number\r\n    };\r\n    \r\n    function init(plot) {\r\n        function findBottomSeries(s, allseries) {\r\n            var i;\r\n            for (i = 0; i < allseries.length; ++i) {\r\n                if (allseries[i].id == s.fillBetween)\r\n                    return allseries[i];\r\n            }\r\n\r\n            if (typeof s.fillBetween == \"number\") {\r\n                i = s.fillBetween;\r\n            \r\n                if (i < 0 || i >= allseries.length)\r\n                    return null;\r\n\r\n                return allseries[i];\r\n            }\r\n            \r\n            return null;\r\n        }\r\n        \r\n        function computeFillBottoms(plot, s, datapoints) {\r\n            if (s.fillBetween == null)\r\n                return;\r\n\r\n            var other = findBottomSeries(s, plot.getData());\r\n            if (!other)\r\n                return;\r\n\r\n            var ps = datapoints.pointsize,\r\n                points = datapoints.points,\r\n                otherps = other.datapoints.pointsize,\r\n                otherpoints = other.datapoints.points,\r\n                newpoints = [],\r\n                px, py, intery, qx, qy, bottom,\r\n                withlines = s.lines.show,\r\n                withbottom = ps > 2 && datapoints.format[2].y,\r\n                withsteps = withlines && s.lines.steps,\r\n                fromgap = true,\r\n                i = 0, j = 0, l;\r\n\r\n            while (true) {\r\n                if (i >= points.length)\r\n                    break;\r\n\r\n                l = newpoints.length;\r\n\r\n                if (points[i] == null) {\r\n                    // copy gaps\r\n                    for (m = 0; m < ps; ++m)\r\n                        newpoints.push(points[i + m]);\r\n                    i += ps;\r\n                }\r\n                else if (j >= otherpoints.length) {\r\n                    // for lines, we can't use the rest of the points\r\n                    if (!withlines) {\r\n                        for (m = 0; m < ps; ++m)\r\n                            newpoints.push(points[i + m]);\r\n                    }\r\n                    i += ps;\r\n                }\r\n                else if (otherpoints[j] == null) {\r\n                    // oops, got a gap\r\n                    for (m = 0; m < ps; ++m)\r\n                        newpoints.push(null);\r\n                    fromgap = true;\r\n                    j += otherps;\r\n                }\r\n                else {\r\n                    // cases where we actually got two points\r\n                    px = points[i];\r\n                    py = points[i + 1];\r\n                    qx = otherpoints[j];\r\n                    qy = otherpoints[j + 1];\r\n                    bottom = 0;\r\n\r\n                    if (px == qx) {\r\n                        for (m = 0; m < ps; ++m)\r\n                            newpoints.push(points[i + m]);\r\n\r\n                        //newpoints[l + 1] += qy;\r\n                        bottom = qy;\r\n                        \r\n                        i += ps;\r\n                        j += otherps;\r\n                    }\r\n                    else if (px > qx) {\r\n                        // we got past point below, might need to\r\n                        // insert interpolated extra point\r\n                        if (withlines && i > 0 && points[i - ps] != null) {\r\n                            intery = py + (points[i - ps + 1] - py) * (qx - px) / (points[i - ps] - px);\r\n                            newpoints.push(qx);\r\n                            newpoints.push(intery)\r\n                            for (m = 2; m < ps; ++m)\r\n                                newpoints.push(points[i + m]);\r\n                            bottom = qy; \r\n                        }\r\n\r\n                        j += otherps;\r\n                    }\r\n                    else { // px < qx\r\n                        if (fromgap && withlines) {\r\n                            // if we come from a gap, we just skip this point\r\n                            i += ps;\r\n                            continue;\r\n                        }\r\n                            \r\n                        for (m = 0; m < ps; ++m)\r\n                            newpoints.push(points[i + m]);\r\n                        \r\n                        // we might be able to interpolate a point below,\r\n                        // this can give us a better y\r\n                        if (withlines && j > 0 && otherpoints[j - otherps] != null)\r\n                            bottom = qy + (otherpoints[j - otherps + 1] - qy) * (px - qx) / (otherpoints[j - otherps] - qx);\r\n\r\n                        //newpoints[l + 1] += bottom;\r\n                        \r\n                        i += ps;\r\n                    }\r\n\r\n                    fromgap = false;\r\n                    \r\n                    if (l != newpoints.length && withbottom)\r\n                        newpoints[l + 2] = bottom;\r\n                }\r\n\r\n                // maintain the line steps invariant\r\n                if (withsteps && l != newpoints.length && l > 0\r\n                    && newpoints[l] != null\r\n                    && newpoints[l] != newpoints[l - ps]\r\n                    && newpoints[l + 1] != newpoints[l - ps + 1]) {\r\n                    for (m = 0; m < ps; ++m)\r\n                        newpoints[l + ps + m] = newpoints[l + m];\r\n                    newpoints[l + 1] = newpoints[l - ps + 1];\r\n                }\r\n            }\r\n\r\n            datapoints.points = newpoints;\r\n        }\r\n        \r\n        plot.hooks.processDatapoints.push(computeFillBottoms);\r\n    }\r\n    \r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: 'fillbetween',\r\n        version: '1.0'\r\n    });\r\n})(jQuery);\r\n","/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n(function(a){function e(h){var k,j=this,l=h.data||{};if(l.elem)j=h.dragTarget=l.elem,h.dragProxy=d.proxy||j,h.cursorOffsetX=l.pageX-l.left,h.cursorOffsetY=l.pageY-l.top,h.offsetX=h.pageX-h.cursorOffsetX,h.offsetY=h.pageY-h.cursorOffsetY;else if(d.dragging||l.which>0&&h.which!=l.which||a(h.target).is(l.not))return;switch(h.type){case\"mousedown\":return a.extend(l,a(j).offset(),{elem:j,target:h.target,pageX:h.pageX,pageY:h.pageY}),b.add(document,\"mousemove mouseup\",e,l),i(j,!1),d.dragging=null,!1;case!d.dragging&&\"mousemove\":if(g(h.pageX-l.pageX)+g(h.pageY-l.pageY)<l.distance)break;h.target=l.target,k=f(h,\"dragstart\",j),k!==!1&&(d.dragging=j,d.proxy=h.dragProxy=a(k||j)[0]);case\"mousemove\":if(d.dragging){if(k=f(h,\"drag\",j),c.drop&&(c.drop.allowed=k!==!1,c.drop.handler(h)),k!==!1)break;h.type=\"mouseup\"}case\"mouseup\":b.remove(document,\"mousemove mouseup\",e),d.dragging&&(c.drop&&c.drop.handler(h),f(h,\"dragend\",j)),i(j,!0),d.dragging=d.proxy=l.elem=!1}return!0}function f(b,c,d){b.type=c;var e=a.event.dispatch.call(d,b);return e===!1?!1:e||b.result}function g(a){return Math.pow(a,2)}function h(){return d.dragging===!1}function i(a,b){a&&(a.unselectable=b?\"off\":\"on\",a.onselectstart=function(){return b},a.style&&(a.style.MozUserSelect=b?\"\":\"none\"))}a.fn.drag=function(a,b,c){return b&&this.bind(\"dragstart\",a),c&&this.bind(\"dragend\",c),a?this.bind(\"drag\",b?b:a):this.trigger(\"drag\")};var b=a.event,c=b.special,d=c.drag={not:\":input\",distance:0,which:1,dragging:!1,setup:function(c){c=a.extend({distance:d.distance,which:d.which,not:d.not},c||{}),c.distance=g(c.distance),b.add(this,\"mousedown\",e,c),this.attachEvent&&this.attachEvent(\"ondragstart\",h)},teardown:function(){b.remove(this,\"mousedown\",e),this===d.dragging&&(d.dragging=d.proxy=!1),i(this,!0),this.detachEvent&&this.detachEvent(\"ondragstart\",h)}};c.dragstart=c.dragend={setup:function(){},teardown:function(){}}})(jQuery);(function(d){function e(a){var b=a||window.event,c=[].slice.call(arguments,1),f=0,e=0,g=0,a=d.event.fix(b);a.type=\"mousewheel\";b.wheelDelta&&(f=b.wheelDelta/120);b.detail&&(f=-b.detail/3);g=f;void 0!==b.axis&&b.axis===b.HORIZONTAL_AXIS&&(g=0,e=-1*f);void 0!==b.wheelDeltaY&&(g=b.wheelDeltaY/120);void 0!==b.wheelDeltaX&&(e=-1*b.wheelDeltaX/120);c.unshift(a,f,e,g);return(d.event.dispatch||d.event.handle).apply(this,c)}var c=[\"DOMMouseScroll\",\"mousewheel\"];if(d.event.fixHooks)for(var h=c.length;h;)d.event.fixHooks[c[--h]]=d.event.mouseHooks;d.event.special.mousewheel={setup:function(){if(this.addEventListener)for(var a=c.length;a;)this.addEventListener(c[--a],e,!1);else this.onmousewheel=e},teardown:function(){if(this.removeEventListener)for(var a=c.length;a;)this.removeEventListener(c[--a],e,!1);else this.onmousewheel=null}};d.fn.extend({mousewheel:function(a){return a?this.bind(\"mousewheel\",a):this.trigger(\"mousewheel\")},unmousewheel:function(a){return this.unbind(\"mousewheel\",a)}})})(jQuery);(function($){var options={xaxis:{zoomRange:null,panRange:null},zoom:{interactive:false,trigger:\"dblclick\",amount:1.5},pan:{interactive:false,cursor:\"move\",frameRate:20}};function init(plot){function onZoomClick(e,zoomOut){var c=plot.offset();c.left=e.pageX-c.left;c.top=e.pageY-c.top;if(zoomOut)plot.zoomOut({center:c});else plot.zoom({center:c})}function onMouseWheel(e,delta){e.preventDefault();onZoomClick(e,delta<0);return false}var prevCursor=\"default\",prevPageX=0,prevPageY=0,panTimeout=null;function onDragStart(e){if(e.which!=1)return false;var c=plot.getPlaceholder().css(\"cursor\");if(c)prevCursor=c;plot.getPlaceholder().css(\"cursor\",plot.getOptions().pan.cursor);prevPageX=e.pageX;prevPageY=e.pageY}function onDrag(e){var frameRate=plot.getOptions().pan.frameRate;if(panTimeout||!frameRate)return;panTimeout=setTimeout(function(){plot.pan({left:prevPageX-e.pageX,top:prevPageY-e.pageY});prevPageX=e.pageX;prevPageY=e.pageY;panTimeout=null},1/frameRate*1e3)}function onDragEnd(e){if(panTimeout){clearTimeout(panTimeout);panTimeout=null}plot.getPlaceholder().css(\"cursor\",prevCursor);plot.pan({left:prevPageX-e.pageX,top:prevPageY-e.pageY})}function bindEvents(plot,eventHolder){var o=plot.getOptions();if(o.zoom.interactive){eventHolder[o.zoom.trigger](onZoomClick);eventHolder.mousewheel(onMouseWheel)}if(o.pan.interactive){eventHolder.bind(\"dragstart\",{distance:10},onDragStart);eventHolder.bind(\"drag\",onDrag);eventHolder.bind(\"dragend\",onDragEnd)}}plot.zoomOut=function(args){if(!args)args={};if(!args.amount)args.amount=plot.getOptions().zoom.amount;args.amount=1/args.amount;plot.zoom(args)};plot.zoom=function(args){if(!args)args={};var c=args.center,amount=args.amount||plot.getOptions().zoom.amount,w=plot.width(),h=plot.height();if(!c)c={left:w/2,top:h/2};var xf=c.left/w,yf=c.top/h,minmax={x:{min:c.left-xf*w/amount,max:c.left+(1-xf)*w/amount},y:{min:c.top-yf*h/amount,max:c.top+(1-yf)*h/amount}};$.each(plot.getAxes(),function(_,axis){var opts=axis.options,min=minmax[axis.direction].min,max=minmax[axis.direction].max,zr=opts.zoomRange,pr=opts.panRange;if(zr===false)return;min=axis.c2p(min);max=axis.c2p(max);if(min>max){var tmp=min;min=max;max=tmp}if(pr){if(pr[0]!=null&&min<pr[0]){min=pr[0]}if(pr[1]!=null&&max>pr[1]){max=pr[1]}}var range=max-min;if(zr&&(zr[0]!=null&&range<zr[0]&&amount>1||zr[1]!=null&&range>zr[1]&&amount<1))return;opts.min=min;opts.max=max});plot.setupGrid();plot.draw();if(!args.preventEvent)plot.getPlaceholder().trigger(\"plotzoom\",[plot,args])};plot.pan=function(args){var delta={x:+args.left,y:+args.top};if(isNaN(delta.x))delta.x=0;if(isNaN(delta.y))delta.y=0;$.each(plot.getAxes(),function(_,axis){var opts=axis.options,min,max,d=delta[axis.direction];min=axis.c2p(axis.p2c(axis.min)+d),max=axis.c2p(axis.p2c(axis.max)+d);var pr=opts.panRange;if(pr===false)return;if(pr){if(pr[0]!=null&&pr[0]>min){d=pr[0]-min;min+=d;max+=d}if(pr[1]!=null&&pr[1]<max){d=pr[1]-max;min+=d;max+=d}}opts.min=min;opts.max=max});plot.setupGrid();plot.draw();if(!args.preventEvent)plot.getPlaceholder().trigger(\"plotpan\",[plot,args])};function shutdown(plot,eventHolder){eventHolder.unbind(plot.getOptions().zoom.trigger,onZoomClick);eventHolder.unbind(\"mousewheel\",onMouseWheel);eventHolder.unbind(\"dragstart\",onDragStart);eventHolder.unbind(\"drag\",onDrag);eventHolder.unbind(\"dragend\",onDragEnd);if(panTimeout)clearTimeout(panTimeout)}plot.hooks.bindEvents.push(bindEvents);plot.hooks.shutdown.push(shutdown)}$.plot.plugins.push({init:init,options:options,name:\"navigate\",version:\"1.3\"})})(jQuery);","/*\r\n * jQuery.flot.dashes\r\n *\r\n * options = {\r\n *   series: {\r\n *     dashes: {\r\n *\r\n *       // show\r\n *       // default: false\r\n *       // Whether to show dashes for the series.\r\n *       show: <boolean>,\r\n *\r\n *       // lineWidth\r\n *       // default: 2\r\n *       // The width of the dashed line in pixels.\r\n *       lineWidth: <number>,\r\n *\r\n *       // dashLength\r\n *       // default: 10\r\n *       // Controls the length of the individual dashes and the amount of\r\n *       // space between them.\r\n *       // If this is a number, the dashes and spaces will have that length.\r\n *       // If this is an array, it is read as [ dashLength, spaceLength ]\r\n *       dashLength: <number> or <array[2]>\r\n *     }\r\n *   }\r\n * }\r\n */\r\n(function($){\r\n  var options = {\r\n    series: {\r\n      dashes: {\r\n        show: false,\r\n        lineWidth: 2,\r\n        dashLength: 10\r\n      }\r\n    }\r\n  };\r\n  function init(plot) {\r\n    plot.hooks.drawSeries.push(function(plot, ctx, series) {\r\n      if (!series.dashes.show) return;\r\n\r\n      var plotOffset = plot.getPlotOffset(),\r\n          axisx = series.xaxis,\r\n          axisy = series.yaxis;\r\n\r\n      function plotDashes(xoffset, yoffset) {\r\n\r\n        var points = series.datapoints.points,\r\n            ps = series.datapoints.pointsize,\r\n            prevx = null,\r\n            prevy = null,\r\n            dashRemainder = 0,\r\n            dashOn = true,\r\n            dashOnLength,\r\n            dashOffLength;\r\n\r\n        if (series.dashes.dashLength[0]) {\r\n          dashOnLength = series.dashes.dashLength[0];\r\n          if (series.dashes.dashLength[1]) {\r\n            dashOffLength = series.dashes.dashLength[1];\r\n          } else {\r\n            dashOffLength = dashOnLength;\r\n          }\r\n        } else {\r\n          dashOffLength = dashOnLength = series.dashes.dashLength;\r\n        }\r\n\r\n        ctx.beginPath();\r\n\r\n        for (var i = ps; i < points.length; i += ps) {\r\n\r\n          var x1 = points[i - ps],\r\n              y1 = points[i - ps + 1],\r\n              x2 = points[i],\r\n              y2 = points[i + 1];\r\n\r\n          if (x1 == null || x2 == null) continue;\r\n\r\n          // clip with ymin\r\n          if (y1 <= y2 && y1 < axisy.min) {\r\n            if (y2 < axisy.min) continue;   // line segment is outside\r\n            // compute new intersection point\r\n            x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y1 = axisy.min;\r\n          } else if (y2 <= y1 && y2 < axisy.min) {\r\n            if (y1 < axisy.min) continue;\r\n            x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y2 = axisy.min;\r\n          }\r\n\r\n          // clip with ymax\r\n          if (y1 >= y2 && y1 > axisy.max) {\r\n            if (y2 > axisy.max) continue;\r\n            x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y1 = axisy.max;\r\n          } else if (y2 >= y1 && y2 > axisy.max) {\r\n            if (y1 > axisy.max) continue;\r\n            x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n            y2 = axisy.max;\r\n          }\r\n\r\n          // clip with xmin\r\n          if (x1 <= x2 && x1 < axisx.min) {\r\n            if (x2 < axisx.min) continue;\r\n            y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x1 = axisx.min;\r\n          } else if (x2 <= x1 && x2 < axisx.min) {\r\n            if (x1 < axisx.min) continue;\r\n            y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x2 = axisx.min;\r\n          }\r\n\r\n          // clip with xmax\r\n          if (x1 >= x2 && x1 > axisx.max) {\r\n            if (x2 > axisx.max) continue;\r\n            y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x1 = axisx.max;\r\n          } else if (x2 >= x1 && x2 > axisx.max) {\r\n            if (x1 > axisx.max) continue;\r\n            y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n            x2 = axisx.max;\r\n          }\r\n\r\n          if (x1 != prevx || y1 != prevy) {\r\n            ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\r\n          }\r\n\r\n          var ax1 = axisx.p2c(x1) + xoffset,\r\n              ay1 = axisy.p2c(y1) + yoffset,\r\n              ax2 = axisx.p2c(x2) + xoffset,\r\n              ay2 = axisy.p2c(y2) + yoffset,\r\n              dashOffset;\r\n\r\n          function lineSegmentOffset(segmentLength) {\r\n\r\n            var c = Math.sqrt(Math.pow(ax2 - ax1, 2) + Math.pow(ay2 - ay1, 2));\r\n\r\n            if (c <= segmentLength) {\r\n              return {\r\n                deltaX: ax2 - ax1,\r\n                deltaY: ay2 - ay1,\r\n                distance: c,\r\n                remainder: segmentLength - c\r\n              }\r\n            } else {\r\n              var xsign = ax2 > ax1 ? 1 : -1,\r\n                  ysign = ay2 > ay1 ? 1 : -1;\r\n              return {\r\n                deltaX: xsign * Math.sqrt(Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\r\n                deltaY: ysign * Math.sqrt(Math.pow(segmentLength, 2) - Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\r\n                distance: segmentLength,\r\n                remainder: 0\r\n              };\r\n            }\r\n          }\r\n          //-end lineSegmentOffset\r\n\r\n          do {\r\n\r\n            dashOffset = lineSegmentOffset(\r\n                dashRemainder > 0 ? dashRemainder :\r\n                  dashOn ? dashOnLength : dashOffLength);\r\n\r\n            if (dashOffset.deltaX != 0 || dashOffset.deltaY != 0) {\r\n              if (dashOn) {\r\n                ctx.lineTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\r\n              } else {\r\n                ctx.moveTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\r\n              }\r\n            }\r\n\r\n            dashOn = !dashOn;\r\n            dashRemainder = dashOffset.remainder;\r\n            ax1 += dashOffset.deltaX;\r\n            ay1 += dashOffset.deltaY;\r\n\r\n          } while (dashOffset.distance > 0);\r\n\r\n          prevx = x2;\r\n          prevy = y2;\r\n        }\r\n\r\n        ctx.stroke();\r\n      }\r\n      //-end plotDashes\r\n\r\n      ctx.save();\r\n      ctx.translate(plotOffset.left, plotOffset.top);\r\n      ctx.lineJoin = 'round';\r\n\r\n      var lw = series.dashes.lineWidth,\r\n          sw = series.shadowSize;\r\n\r\n      // FIXME: consider another form of shadow when filling is turned on\r\n      if (lw > 0 && sw > 0) {\r\n        // draw shadow as a thick and thin line with transparency\r\n        ctx.lineWidth = sw;\r\n        ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\r\n        // position shadow at angle from the mid of line\r\n        var angle = Math.PI/18;\r\n        plotDashes(Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2));\r\n        ctx.lineWidth = sw/2;\r\n        plotDashes(Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4));\r\n      }\r\n\r\n      ctx.lineWidth = lw;\r\n      ctx.strokeStyle = series.color;\r\n\r\n      if (lw > 0) {\r\n        plotDashes(0, 0);\r\n      }\r\n\r\n      ctx.restore();\r\n\r\n    });\r\n    //-end draw hook\r\n  }\r\n  //-end init\r\n\r\n  $.plot.plugins.push({\r\n    init: init,\r\n    options: options,\r\n    name: 'dashes',\r\n    version: '0.1'\r\n  });\r\n\r\n})(jQuery);\r\n","/*\r\n * The MIT License\r\n\r\nCopyright (c) 2010,2011,2012, 2013 by Juergen Marsch\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\r\n/*\r\n * Added changerequest from Thodoris Greasidis\r\n * It makes growing more \r\n */\r\n(function ($){\r\n    \"use strict\";\r\n    var pluginName = \"grow\", pluginVersion = \"0.4\";\r\n    var options = {\r\n        series: {\r\n            grow: {\r\n                active: false,\r\n                stepDelay: 20,\r\n                steps:100,\r\n                growings:[\r\n                    {\r\n                        valueIndex: 1,\r\n                        stepMode: \"linear\",\r\n                        stepDirection: \"up\"\r\n                    }                    \r\n                ]\r\n            }\r\n        }\r\n    };\r\n    function init(plot) {\r\n        var done = false;\r\n        var growfunc;\r\n        var plt = plot;\r\n        var data = null;\r\n        var opt = null;\r\n        var serie = null;\r\n        var valueIndex;\r\n        plot.hooks.bindEvents.push(processbindEvents);\r\n        plot.hooks.drawSeries.push(processSeries);\r\n        plot.hooks.shutdown.push(shutdown);\t\t\r\n        function processSeries(plot, canvascontext, series){\r\n            opt = plot.getOptions();\r\n            valueIndex = opt.series.grow.valueIndex;\r\n            if(opt.series.grow.active === true){\r\n                if (done === false){\r\n                    data = plot.getData();\r\n                    data.actualStep = 0;\r\n                    data.growingIndex = 0;\r\n                    for (var j = 0; j < data.length; j++){\r\n                        data[j].dataOrg = clone(data[j].data);\r\n                        for (var i = 0; i < data[j].data.length; i++){ data[j].data[i][valueIndex] = 0;}\r\n                    }\r\n                    plot.setData(data);\r\n                    done = true;\r\n                }\r\n            }\r\n        }\r\n        function processbindEvents(plot,eventHolder){\r\n            opt = plot.getOptions();\r\n            if (opt.series.grow.active === true){\r\n                var d = plot.getData();\r\n                for (var j = 0; j < data.length; j++) {\r\n                    opt.series.grow.steps = Math.max(opt.series.grow.steps, d[j].grow.steps);\r\n                }\r\n                if(opt.series.grow.stepDelay === 0){ opt.series.grow.stepDelay++;}\r\n                growingLoop();\r\n                if (isPluginRegistered(\"resize\")) {\r\n                    plot.getPlaceholder().bind(\"resize\", onResize);\r\n                }\r\n            }\r\n        }\r\n        function growingLoop(){\r\n            var growing, startTime = new Date(), timeDiff;\r\n            if (data.actualStep < opt.series.grow.steps){\r\n                data.actualStep++;\r\n                for(var j = 0; j < data.length; j++){\r\n                    for(var g = 0; g < data[j].grow.growings.length; g++){\r\n                        growing = data[j].grow.growings[g];\r\n                        if (typeof growing.stepMode === \"function\"){\r\n                            growing.stepMode(data[j],data.actualStep,growing);\r\n                        }\r\n                        else{\r\n                            if (growing.stepMode === \"linear\"){ growLinear();}\r\n                            else if (growing.stepMode === \"maximum\"){ growMaximum();}\r\n                            else if (growing.stepMode === \"delay\"){ growDelay();}\r\n                            else{growNone();}\r\n                        }\r\n                    }\r\n                }\r\n                plt.setData(data);\r\n                plt.draw();\r\n                timeDiff = new Date() - startTime;\r\n                growfunc = window.setTimeout(growingLoop, Math.max(0,opt.series.grow.stepDelay - timeDiff));\r\n            }\r\n            else{ window.clearTimeout(growfunc); growfunc = null; }\r\n            function growNone(){\r\n                if (data.actualStep === 1){\r\n                    for (var i = 0; i < data[j].data.length; i++){\r\n                        data[j].data[i][valueIndex] = data[j].dataOrg[i][growing.valueIndex];\r\n                    }\r\n                }\r\n            }\r\n            function growLinear(){\r\n                if (data.actualStep <= data[j].grow.steps){\r\n                    for (var i = 0; i < data[j].data.length; i++){\t\r\n                        if (growing.stepDirection === \"up\"){\t\r\n                            data[j].data[i][growing.valueIndex] = data[j].dataOrg[i][growing.valueIndex] / data[j].grow.steps * data.actualStep;\r\n                        }\r\n                        else if(growing.stepDirection === \"down\"){\r\n                            data[j].data[i][growing.valueIndex] = data[j].dataOrg[i][growing.valueIndex] + (data[j].yaxis.max - data[j].dataOrg[i][growing.valueIndex]) / data[j].grow.steps * (data[j].grow.steps - data.actualStep); \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function growMaximum(){\r\n                if (data.actualStep <= data[j].grow.steps){\r\n                    for (var i = 0; i < data[j].data.length; i++){\r\n                        if (growing.stepDirection === \"up\"){\r\n                            data[j].data[i][growing.valueIndex] = Math.min(data[j].dataOrg[i][growing.valueIndex], data[j].yaxis.max / data[j].grow.steps * data.actualStep);\r\n                        }\r\n                        else if (growing.stepDirection === \"down\"){\r\n                            data[j].data[i][growing.valueIndex] = Math.max(data[j].dataOrg[i][growing.valueIndex], data[j].yaxis.max / data[j].grow.steps * (data[j].grow.steps - data.actualStep) ); \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function growDelay(){\r\n                if (data.actualStep == data[j].grow.steps){\r\n                    for (var i = 0; i < data[j].data.length; i++){\r\n                        data[j].data[i][growing.valueIndex] = data[j].dataOrg[i][growing.valueIndex];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        function onResize() {\r\n            if (growfunc) { window.clearTimeout(growfunc); growfunc = null; }\r\n        }\r\n        function shutdown(plot, eventHolder) {\r\n            plot.getPlaceholder().unbind(\"resize\", onResize);\r\n        }\r\n        function isPluginRegistered(pluginName) {\r\n            var plugins = $.plot.plugins;\r\n            for (var i = 0, len = plugins.length; i < len; i++) {\r\n                var plug = plugins[i];\r\n                if (plug.name === pluginName) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        function clone(obj){\r\n            if(obj === null || typeof(obj) !== 'object'){ return obj;}\r\n            var temp = new obj.constructor();\r\n            for(var key in obj){temp[key] = clone(obj[key]); }\r\n            return temp;\r\n        }\r\n    }\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: pluginName,\r\n        version: pluginVersion\r\n    });\r\n})(jQuery);","(function(deparam){\r\n    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\r\n        var jquery = require('jquery');\r\n        module.exports = deparam(jquery);\r\n    } else if (typeof define === 'function' && define.amd){\r\n        define(['jquery'], function(jquery){\r\n            return deparam(jquery);\r\n        });\r\n    } else {\r\n        var global\r\n        try {\r\n            global = (false || eval)('this'); // best cross-browser way to determine global for < ES5\r\n        } catch (e) {\r\n            global = window; // fails only if browser (https://developer.mozilla.org/en-US/docs/Web/Security/CSP/CSP_policy_directives)\r\n        }\r\n        global.deparam = deparam(jQuery); // assume jQuery is in global namespace\r\n    }\r\n})(function ($) {\r\n    var deparam = function( params, coerce ) {\r\n        var obj = {},\r\n            coerce_types = { 'true': !0, 'false': !1, 'null': null };\r\n\r\n        // Iterate over all name=value pairs.\r\n        params.replace(/\\+/g, ' ').split('&').forEach(function(v){\r\n            var param = v.split( '=' ),\r\n                key = decodeURIComponent( param[0] ),\r\n                val,\r\n                cur = obj,\r\n                i = 0,\r\n\r\n            // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\r\n            // into its component parts.\r\n                keys = key.split( '][' ),\r\n                keys_last = keys.length - 1;\r\n\r\n            // If the first keys part contains [ and the last ends with ], then []\r\n            // are correctly balanced.\r\n            if ( /\\[/.test( keys[0] ) && /\\]$/.test( keys[ keys_last ] ) ) {\r\n                // Remove the trailing ] from the last keys part.\r\n                keys[ keys_last ] = keys[ keys_last ].replace( /\\]$/, '' );\r\n\r\n                // Split first keys part into two parts on the [ and add them back onto\r\n                // the beginning of the keys array.\r\n                keys = keys.shift().split('[').concat( keys );\r\n\r\n                keys_last = keys.length - 1;\r\n            } else {\r\n                // Basic 'foo' style key.\r\n                keys_last = 0;\r\n            }\r\n\r\n            // Are we dealing with a name=value pair, or just a name?\r\n            if ( param.length === 2 ) {\r\n                val = decodeURIComponent( param[1] );\r\n\r\n                // Coerce values.\r\n                if ( coerce ) {\r\n                    val = val && !isNaN(val) && ((+val + '') === val) ? +val        // number\r\n                        : val === 'undefined'                       ? undefined         // undefined\r\n                        : coerce_types[val] !== undefined           ? coerce_types[val] // true, false, null\r\n                        : val;                                                          // string\r\n                }\r\n\r\n                if ( keys_last ) {\r\n                    // Complex key, build deep object structure based on a few rules:\r\n                    // * The 'cur' pointer starts at the object top-level.\r\n                    // * [] = array push (n is set to array length), [n] = array if n is\r\n                    //   numeric, otherwise object.\r\n                    // * If at the last keys part, set the value.\r\n                    // * For each keys part, if the current level is undefined create an\r\n                    //   object or array based on the type of the next keys part.\r\n                    // * Move the 'cur' pointer to the next level.\r\n                    // * Rinse & repeat.\r\n                    for ( ; i <= keys_last; i++ ) {\r\n                        key = keys[i] === '' ? cur.length : keys[i];\r\n                        cur = cur[key] = i < keys_last\r\n                            ? cur[key] || ( keys[i+1] && isNaN( keys[i+1] ) ? {} : [] )\r\n                            : val;\r\n                    }\r\n\r\n                } else {\r\n                    // Simple key, even simpler rules, since only scalars and shallow\r\n                    // arrays are allowed.\r\n\r\n                    if ( Object.prototype.toString.call( obj[key] ) === '[object Array]' ) {\r\n                        // val is already an array, so push on the next value.\r\n                        obj[key].push( val );\r\n\r\n                    } else if ( {}.hasOwnProperty.call(obj, key) ) {\r\n                        // val isn't an array, but since a second value has been specified,\r\n                        // convert val into an array.\r\n                        obj[key] = [ obj[key], val ];\r\n\r\n                    } else {\r\n                        // val is a scalar.\r\n                        obj[key] = val;\r\n                    }\r\n                }\r\n\r\n            } else if ( key ) {\r\n                // No value was defined, so set something meaningful.\r\n                obj[key] = coerce\r\n                    ? undefined\r\n                    : '';\r\n            }\r\n        });\r\n\r\n        return obj;\r\n    };\r\n    $.prototype.deparam = $.deparam = deparam;\r\n    return deparam;\r\n});\r\n","var months = {\r\n    'en': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    'de': ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],\r\n    'ru': ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],\r\n    'es': ['Jan', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],\r\n    'fr': ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    'it': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    'pl': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    'pt': ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Set', 'Out', 'Nov', 'Dez'],\r\n    'nl': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n};\r\nvar days = {\r\n    'en': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'de': ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],\r\n    'ru': ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'],\r\n    'es': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'fr': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'it': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'pl': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'pt': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'nl': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n};","//options: {\r\n//   chartId:\r\n//   titleId:\r\n//   tooltipId:\r\n//   cbOnZoom:\r\n// }\r\n\r\nfunction CustomChart(options, config, seriesData, markLines, ticks) {\r\n    'use strict';\r\n\r\n    if (!(this instanceof CustomChart)) {\r\n        return new CustomChart(options, config, seriesData, markLines, ticks);\r\n    }\r\n\r\n    this.chart   = null;\r\n    this.config  = config;\r\n    this.options = options;\r\n\r\n    var that     = this;\r\n    var series;\r\n    var markingsOffset = 0;\r\n    var settings;\r\n    var backgrounds = [\r\n        ['#8e9eab', '#eef2f3'], // Portrait\r\n        ['#517fa4', '#243949'], // Instagram\r\n        ['#485563', '#29323c'], // ServQuick\r\n        ['#abbaab', '#00ffff'], // Metallic Toad\r\n        ['#ECE9E6', '#00ffff'], // Clouds\r\n        ['#16222A', '#3A6073'], // Mirage\r\n        ['#1F1C2C', '#928DAB'], // Steel Gray\r\n        ['#003973', '#E5E5BE'], // Horizon\r\n        ['#D1913C', '#FFD194'], // Koko Caramel\r\n        ['#136a8a', '#267871']  // Turquoise flow\r\n    ];\r\n\r\n    function _yFormatter(y, line) {\r\n        if (typeof y === 'boolean') return '' + y;\r\n        var unit = that.config.l[line].unit ? ' ' + that.config.l[line].unit : '';\r\n        if (that.config.l[line].afterComma !== undefined && that.config.l[line].afterComma !== null) {\r\n            y = parseFloat(y);\r\n            if (that.config.useComma) {\r\n                return y.toFixed(that.config.l[line].afterComma).toString().replace('.', ',') + unit;\r\n            } else {\r\n                return y.toFixed(that.config.l[line].afterComma) + unit;\r\n            }\r\n        } else {\r\n            if (that.config.useComma) {\r\n                y = parseFloat(y);\r\n                return y.toString().replace('.', ',') + unit;\r\n            } else {\r\n                return y + unit;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tickXFormatter(number, object) {\r\n        if (ticks) {\r\n            return ' ';\r\n        }\r\n        var now = new Date(parseInt(number, 10));\r\n        if (that.config.timeFormatDate && that.config.timeFormatTime) {\r\n            if (!object.ticks.length) {\r\n                return '<b><i>' + $.plot.formatDate(now, that.config.timeFormatDate, months[systemLang], days[systemLang]) + '</i></b>';\r\n            }\r\n            var d = new Date(object.ticks[object.ticks.length - 1].v);\r\n            if (d.getDate() !== now.getDate()) {\r\n                return '<b><i>' + $.plot.formatDate(now, that.config.timeFormatDate, months[systemLang], days[systemLang]) + '</i></b>';\r\n            }\r\n            return $.plot.formatDate(now, that.config.timeFormatTime, months[systemLang], days[systemLang]);\r\n        } else {\r\n            return $.plot.formatDate(now, that.config.timeFormat, months[systemLang], days[systemLang]);\r\n        }\r\n    }\r\n\r\n    function _tickYFormatter(number, object) {\r\n        // If tickDecimals was specified, ensure that we have exactly that\r\n        // much precision; otherwise default to the value's own precision.\r\n        var afterComma = that.config.l[object.n - 1].afterComma;\r\n\r\n        if (afterComma !== null && afterComma !== undefined) {\r\n            var factor = afterComma ? Math.pow(10, afterComma) : 1;\r\n            var formatted = (Math.round(number * factor) / factor).toString();\r\n            var decimal = formatted.indexOf('.');\r\n            var precision = decimal === -1 ? 0 : formatted.length - decimal - 1;\r\n\r\n            if (precision < afterComma) {\r\n                number = (precision ? formatted : formatted + '.') + factor.toString().substr(1, afterComma - precision);\r\n            } else {\r\n                number = formatted;\r\n            }\r\n        }\r\n\r\n        if (that.config.useComma) number = number.toString().replace('.', ',');\r\n\r\n        var unit = that.config.l[object.n - 1].unit;\r\n\r\n        return number + (unit ? (' ' + unit) : '');\r\n    }\r\n\r\n    function showLabels (animation) {\r\n        if (that.config.barLabels) {\r\n            setTimeout(function () {\r\n                var data = that.chart.getData();\r\n\r\n                for (var d = markingsOffset; d < data.length; d++) {\r\n                    if (!that.config.l[d - markingsOffset] || that.config.l[d - markingsOffset].chartType !== 'bar') continue;\r\n\r\n                    $.each(data[d].data, function (i, el) {\r\n                        if (el[1] === null) return;\r\n                        if (!i) return;\r\n                        if (i === data[d].data.length - 1) return;\r\n                        var o;\r\n                        if (that.config.barLabels === 'topover') {\r\n                            o = that.chart.pointOffset({x: el[0], y: el[1]});\r\n                            o.top -= 20;\r\n                        } else if (that.config.barLabels === 'topunder') {\r\n                            o = that.chart.pointOffset({x: el[0], y: el[1]});\r\n                            //o.top += 10;\r\n                        } else if (that.config.barLabels === 'bottom') {\r\n                            o = that.chart.pointOffset({x: el[0], y: 0});\r\n                            o.top += 20;\r\n                        } else {//if (that.config.barLabels === 'middle') {\r\n                            o = that.chart.pointOffset({x: el[0], y: el[1] / 2});\r\n                        }\r\n\r\n                        $('<div class=\"data-point-label\"><div style=\"width: 100%; margin-left: -50%;\">' + _yFormatter(el[1], d - markingsOffset) + '</div></div>').css({\r\n                            position: 'absolute',\r\n                            left: o.left,\r\n                            top: o.top\r\n                        }).appendTo(that.chart.getPlaceholder());\r\n                    });\r\n                }\r\n                if (that.config.barFontSize || that.config.barFontColor) {\r\n                    $('.data-point-label').css({\r\n                        'font-size': that.config.barFontSize || undefined,\r\n                        color: that.config.barFontColor || undefined\r\n                    });\r\n                }\r\n\r\n            }, animation ? parseInt(animation) + 200 : 0);\r\n        }\r\n\r\n        if (markLines && markLines.length) {\r\n            setTimeout(function () {\r\n                var data = that.chart.getData();\r\n                var num = 0;\r\n                for (var m = 0; m < markLines.length; m++) {\r\n                    if (markLines[m].d && data[markLines[m].l + markingsOffset]) {\r\n                        var line = data[num].data;\r\n                        var o;\r\n                        var text;\r\n                        if (markLines[m].p === 'l') {\r\n                            o = that.chart.pointOffset({x: line[0][0], y: line[0][1], yaxis: data[markLines[m].l + markingsOffset].yaxis, xaxis: data[markLines[m].l + markingsOffset].xaxis});\r\n                            o.top -= markLines[m].py;\r\n                            text = markLines[m].d;\r\n                        } else {//if (markLines[m].p === 'r') {\r\n                            o = that.chart.pointOffset({x: line[1][0], y: line[1][1], yaxis: data[markLines[m].l + markingsOffset].yaxis, xaxis: data[markLines[m].l + markingsOffset].xaxis});\r\n                            o.top -= markLines[m].py;\r\n                            text = '<div style=\"width: 100%; margin-left: -100%; padding-right: 15px; white-space: nowrap\">' + markLines[m].d + '</div>';\r\n                        }\r\n                        $('<div class=\"marklines-label\"  style=\"padding-left: 10px;  white-space: nowrap\">' + text + '</div>').css({\r\n                            position:   'absolute',\r\n                            left:       o.left,\r\n                            top:        o.top,\r\n                            'font-size': markLines[m].fs || undefined,\r\n                            color:      markLines[m].fc || undefined\r\n                        }).appendTo(that.chart.getPlaceholder());\r\n                    }\r\n                    if (markLines[m].vl !== '' && markLines[m].vl !== null && markLines[m].vl !== undefined) {\r\n                        num++;\r\n                    }\r\n                    num++;\r\n                }\r\n            }, animation ? parseInt(animation) + 200 : 0);\r\n        }\r\n    }\r\n\r\n    (function _constructor () {\r\n        series = [];\r\n        var smoothing = false;\r\n        var $title = $('#' + that.options.titleId);\r\n\r\n        if (that.config.title && !$title.html()) {\r\n            $title.html(that.config.titlePos ? decodeURI(that.config.title) : '');\r\n            if (that.config.titleColor) $title.css('color',    that.config.titleColor);\r\n            if (that.config.titleSize) $title.css('font-size', that.config.titleSize);\r\n            if (that.config.titlePos) {\r\n                var parts = that.config.titlePos.split(';');\r\n                var css = {};\r\n                for (var t = 0; t < parts.length; t++) {\r\n                    var p = parts[t].split(':');\r\n\r\n                    // Bottom inside\r\n                    if (p[0] === 'bottom' && p[1] == '5') {\r\n                        if (that.config.height.indexOf('%') === -1) {\r\n                            css.top = parseInt(that.config.height, 10) - $title.height() - 45;\r\n                        } else {\r\n                            css.top = 'calc(' + that.config.height + ' - ' + ($title.height() + 45) + 'px)';\r\n                        }\r\n                    } else\t// Bottom outside\r\n                    if (p[0] === 'bottom' && p[1] == '-5') {\r\n                        if (that.config.height.indexOf('%') === -1) {\r\n                            css.top = parseInt(that.config.height, 10) + 5;\r\n                        } else {\r\n                            css.top = 'calc(' + that.config.height + ' + 5px)';\r\n                        }\r\n                    } else\t// Middle\r\n                    if (p[0] === 'top' && p[1] == '50') {\r\n                        if (that.config.height.indexOf('%') === -1) {\r\n                            css.top = (parseInt(that.config.height, 10) - $title.height()) / 2;\r\n                        } else {\r\n                            css.top = 'calc(50% - ' + ($title.height() / 2) + 'px)';\r\n                        }\r\n                    } else\t// Center\r\n                    if (p[0] === 'left' && p[1] == '50') {\r\n                        if (that.config.width.indexOf('%') === -1) {\r\n                            css.left = (parseInt(that.config.width, 10) - $title.width()) / 2;\r\n                        } else {\r\n                            css.left = 'calc(50% - ' + ($title.width() / 2) + 'px)';\r\n                        }\r\n                    } else\t// Right inside\r\n                    if (p[0] === 'right' && p[1] == '5') {\r\n                        if (that.config.width.indexOf('%') === -1) {\r\n                            css.left = parseInt(that.config.width, 10) - $title.width() - 45;\r\n                        } else {\r\n                            css.left = 'calc(' + that.config.width + ' - ' + ($title.width() + 45) + 'px)';\r\n                        }\r\n                    } else\t// Right outside\r\n                    if (p[0] === 'right' && p[1] == '-5') {\r\n                        if (that.config.width.indexOf('%') === -1) {\r\n                            css.left = parseInt(that.config.width, 10) + 25;\r\n                        } else {\r\n                            css.left = 'calc(' + that.config.width + ' + 5px)';\r\n                        }\r\n                    } else {\r\n                        css[p[0]] = p[1];\r\n                    }\r\n                }\r\n\r\n                $title.css(css);\r\n            }\r\n        }\r\n\r\n        // Replace background\r\n        if (that.config.bg && that.config.bg.length < 3 && backgrounds[that.config.bg]) {\r\n            that.config.bg = {colors: backgrounds[that.config.bg]};\r\n        }\r\n\r\n        markingsOffset = 0;\r\n        // draw horizontal lines\r\n        if (markLines && markLines.length) {\r\n            for (var m = 0; m < markLines.length; m++) {\r\n                markingsOffset++;\r\n                markLines[m].v  = parseFloat(markLines[m].v)  || 0; // value\r\n                markLines[m].l  = parseInt(markLines[m].l)    || 0; // line number\r\n                markLines[m].s  = parseFloat(markLines[m].s)  || 0; // shadow size\r\n                markLines[m].t  = parseFloat(markLines[m].t)  || 0; // line width\r\n                markLines[m].py = parseFloat(markLines[m].py) || 0; // y offset of label\r\n                series.push({\r\n                    id:         'line' + m,\r\n                    xaxis:      {show: false},\r\n                    color:      markLines[m].c || undefined,\r\n                    lines:      {\r\n                        show:       true,\r\n                        fill:       markLines[m].f === '1'  || markLines[m].f === 1 || markLines[m].f === 'true' || markLines[m].f === true,\r\n                        steps:      true,\r\n                        lineWidth:  markLines[m].t\r\n                    },\r\n                    data:       [[0, markLines[m].v], [100, markLines[m].v]],\r\n                    label:      '__hide_me__',\r\n                    shadowSize: markLines[m].s\r\n                });\r\n                // if lower value set\r\n                if (markLines[m].vl !== '' && markLines[m].vl !== null && markLines[m].vl !== undefined) {\r\n                    markingsOffset++;\r\n                    markLines[m].vl = parseFloat(markLines[m].vl) || 0;\r\n                    series.push({\r\n                        xaxis:      {show: false},\r\n                        color:      markLines[m].c || undefined,\r\n                        lines:      {\r\n                            show:       true,\r\n                            fill:       true,\r\n                            steps:      true,\r\n                            lineWidth:  markLines[m].t\r\n                        },\r\n                        data:       [[0, markLines[m].vl], [100, markLines[m].vl]],\r\n                        fillBetween: 'line' + m,\r\n                        label:      '__hide_me__',\r\n                        shadowSize: markLines[m].s\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        //todo make bar working\r\n//        if (that.config.renderer !== 'bar' || that.config._ids.length <= 1) {\r\n        var xMin = Infinity;\r\n        var xMax = 0;\r\n        for (var i = 0; i < seriesData.length; i++) {\r\n            if (seriesData[i] && that.config.l[i]) {\r\n\r\n                that.config.l[i].chartType = that.config.l[i].chartType || that.config.chartType || 'line';\r\n                that.config.l[i].dashes = that.config.l[i].dashes === true || that.config.l[i].dashes === 'true';\r\n                that.config.l[i].dashLength = parseFloat(that.config.l[i].dashLength) || 10;\r\n                that.config.l[i].spaceLength = parseFloat(that.config.l[i].spaceLength) || 10;\r\n                var isLine = that.config.l[i].chartType !== 'scatterplot' && that.config.l[i].chartType !== 'bar' && that.config.l[i].chartType !== 'spline';\r\n\r\n                var option = {\r\n                    color:      that.config.l[i].color || undefined,\r\n                    lines:      {\r\n                        show:       (!that.config.l[i].dashes && isLine),\r\n                        fill:       (that.config.l[i].fill && that.config.l[i].fill !== '0') ? parseFloat(that.config.l[i].fill) : (that.config.l[i].chartType === 'area' || that.config.l[i].chartType === 'bar'),\r\n                        steps:      (that.config.l[i].chartType === 'steps'),\r\n                        lineWidth:  that.config.l[i].thickness\r\n                    },\r\n                    splines:    {\r\n                        show:       (that.config.l[i].chartType === 'spline'),\r\n                        tension:    0.5, //(float between 0 and 1, defaults to 0.5),\r\n                        lineWidth:  that.config.l[i].thickness,\r\n                        fill:       (that.config.l[i].fill && that.config.l[i].fill !== '0') ? parseFloat(that.config.l[i].fill) : false //(float between 0 .. 1 or false, as in flot documentation)\r\n                    },\r\n                    bars:       {\r\n                        show:       (that.config.l[i].chartType === 'bar'),\r\n                        order:      i + 1,\r\n                        barWidth:   0.6,\r\n                        lineWidth:  that.config.l[i].thickness,\r\n                        fill:       (that.config.l[i].fill && that.config.l[i].fill !== '0') ? parseFloat(that.config.l[i].fill) : false,\r\n                        fillColor:  that.config.barColor || undefined,\r\n                        align:      'center'\r\n                    },\r\n                    points:     {\r\n                        show:       (that.config.l[i].chartType === 'lineplot' || that.config.l[i].chartType === 'scatterplot' || that.config.l[i].points === 'true' || that.config.l[i].points === true)\r\n                    },\r\n                    data:       seriesData[i],\r\n                    label:      that.config.l[i].name,\r\n                    shadowSize: that.config.l[i].shadowsize,\r\n                    dashes:     {\r\n                        show: that.config.l[i].dashes && isLine,\r\n                        lineWidth: that.config.l[i].thickness,\r\n                        dashLength: [that.config.l[i].dashLength, that.config.l[i].spaceLength]\r\n                    }\r\n                };\r\n\r\n                if ((that.config.smoothing && that.config.smoothing > 0) || (that.config.l[i].smoothing && that.config.l[i].smoothing > 0)) {\r\n                    smoothing = true;\r\n                    that.config.l[i].smoothing = parseInt(that.config.l[i].smoothing || that.config.smoothing);\r\n                    option.data = avg(option.data, that.config.l[i].smoothing);\r\n                } else {\r\n                    that.config.l[i].smoothing = 0;\r\n                }\r\n\r\n                that.config.l[i].afterComma = (that.config.l[i].afterComma === undefined || that.config.l[i].afterComma === '') ? that.config.afterComma : parseInt(that.config.l[i].afterComma, 10);\r\n\r\n                if (that.config.l[i].chartType === 'bar') {\r\n                    option.bars.barWidth = (option.data[option.data.length - 1][0] - option.data[0][0]) / option.data.length * (parseFloat(that.config.barWidth) || 0.5);\r\n                }\r\n                /*\r\n                 if (that.config.l[i].chartType === 'pie') {\r\n                 series.legend = {\r\n                 show:   !!that.config.legend,\r\n                 position: that.config.legend\r\n                 };\r\n                 } else if (that.config.l[i].chartType === 'bar') {\r\n                 var series = {\r\n                 series: {\r\n                 bars: {\r\n                 show: that.config.l[i].chartType === 'bar',\r\n                 barWidth: 0.6,\r\n                 align: \"center\"\r\n                 },\r\n                 pie: {\r\n                 show: that.config.l[i].chartType === 'pie'\r\n                 },\r\n                 legend: {\r\n                 show: !!that.config.legend,\r\n                 position: that.config.legend\r\n                 }\r\n                 }\r\n                 };\r\n                 */\r\n\r\n                series.push(option);\r\n\r\n                if (seriesData[i][0][0] < xMin) xMin = seriesData[i][0][0];\r\n                if (seriesData[i][seriesData[i].length - 1][0] > xMax) xMax = seriesData[i][seriesData[i].length - 1][0];\r\n            }\r\n        }\r\n\r\n\r\n        if (that.config.min === null || that.config.min === undefined || that.config.min === '' || that.config.min.toString() === 'NaN') {\r\n            that.config.min = undefined;\r\n        } else {\r\n            that.config.min = parseFloat(that.config.min);\r\n        }\r\n\r\n        if (that.config.noBorder) {\r\n            if (!that.config.width)  that.config.width  = '100%';\r\n            if (!that.config.height) that.config.height = '100%';\r\n\r\n            if (that.config.width.indexOf('%') !== -1) {\r\n                $('#chart_container').css({width: 'calc(' + that.config.width + ' - 20px)'}); // original 20px\r\n            } else {\r\n                $('#chart_container').css({width: that.config.width});\r\n            }\r\n            if (that.config.height.indexOf('%') !== -1) {\r\n                $('#chart_container').css({height: 'calc(' + that.config.height + ' - 20px)'});// original 20px\r\n            } else {\r\n                $('#chart_container').css({height: that.config.height});\r\n            }\r\n\r\n        } else {\r\n            $('#chart_container').addClass('chart-container').css({width: that.config.width, height: that.config.height});\r\n//            $('#chart_container').css({'padding-bottom':\"100px\"})\r\n        }\r\n\r\n        if (that.config.timeFormat === 'null') {\r\n            that.config.timeFormat = undefined;\r\n        }\r\n\r\n        if (that.config.timeFormat) {\r\n            if (that.config.timeFormat.indexOf('%H:%M:%S') !== -1) {\r\n                that.config.timeFormatTime = '%H:%M:%S';\r\n            } else if (that.config.timeFormat.indexOf('%I:%M:%S') !== -1) {\r\n                that.config.timeFormatTime = '%I:%M:%S';\r\n            } else if (that.config.timeFormat.indexOf('%H:%M.') !== -1) {\r\n                that.config.timeFormatTime = '%H:%M.';\r\n            } else if (that.config.timeFormat.indexOf('%H:%M') !== -1) {\r\n                that.config.timeFormatTime = '%H:%M';\r\n            } else {\r\n                that.config.timeFormatTime = null;\r\n            }\r\n            if (that.config.timeFormat.indexOf('%d.%m.%y') !== -1) {\r\n                that.config.timeFormatDate = '%d.%m.%y';\r\n            } else if (that.config.timeFormat.indexOf('%x %p') !== -1) {\r\n                that.config.timeFormatDate = '%x %p';\r\n            } else if (that.config.timeFormat.indexOf('%d/%m/%y') !== -1) {\r\n                that.config.timeFormatDate = '%d/%m/%y';\r\n            } else if (that.config.timeFormat.indexOf('%m.%d.%y') !== -1) {\r\n                that.config.timeFormatDate = '%m.%d.%y';\r\n            } else if (that.config.timeFormat.indexOf('%d.%m') !== -1) {\r\n                that.config.timeFormatDate = '%d.%m';\r\n            } else if (that.config.timeFormat.indexOf('%a') !== -1) {\r\n                that.config.timeFormatDate = '%a';\r\n            } else {\r\n                that.config.timeFormatDate = null;\r\n            }\r\n        }\r\n\r\n        settings = {\r\n            grid: {\r\n                hoverable:       (that.config.hoverDetail === 'true' || that.config.hoverDetail === true),\r\n                backgroundColor: that.config.bg || undefined,\r\n                borderWidth:     (!that.config.border_width && that.config.border_width !== '0' && that.config.border_width !== 0) ? undefined : parseInt(that.config.border_width, 10),\r\n                borderColor:     that.config.border_color || undefined\r\n            },\r\n            yaxes: [],\r\n            xaxes: [],\r\n            legend: {\r\n                show:       !!that.config.legend,\r\n                position:   that.config.legend,\r\n                hideable:   true,\r\n                noColumns:  parseInt(that.config.legColumns, 10) || undefined,\r\n                backgroundColor:  that.config.legBg || undefined,\r\n                backgroundOpacity:  that.config.legBgOpacity !== undefined ? parseFloat(that.config.legBgOpacity) : 0.85,\r\n                labelFormatter: function (label, series) {\r\n                    if (label === '__hide_me__') {\r\n                        return null;\r\n                    }\r\n\r\n                    return '<span class=\"graphlabel\">' + label + '</span>';\r\n                }\r\n            }\r\n        };\r\n\r\n        if (that.config.zoom) {\r\n            settings.zoom = {\r\n                interactive: true,\r\n                trigger:    'dblclick', // or \"click\" for single click\r\n                amount:     1.5         // 2 = 200% (zoom in), 0.5 = 50% (zoom out)\r\n            };\r\n            settings.pan = {\r\n                interactive: true,\r\n                cursor:     'move',     // CSS mouse cursor value used when dragging, e.g. \"pointer\"\r\n                frameRate:  20\r\n            };\r\n        }\r\n\r\n        var steps = that.config.animation < 1000 ? 20 : 50;\r\n\r\n        var ii;\r\n        for (ii = 0; ii < that.config.l.length; ii++) {\r\n\r\n            that.config.l[ii].yaxe = that.config.l[ii].yaxe || '';\r\n            that.config.l[ii].xaxe = that.config.l[ii].xaxe || '';\r\n            that.config.l[ii].commonYAxis = that.config.l[ii].commonYAxis || '';\r\n\r\n            var yaxi = {\r\n                show:       that.config.l[ii].yaxe !== 'off',\r\n                min:        (that.config.l[ii].min !== '' && that.config.l[ii].min !== null && that.config.l[ii].min !== undefined) ? parseFloat(that.config.l[ii].min) : undefined,\r\n                max:        (that.config.l[ii].max !== '' && that.config.l[ii].max !== null && that.config.l[ii].max !== undefined) ? parseFloat(that.config.l[ii].max) : undefined,\r\n                position:   that.config.l[ii].yaxe.indexOf('left') > -1 ? 'left' : 'right',\r\n                font: {\r\n                    color:  that.config.l[ii].yaxe.indexOf('Color') > -1 ? that.config.l[ii].color : (that.config.y_labels_color || 'black')\r\n                },\r\n                zoomRange:  false,  // or [ number, number ] (min range, max range) or false\r\n                panRange:   false,  // or [ number, number ] (min, max) or false\r\n                // to do\r\n                /*{\r\n                 size: 11,\r\n                 lineHeight: 13,\r\n                 style: \"italic\",\r\n                 weight: \"bold\",\r\n                 family: \"sans-serif\",\r\n                 variant: \"small-caps\",\r\n                 color: \"#545454\"\r\n                 }*/\r\n                ticks:      parseInt(that.config.l[ii].yticks, 10) || undefined,\r\n                tickColor:  that.config.grid_color || undefined,\r\n                tickFormatter: _tickYFormatter\r\n            };\r\n\r\n            var xaxi = {\r\n                show:           that.config.l[ii].xaxe !== 'off',\r\n                position:       that.config.l[ii].xaxe.indexOf('top') !== -1 ? 'top' : 'bottom',\r\n                font: {\r\n                    color:      that.config.l[ii].xaxe.indexOf('Color') !== -1 ? that.config.l[ii].color : (that.config.x_labels_color || 'black')\r\n                },\r\n                zoomRange:      null,  // or [ number, number ] (min range, max range) or false\r\n                panRange:       null,  // or [ number, number ] (min, max) or false\r\n                mode:           'time',\r\n                //timeformat:   that.config.timeFormat,\r\n                timezone:       \"browser\",\r\n                tickFormatter:  that.config.timeFormat ? _tickXFormatter : null,\r\n                minTickSize:    (that.config.l[ii].chartType === 'bar') ? series[ii + markingsOffset].bars.barWidth : undefined,\r\n                tickColor:      that.config.grid_color || undefined,\r\n                ticks:          parseInt(that.config.l[ii].xticks, 10) || undefined,\r\n                min:            undefined,\r\n                max:            undefined\r\n            };\r\n\r\n            // prepare for bar\r\n            if (that.config.l[ii].chartType === 'bar') {\r\n                settings.legend.hideable = false;\r\n\r\n                xaxi.ticks = [];\r\n                for (var q = 0; q < seriesData[ii].length; q++) {\r\n                    xaxi.ticks.push(seriesData[ii][q][0]);\r\n                    // Normally first and last points are invalid\r\n                }\r\n                seriesData[ii][0][1] = null;\r\n                seriesData[ii][seriesData[ii].length - 1][1] = null;\r\n            } else if (ticks) {\r\n                xaxi.ticks = ticks;\r\n            }\r\n\r\n            if (that.config.zoom) {\r\n                var now = new Date();\r\n                xaxi.zoomRange = [null, now.getTime()]; // or [ number, number] (min range, max range) or false\r\n                xaxi.panRange  = [null, now.getTime()]; // or [ number, number] (min range, max range) or false\r\n            }\r\n\r\n            settings.yaxes.push(yaxi);\r\n            settings.xaxes.push(xaxi);\r\n\r\n            // Support for commonYAxis\r\n            if (that.config.l[ii].commonYAxis !== '') {\r\n                series[ii + markingsOffset].yaxis = parseInt(that.config.l[ii].commonYAxis);\r\n            } else {\r\n                series[ii + markingsOffset].yaxis = ii + 1;\r\n            }\r\n            series[ii + markingsOffset].xaxis = ii + 1;\r\n\r\n            series[ii + markingsOffset].curvedLines = {\r\n                apply:          !!that.config.l[ii].smoothing,\r\n                active:         !!that.config.l[ii].smoothing,\r\n                monotonicFit:   true\r\n            };\r\n        }\r\n\r\n        // set yaxis\r\n        if (markLines && markLines.length) {\r\n            var num = 0;\r\n            for (var mm = 0; mm < markLines.length; mm++) {\r\n                if (series[markLines[mm].l + markingsOffset]) {\r\n                    markLines[mm].l = parseInt(markLines[mm].l, 10);\r\n                    series[num].yaxis = series[markLines[mm].l + markingsOffset].yaxis;\r\n                    series[num].data[0][0] = xMin;\r\n                    series[num].data[1][0] = xMax;\r\n                    num++;\r\n                    // if lower value set\r\n                    if (markLines[mm].vl !== '' && markLines[mm].vl !== null && markLines[mm].vl !== undefined) {\r\n                        series[num].yaxis = series[markLines[mm].l + markingsOffset].yaxis;\r\n                        series[num].data[0][0] = xMin;\r\n                        series[num].data[1][0] = xMax;\r\n                        num++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (smoothing) {\r\n            settings.series = settings.series || {};\r\n            settings.series.curvedLines = {\r\n                apply:          true,\r\n                active:         true,\r\n                monotonicFit:   true\r\n            };\r\n        }\r\n        if (that.config.animation) {\r\n            settings.series = settings.series || {};\r\n            settings.series.grow = {\r\n                active:         true,\r\n                steps:          steps,\r\n                stepDelay:      that.config.animation / steps\r\n            };\r\n        }\r\n\r\n        // hiddengraphs overload the labelFormatter, so we should overload the hiddengraphs\r\n        $.plot.plugins.push({\r\n            init: function (plot) {\r\n                plot.hooks.processOptions.push(function checkOptions(plot, options) {\r\n                    if (!options.legend.hideable) {\r\n                        return;\r\n                    }\r\n\r\n                    options.legend.labelFormatter = function(label, series) {\r\n                        if (label === '__hide_me__') return null;\r\n                        return '<span class=\"graphlabel\">' + label + '</span>';\r\n                    };\r\n                });\r\n            },\r\n            options: options,\r\n            name: 'hiddenGraphsEx',\r\n            version: '1.0'\r\n        });\r\n\r\n        that.chart = $.plot('#' + that.options.chartId, series, settings);\r\n\r\n        showLabels(that.config.animation);\r\n\r\n        var $div = $('#' + that.options.chartId);\r\n\r\n        that.options.tooltipId = that.options.tooltipId || 'tooltip';\r\n\r\n        // Hoover\r\n        if (that.config.hoverDetail === 'true' || that.config.hoverDetail === true) {\r\n            $div.unbind('plothover').bind('plothover', function (event, pos, item) {\r\n                if (item) {\r\n                    var x = item.datapoint[0].toFixed(2);\r\n                    var y;\r\n\r\n                    if (that.config.l[item.seriesIndex - markingsOffset].type === 'boolean') {\r\n                        y = !!Math.round(item.datapoint[1] - that.config.l[item.seriesIndex - markingsOffset].yOffset);\r\n                    } else {\r\n                        y = (item.datapoint[1] - that.config.l[item.seriesIndex - markingsOffset].yOffset).toFixed(2);\r\n                    }\r\n\r\n                    var text = item.series.label ? item.series.label + '<br>' : '';\r\n                    text += $.plot.formatDate(new Date(parseInt(x, 10)), that.config.timeFormat) + '<br>';\r\n                    text += '<b>' + _yFormatter(y, item.seriesIndex - markingsOffset) + '</b>';\r\n\r\n                    var $tooltip = $('#' + that.options.tooltipId).html(text);\r\n                    if ($(this).height() - item.pageY < $tooltip.height()) {\r\n                        item.pageY -= 10 + $tooltip.height();\r\n                    }\r\n                    if ($(this).width() - item.pageX < $tooltip.width()) {\r\n                        item.pageX -= 10 + $tooltip.width();\r\n                    }\r\n                    $tooltip.css({top: item.pageY + 5, left: item.pageX + 5}).fadeIn(200);\r\n                } else {\r\n                    $('#tooltip').hide();\r\n                }\r\n            });\r\n\r\n            if (!$('#' + that.options.tooltipId).length) {\r\n                $('<div id=\"' + that.options.tooltipId + '\"></div>').css({\r\n                    position:   'absolute',\r\n                    display:    'none',\r\n                    border:     '1px solid #fdd',\r\n                    padding:    '2px',\r\n                    'background-color': '#fee',\r\n                    opacity:    0.80\r\n                }).appendTo('body');\r\n            }\r\n        }\r\n\r\n        if (that.config.zoom && that.options.cbOnZoom) {\r\n            $div.unbind('plotzoom').bind('plotzoom', function (e, plot, args) {\r\n                if (that.zoomTimeout) clearTimeout(that.zoomTimeout);\r\n                that.zoomTimeout = setTimeout(that.options.cbOnZoom, 500);\r\n            }).unbind('plotpan').bind('plotpan', function (e, plot, args) {\r\n                if (that.zoomTimeout) clearTimeout(that.zoomTimeout);\r\n                that.zoomTimeout = setTimeout(that.options.cbOnZoom, 500);\r\n            })\r\n        }\r\n    })();\r\n\r\n    this.update = function (newSeriesData, newMarkingsData, newTicks) {\r\n        if (newSeriesData) {\r\n            var xMin = Infinity;\r\n            var xMax = 0;\r\n\r\n            for (var index = 0; index < config.l.length; index++) {\r\n                series[index + markingsOffset].data = newSeriesData[index];\r\n                if (newSeriesData[index][0][0] < xMin) xMin = newSeriesData[index][0][0];\r\n                if (newSeriesData[index][newSeriesData[index].length - 1][0] > xMax) xMax = newSeriesData[index][newSeriesData[index].length - 1][0];\r\n\r\n                // prepare for bar\r\n                if (config.l[index].chartType === 'bar') {\r\n                    settings.xaxes[index].ticks = [];\r\n                    for (var m = 0; m < newSeriesData[index].length; m++) {\r\n                        settings.xaxes[index].ticks.push(newSeriesData[index][m][0]);\r\n                    }\r\n                    // Normally first and last points are invalid\r\n                    newSeriesData[index][0][1] = null;\r\n                    newSeriesData[index][newSeriesData[index].length - 1][1] = null;\r\n                }\r\n            }\r\n\r\n            // update xmin and xmax\r\n            if (markLines && markLines.length) {\r\n                var num_ = 0;\r\n                for (var m = 0; m < markLines.length; m++) {\r\n                    series[num_].data[0][0] = xMin;\r\n                    series[num_].data[1][0] = xMax;\r\n                    num_++;\r\n                    // if lower value set\r\n                    if (markLines[m].vl !== '' && markLines[m].vl !== null && markLines[m].vl !== undefined) {\r\n                        series[num_].data[0][0] = xMin;\r\n                        series[num_].data[1][0] = xMax;\r\n                        num_++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            $('.data-point-label').remove();\r\n            $('.marklines-label').remove();\r\n\r\n            if (settings.series && settings.series.grow) settings.series.grow.active = false;\r\n        }\r\n        if (newMarkingsData) {\r\n            if (newMarkingsData && newMarkingsData.length) {\r\n                var num = 0;\r\n                for (var mm = 0; mm < newMarkingsData.length; mm++) {\r\n                    series[num].data[0][1] = newMarkingsData[mm].v;\r\n                    series[num].data[1][1] = newMarkingsData[mm].v;\r\n                    num++;\r\n                    // if lower value set\r\n                    if (newMarkingsData[mm].vl !== '' && newMarkingsData[mm].vl !== null && newMarkingsData[mm].vl !== undefined) {\r\n                        series[num].data[0][1] = newMarkingsData[mm].vl;\r\n                        series[num].data[1][1] = newMarkingsData[mm].vl;\r\n                        num++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.chart = $.plot('#' + this.options.chartId, series, settings);\r\n        showLabels(false);\r\n    };\r\n\r\n    this.getRange = function () {\r\n        var opt = this.chart.getOptions();\r\n        var result = [];\r\n        for (var index = 0; index < opt.xaxes.length; index++) {\r\n            result[index] = {\r\n                min: Math.round(opt.xaxes[index].min),\r\n                max: Math.round(opt.xaxes[index].max)\r\n            };\r\n            settings.xaxes[index].max = result[index].max;\r\n            settings.xaxes[index].min = result[index].min;\r\n        }\r\n        return result;\r\n    };\r\n\r\n    this.setRange = function (minMaxArr) {\r\n        for (var index = 0; index < settings.xaxes.length; index++) {\r\n            settings.xaxes[index].min = minMaxArr[index].min;\r\n            settings.xaxes[index].max = minMaxArr[index].max;\r\n        }\r\n    };\r\n\r\n    this.resetZoom = function (time) {\r\n        time = time || new Date();\r\n        for (var index = 0; index < settings.xaxes.length; index++) {\r\n            settings.xaxes[index].zoomRange = [null, time.getTime()];\r\n            settings.xaxes[index].panRange  = [null, time.getTime()];\r\n        }\r\n    };\r\n\r\n    this.zoom = function (positionX, amount) {\r\n        var offset     = this.chart.offset();\r\n        this.chart.zoom({\r\n            center: {\r\n                left:   positionX - offset.left,\r\n                height: this.chart.height() / 2\r\n            },\r\n            amount: amount\r\n        });\r\n    };\r\n\r\n    this.pan = function (positionX) {\r\n        this.chart.pan({left: positionX, top: 0});\r\n    };\r\n\r\n    return this;\r\n}\r\n\r\n\r\n\r\n","'use strict';\r\n\r\n// Show \"no connection\" message after 5 seconds\r\nvar disconnectTimeout = setTimeout(function () {\r\n    disconnectTimeout = null;\r\n    //Show disconnected message\r\n    $('#no-connection').show();\r\n}, 5000);\r\n\r\nvar sessionId = 1;\r\n// Analyse query\r\nvar path = location.href.split('?')[1];\r\n\r\nvar systemLang = 'en';\r\nif (typeof sysLang !== 'undefined') {\r\n    systemLang = sysLang || 'en';\r\n}\r\n\r\n\r\n// convert old format to new one\r\n// OLD: http://localhost:8082/flot/index.html?range=1440&renderer=line&axeX=l&axeY=inside&_ids=system.adapter.admin.0.memRss%2Csystem.adapter.email.0.memRss&_colors=%23c05020%3B%2330c020%3B%236060c0\r\n// NEW: http://localhost:8082/flot/index.html?l%5B0%5D%5Bid%5D=system.adapter.admin.0.memRss&l%5B0%5D%5Boffset%5D=0&l%5B0%5D%5Baggregate%5D=average&l%5B0%5D%5Bcolor%5D=%23FF0000&l%5B0%5D%5Bthickness%5D=3&l%5B1%5D%5Bid%5D=system.adapter.email.0.memRss&l%5B1%5D%5Boffset%5D=0&l%5B1%5D%5Bart%5D=average&l%5B1%5D%5Bcolor%5D=%2300FF00&l%5B1%5D%5Bthickness%5D=3&timeType=relative&relativeEnd=now&range=10&aggregateType=step&aggregateSpan=300&legend=sw\r\n// OLD =>\r\n//{\r\n//    _colors: \"#c05020;#30c020;#6060c0\"\r\n//    _ids: \"system.adapter.admin.0.memRss,system.adapter.email.0.memRss\"\r\n//    axeX: \"lines\"\r\n//    axeY: \"inside\"\r\n//    range: \"1440\"\r\n//    renderer: \"line\"\r\n//}\r\n// NEW =>\r\n//{\r\n//  \"l\" : [\r\n//     {\r\n//        \"id\" : \"system.adapter.admin.0.memRss\",\r\n//        \"offset\" : \"0\",\r\n//        \"aggregate\" : \"minmax\",\r\n//        \"color\" : \"#FF0000\",\r\n//        \"thickness\" : \"3\"\r\n//      }, {\r\n//        \"id\" : \"system.adapter.email.0.memRss\",\r\n//        \"offset\" : \"0\",\r\n//        \"aggregate\" : \"minmax\",\r\n//        \"color\" : \"#00FF00\",\r\n//        \"thickness\" : \"3\"\r\n//      }\r\n//  ],\r\n//    \"timeType\" : \"relative\",\r\n//    \"relativeEnd\" : \"now\",\r\n//    \"range\" : \"10\",\r\n//    \"aggregateType\" : \"step\",\r\n//    \"aggregateSpan\" : \"300\",\r\n//    \"legend\" : \"sw    //}\r\n\r\nvar config = deparam(path || '');\r\n\r\nif (config.lines) {\r\n    config.l = JSON.parse(JSON.stringify(config.lines));\r\n    delete config.lines;\r\n}\r\n\r\nif (config._ids) {\r\n    var ids    = config._ids    ? config._ids.split(';')    : [];\r\n    var colors = config._colors ? config._colors.split(';') : [];\r\n    var names  = config._names  ? config._names.split(';')  : [];\r\n    var units  = config._units  ? config._units.split(';')  : [];\r\n    config.l = [];\r\n    for (var i = 0; i < ids.length; i++) {\r\n        config.l.push({\r\n            id:         ids[i],\r\n            offset:     0,\r\n            name:       names[i] || '',\r\n            aggregate:  'onchange',\r\n            color:      colors[i] || 'blue',\r\n            thickness:  config.strokeWidth || 1,\r\n            shadowsize: config.strokeWidth || 1,\r\n            min:        config.min || '',\r\n            max:        config.max || '',\r\n            unit:       units[i]   || ''\r\n        });\r\n    }\r\n    config.aggregateType = 'step';\r\n    config.aggregateSpan = 300;\r\n    config.relativeEnd   = 'now';\r\n}\r\n\r\n// convert art to aggregate\r\nif (config.l) {\r\n    for (var j = 0; j < config.l.length; j++) {\r\n        if (config.l[j].art) {\r\n            config.l[j].aggregate = config.l[j].art;\r\n            delete config.l[j].art;\r\n        }\r\n        if (config.instance && !config.l[j].instance) {\r\n            config.l[j].instance = config.instance;\r\n        }\r\n    }\r\n}\r\n\r\n// Set default values\r\nconfig.width        = config.width  || '100%';\r\nconfig.height       = config.height || '100%';\r\nconfig.timeFormat   = config.timeFormat || '%H:%M:%S %e.%m.%y';\r\nconfig.useComma     = config.useComma  === 'true' || config.useComma  === true;\r\nconfig.zoom         = config.zoom      === 'true' || config.zoom      === true;\r\nconfig.animation    = parseInt(config.animation)  || 0;\r\nconfig.noedit       = config.noedit    === 'true' || config.noedit    === true;\r\nconfig.afterComma   = (config.afterComma === undefined) ? 2 : parseInt(config.afterComma, 10);\r\nconfig.timeType     = config.timeArt || config.timeType || 'relative';\r\n//    if ((config.max !== undefined && config.max !== '' && config.max !== null && parseFloat(config.max) != NaN)) config.max = parseFloat(config.max);\r\nvar seriesData      = [];\r\nvar ticks           = null;\r\nvar liveInterval;\r\n\r\nvar navOptions      = {};\r\nvar socketURL       = '';\r\nvar socketSESSION   = '';\r\nvar now             = new Date();\r\nvar divId           = 'chart_placeholder';\r\n\r\n// for zoom\r\nvar zoomTimeout     = null;\r\nvar lastX           = null;\r\nvar mouseDown       = false;\r\nvar lastWidth       = null;\r\nvar chart           = null;\r\n\r\nvar isApp           = false;\r\nvar subscribes      = [];\r\nvar subscribed      = false;\r\n// because of security issue\r\ntry {\r\n    if ((window.top !== window.self) && (typeof window.top.app !== 'undefined') && (typeof window.top.socketUrl !== 'undefined')) {\r\n        isApp = true;\r\n    }\r\n} catch (e) {\r\n\r\n}\r\n\r\nif (isApp) {\r\n\tsocketURL = window.top.socketUrl; // if flot runs in iframe inside the app use the socketURL determined by app.js\r\n} else {\r\n\tif (typeof socketUrl !== 'undefined') {\r\n\t\tsocketURL = socketUrl;\r\n\t\tif (socketURL && socketURL[0] === ':') {\r\n\t\t\tsocketURL = location.protocol + '//' + location.hostname + socketURL;\r\n\t\t}\r\n\t\tsocketSESSION = socketSession;\r\n\t}\r\n}\r\nvar socket = io.connect(socketURL, {\r\n    'query':                        'key=' + socketSESSION,\r\n    'reconnection limit':           10000,\r\n    'max reconnection attempts':    Infinity,\r\n    upgrade:                        typeof socketForceWebSockets !== 'undefined' ? !socketForceWebSockets : undefined,\r\n    rememberUpgrade:                typeof socketForceWebSockets !== 'undefined' ? socketForceWebSockets  : undefined,\r\n    transports:                     typeof socketForceWebSockets !== 'undefined' ? (socketForceWebSockets ? ['websocket'] : undefined)  : undefined\r\n});\r\n\r\nsocket.on('connect', function () {\r\n    if (disconnectTimeout) {\r\n        $('#no-connection').hide();\r\n        clearTimeout(disconnectTimeout);\r\n        disconnectTimeout = null;\r\n    }\r\n    setTimeout(function () {\r\n        socket.emit('name', 'flot');\r\n    }, 50);\r\n\r\n    setTimeout(function () {\r\n        readData();\r\n    }, 100);\r\n});\r\n\r\nsocket.on('stateChange', function (id, state) {\r\n    if (!chart || !config || !config.m) {\r\n        return;\r\n    }\r\n\r\n    console.log(id + ' - ' + state.val);\r\n\r\n    for (var m = 0; m < config.m.length; m++) {\r\n        if (config.m[m].oid === id) {\r\n            config.m[m].v = parseFloat(state.val) || 0;\r\n        }\r\n        if (config.m[m].oidl === id) {\r\n            config.m[m].vl = parseFloat(state.val) || 0;\r\n        }\r\n    }\r\n    chart.update(null, config.m);\r\n});\r\n\r\nif (config.window_bg) {\r\n    $('body').css('background', config.window_bg);\r\n}\r\n\r\nsocket.on('disconnect', function () {\r\n    if (!disconnectTimeout) {\r\n        disconnectTimeout = setTimeout(function () {\r\n            disconnectTimeout = null;\r\n            //Show disconnected message\r\n            $('#no-connection').show();\r\n        }, 5000);\r\n    }\r\n});\r\n\r\nfunction addTime(time, offset, plusOrMinus, isOffsetInMinutes) {\r\n    time = new Date(time);\r\n\r\n    if (typeof offset === 'string') {\r\n        if (offset[1] === 'm') {\r\n            offset = parseInt(offset, 10);\r\n            time.setMonth(plusOrMinus ? time.getMonth() + offset : time.getMonth() - offset);\r\n            time = time.getTime();\r\n        } else if (offset[1] === 'y') {\r\n            offset = parseInt(offset, 10);\r\n            time.setFullYear(plusOrMinus ? time.getFullYear() + offset : time.getFullYear() - offset);\r\n            time = time.getTime();\r\n        } else {\r\n            time  = time.getTime();\r\n            if (isOffsetInMinutes) {\r\n                if (plusOrMinus) {\r\n                    time += (parseInt(offset, 10) || 0) * 60000;\r\n                } else {\r\n                    time -= (parseInt(offset, 10) || 0) * 60000;\r\n                }\r\n\r\n            } else {\r\n                if (plusOrMinus) {\r\n                    time += (parseInt(offset, 10) || 0) * 1000;\r\n                } else {\r\n                    time -= (parseInt(offset, 10) || 0) * 1000;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        time  = time.getTime();\r\n        if (isOffsetInMinutes) {\r\n            if (plusOrMinus) {\r\n                time += (parseInt(offset, 10) || 0) * 60000;\r\n            } else {\r\n                time -= (parseInt(offset, 10) || 0) * 60000;\r\n            }\r\n\r\n        } else {\r\n            if (plusOrMinus) {\r\n                time += (parseInt(offset, 10) || 0) * 1000;\r\n            } else {\r\n                time -= (parseInt(offset, 10) || 0) * 1000;\r\n            }\r\n        }\r\n    }\r\n    return time;\r\n}\r\n\r\nfunction getStartStop(index, step) {\r\n    var option = {};\r\n    var end;\r\n    var start;\r\n    var _now;\r\n    config.l[index].offset = config.l[index].offset || 0;\r\n\r\n    var isMonthRange = config.range.indexOf('m') !== -1;\r\n    // check config range\r\n    if (isMonthRange && config.l.length > 1) {\r\n        var monthRange = parseInt(config.range, 10) || 1;\r\n        for (var a = 0; a < config.l.length; a++) {\r\n            if (config.l[a].offset && config.l[a].offset !== 0) {\r\n                // Check what the month has first index\r\n                _now = addTime(now, config.l[0].offset);\r\n                var minusMonth = new Date(_now);\r\n                minusMonth.setMonth(minusMonth.getMonth() - monthRange);\r\n                config.range = Math.floor((_now - minusMonth.getTime()) / 60000) + '';\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (config.zoomed) {\r\n        navOptions[index].end   = config.l[index].zMax;\r\n        navOptions[index].start = config.l[index].zMin;\r\n        return navOptions[index];\r\n    } else {\r\n        if (!step) {\r\n            if (config.timeType === 'static') {\r\n                var startTime;\r\n                var endTime;\r\n                if (config.start_time !== undefined) {\r\n                    startTime = config.start_time.split(':').map(Number);\r\n                } else {\r\n                    startTime = [0, 0];\r\n                }\r\n\r\n                if (config.end_time !== undefined) {\r\n                    endTime = config.end_time.split(':').map(Number);\r\n                } else {\r\n                    endTime = [24, 0];\r\n                }\r\n\r\n                // offset is in seconds\r\n                start = new Date(config.start).setHours(startTime[0], startTime[1]);\r\n                end   = new Date(config.end)  .setHours(endTime[0],   endTime[1]);\r\n                start = addTime(start, config.l[index].offset);\r\n                end   = addTime(end,   config.l[index].offset);\r\n            } else {\r\n                if (config.relativeEnd === 'now') {\r\n                    _now = new Date(now);\r\n                } else if (config.relativeEnd.indexOf('minute') !== -1) {\r\n                    var minutes = parseInt(config.relativeEnd, 10) || 1;\r\n                    _now = new Date(now);\r\n                    _now.setMinutes(Math.floor(_now.getMinutes() / minutes) * minutes + minutes);\r\n                    _now.setSeconds(0);\r\n                    _now.setMilliseconds(0);\r\n                }  else if (config.relativeEnd.indexOf('hour') !== -1) {\r\n                    var hours = parseInt(config.relativeEnd, 10) || 1;\r\n                    _now = new Date(now);\r\n                    _now.setHours(Math.floor(_now.getHours() / hours) * hours + hours);\r\n                    _now.setMinutes(0);\r\n                    _now.setSeconds(0);\r\n                    _now.setMilliseconds(0);\r\n                } else if (config.relativeEnd === 'today') {\r\n                    _now = new Date(now);\r\n                    _now.setDate(_now.getDate() + 1);\r\n                    _now.setHours(0);\r\n                    _now.setMinutes(0);\r\n                    _now.setSeconds(0);\r\n                    _now.setMilliseconds(0);\r\n                } else if (config.relativeEnd === 'weekUsa') {\r\n                    //var week = parseInt(config.relativeEnd, 10) || 1;\r\n                    _now = new Date(now);\r\n                    _now.setDate(_now.getDate() - _now.getDay() + 7);\r\n                    _now.setHours(0);\r\n                    _now.setMinutes(0);\r\n                    _now.setSeconds(0);\r\n                    _now.setMilliseconds(0);\r\n                } else if (config.relativeEnd === 'weekEurope') {\r\n                    //var _week = parseInt(config.relativeEnd, 10) || 1;\r\n                    _now = new Date(now);\r\n                    // If\r\n                    if (_now.getDay() === 0) {\r\n                        _now.setDate(_now.getDate() + 1);\r\n                    } else {\r\n                        _now.setDate(_now.getDate() - _now.getDay() + 8);\r\n                    }\r\n                    _now.setHours(0);\r\n                    _now.setMinutes(0);\r\n                    _now.setSeconds(0);\r\n                    _now.setMilliseconds(0);\r\n                } else if (config.relativeEnd === 'month') {\r\n                    _now = new Date(now);\r\n                    _now.setMonth(_now.getMonth() + 1);\r\n                    _now.setDate(1);\r\n                    _now.setHours(0);\r\n                    _now.setMinutes(0);\r\n                    _now.setSeconds(0);\r\n                    _now.setMilliseconds(0);\r\n                } else if (config.relativeEnd === 'year') {\r\n                    _now = new Date(now);\r\n                    _now.setFullYear(_now.getFullYear() + 1);\r\n                    _now.setMonth(0);\r\n                    _now.setDate(1);\r\n                    _now.setHours(0);\r\n                    _now.setMinutes(0);\r\n                    _now.setSeconds(0);\r\n                    _now.setMilliseconds(0);\r\n                }\r\n\r\n                end   = addTime(_now, config.l[index].offset);\r\n                start = addTime(end,  config.range, false, true);\r\n            }\r\n\r\n            option = {\r\n                start:      start,\r\n                end:        end,\r\n                ignoreNull: (config.l[index].ignoreNull === undefined) ? config.ignoreNull : config.l[index].ignoreNull,\r\n                aggregate:  config.l[index].aggregate || config.aggregate || 'minmax'\r\n            };\r\n\r\n            if (config.aggregateType === 'step') {\r\n                option.step = config.aggregateSpan * 1000;\r\n            } else if (config.aggregateType === 'count') {\r\n                option.count = config.aggregateSpan || (document.getElementById('chart_container').clientWidth / 10);\r\n            }\r\n\r\n            navOptions[index] = option;\r\n            return option;\r\n\r\n        } else {\r\n            end   = addTime(now, config.l[index].offset);\r\n            start = end - step;\r\n\r\n            option = {\r\n                start:      start,\r\n                end:        end,\r\n                ignoreNull: (config.l[index].ignoreNull === undefined) ? config.ignoreNull : config.l[index].ignoreNull,\r\n                aggregate:  config.l[index].aggregate || config.aggregate || 'minmax',\r\n                count:      1\r\n            };\r\n\r\n            navOptions[index].end   = end;\r\n            navOptions[index].start = addTime(end, config.range, false, true);\r\n            return option;\r\n        }\r\n    }\r\n}\r\n\r\nfunction xmove(ts,m) {\r\n\tts=new Date (ts);\r\n\tif (m=='minuteBegin') ts.setSeconds(0,0);\r\n\telse if (m=='hourBegin') ts.setMinutes(0,0,0);\r\n\telse if (m=='dayBegin') ts.setHours(0,0,0,0);\r\n\telse if (m=='weekBegin') {\r\n\t\tts.setHours(0,0,0,0);\r\n\t\tts.setDate(ts.getDate() - (ts.getDay() + 6) % 7);\r\n\t} else if (m=='monthBegin') ts.setHours(0,0,0,0),ts.setDate(1);\r\n\telse if (m=='yearBegin') ts.setHours(0,0,0,0),ts.setMonth(0, 1);\r\n\treturn ts.getTime();\r\n}\r\n\r\nfunction readOneChart(id, instance, index, callback) {\r\n\r\n    var option = getStartStop(index);\r\n    option.instance  = instance;\r\n    option.sessionId = sessionId;\r\n    config.l[index].yOffset = parseFloat(config.l[index].yOffset) || 0;\r\n\tvar multiplicator = config.l[index].multiplicator ? parseFloat (config.l[index].multiplicator) : 1.0;\r\n    //console.log(JSON.stringify(option));\r\n    console.log(new Date(option.start) + ' - ' + new Date(option.end));\r\n    socket.emit('getHistory', id, option, function (err, res, stepIgnore, _sessionId) {\r\n        err && console.error(err);\r\n\r\n        if (sessionId && _sessionId && _sessionId !== sessionId) {\r\n            return console.warn('Ignore request with sessionId=' + _sessionId + ', actual is ' + sessionId);\r\n        }\r\n\r\n        if (!err && res) {\r\n            //option.ignoreNull = (config.l[index].ignoreNull === undefined) ? (config.ignoreNull === 'true' || config.ignoreNull === true) : (config.l[index].ignoreNull === 'true' || config.l[index].ignoreNull === true);\r\n            option.yOffset = config.l[index].yOffset;\r\n\r\n            var _series = seriesData[index];\r\n\r\n            for (var i = 0; i < res.length; i++) {\r\n                // Convert boolean values to numbers\r\n                if (res[i].val === 'true' || res[i].val === true) {\r\n                    res[i].val = 1;\r\n                } else if (res[i].val === 'false' || res[i].val === false) {\r\n                    res[i].val = 0;\r\n                }\r\n                if (typeof res[i].val === 'string') res[i].val = parseFloat(res[i].val);\r\n\r\n\t\t\t\t_series.push([(config.l[index].xmove? xmove(res[i].ts,config.l[index].xmove): res[i].ts), res[i].val !== null ? res[i].val * multiplicator + option.yOffset : null]);\r\n            }\r\n            // add start and end\r\n            if (_series.length) {\r\n                if (_series[0][0] > option.start) _series.unshift([option.start, null]);\r\n                if (_series[_series.length - 1][0] < option.end) _series.push([option.end, null]);\r\n            } else {\r\n                _series.push([option.start, null]);\r\n                _series.push([option.end,   null]);\r\n            }\r\n            // free memory\r\n            res = null;\r\n        }\r\n\r\n        if (callback) callback(id, index);\r\n    });\r\n}\r\n\r\nfunction readValue(id, index, callback) {\r\n    socket.emit('getState', id, function (err, state) {\r\n        if (state) {\r\n            callback(index, parseFloat(state.val) || 0);\r\n        } else {\r\n            callback(index, 0);\r\n        }\r\n    });\r\n}\r\n\r\nfunction prepareChart() {\r\n    chart = new CustomChart({\r\n        chartId:    divId,\r\n        titleId:    'title',\r\n        tooltipId:  'tooltip',\r\n        cbOnZoom:   onZoom\r\n    }, config, seriesData, config.m, ticks);\r\n\r\n    if (config.zoom) {\r\n        $('#resetZoom').unbind('click').click(function () {\r\n            seriesData = [];\r\n            $('#resetZoom').hide();\r\n            config.zoomed = false;\r\n            now = new Date();\r\n            readData(true);\r\n        });\r\n\r\n        // handlers for zoom and pan\r\n        $('#' + divId)\r\n            // flot can pan and zoom with mouse itself\r\n            /*.unbind('mousedown')\r\n            .mousedown(function (e) {\r\n                mouseDown = true;\r\n                lastX = e.pageX;\r\n            })\r\n            .unbind('mouseup').mouseup(function () {\r\n                mouseDown = false;\r\n                if (zoomTimeout) clearTimeout(zoomTimeout);\r\n                zoomTimeout = setTimeout(onZoom, 500);\r\n            })\r\n            .unbind('mousemove')\r\n            .mousemove(function(e) {\r\n                if (mouseDown) {\r\n                    chart.pan(e.pageX - lastX);\r\n                }\r\n                lastX = e.pageX;\r\n            })\r\n            .unbind('mousewheel DOMMouseScroll')\r\n            .bind('mousewheel DOMMouseScroll', function(event) {\r\n                var amount = (event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0) ? 0.9 : 1.1;\r\n                chart.zoom(event.originalEvent.pageX, amount);\r\n                if (zoomTimeout) clearTimeout(zoomTimeout);\r\n                zoomTimeout = setTimeout(onZoom, 500);\r\n            })*/\r\n            .unbind('touchstart')\r\n            .on('touchstart', function (e) {\r\n                e.preventDefault();\r\n                mouseDown = true;\r\n                var touches = e.touches || e.originalEvent.touches;\r\n                if (touches) {\r\n                    lastX = touches[touches.length - 1].pageX;\r\n                    if (touches.length > 1) {\r\n                        lastWidth = Math.abs(touches[0].pageX - touches[1].pageX);\r\n                    } else {\r\n                        lastWidth = null;\r\n                    }\r\n                }\r\n            })\r\n            .unbind('touchend')\r\n            .on('touchend', function(e) {\r\n                e.preventDefault();\r\n                mouseDown = false;\r\n                if (zoomTimeout) clearTimeout(zoomTimeout);\r\n                zoomTimeout = setTimeout(onZoom, 500);\r\n            })\r\n            .unbind('touchmove')\r\n            .on('touchmove', function (e) {\r\n                e.preventDefault();\r\n                var touches = e.touches || e.originalEvent.touches;\r\n                if (!touches) return;\r\n                if (mouseDown) {\r\n                    var pageX = touches[touches.length - 1].pageX;\r\n                    if (touches.length > 1) {\r\n                        // zoom\r\n                        var width = Math.abs(touches[0].pageX - touches[1].pageX);\r\n\r\n                        if (lastWidth !== null && width !== lastWidth) {\r\n                            var amount     = (width > lastWidth) ? 1.1 : 0.9;\r\n                            var positionX  = (touches[0].pageX > touches[1].pageX) ? (touches[1].pageX + width / 2) : (touches[0].pageX + width / 2);\r\n\r\n                            chart.zoom(positionX, amount);\r\n\r\n                            if (zoomTimeout) clearTimeout(zoomTimeout);\r\n                            zoomTimeout = setTimeout(onZoom, 500);\r\n                        }\r\n                        lastWidth = width;\r\n                    } else {\r\n                        // swipe\r\n                        chart.pan(lastX - pageX);\r\n                    }\r\n                }\r\n                lastX = pageX;\r\n            });\r\n    }\r\n\r\n    if (config.live && config.timeType === 'relative') {\r\n        if (config.live === true || config.live === 'true') {\r\n            config.live = 30;\r\n        }\r\n        config.live = parseInt(config.live, 10) || 30;\r\n        startLiveUpdate();\r\n    }\r\n}\r\n\r\nfunction _readOneLine(index, cb) {\r\n    socket.emit('getObject', config.l[index].id, function (err, res) {\r\n        if (!err && res && res.common) {\r\n            config.l[index].name = config.l[index].name || res.common.name;\r\n            config.l[index].unit = config.l[index].unit || (res.common.unit ? res.common.unit.replace('�', '°') : '');\r\n            config.l[index].type = res.common.type;\r\n        } else {\r\n            config.l[index].name = config.l[index].name || config.l[index].id;\r\n            config.l[index].unit = config.l[index].unit || '';\r\n        }\r\n        if (typeof config.l[index].name === 'object') {\r\n            config.l[index].name = config.l[index].name[systemLang] || config.l[index].name.en;\r\n        }\r\n        readOneChart(config.l[index].id, config.l[index].instance, index, cb);\r\n    });\r\n}\r\n\r\nfunction readTicks(callback) {\r\n    if (!config.ticks) {\r\n        callback && callback(null);\r\n    } else {\r\n        socket.emit('getObject', config.ticks, function (err, res) {\r\n            var index = 0;\r\n            var option = JSON.parse(JSON.stringify(getStartStop(index)));\r\n            option.instance  = config.l[index].instance;\r\n            option.sessionId = sessionId;\r\n            option.aggregate = 'onchange';\r\n\r\n            //console.log(JSON.stringify(option));\r\n            console.log('Ticks: ' + new Date(option.start) + ' - ' + new Date(option.end));\r\n            socket.emit('getHistory', config.ticks, option, function (err, res, stepIgnore, _sessionId) {\r\n                if (err) console.error(err);\r\n\r\n                if (sessionId && _sessionId && _sessionId !== sessionId) {\r\n                    console.warn('Ignore request with sessionId=' + _sessionId + ', actual is ' + sessionId);\r\n                    return;\r\n                }\r\n\r\n                if (!err && res) {\r\n                    var _series = ticks || [];\r\n                    if (ticks && ticks.length) ticks.splice(0, ticks.length);\r\n\r\n                    for (var i = 0; i < res.length; i++) {\r\n                        if (!res[i].val !== null) _series.push([res[i].ts, res[i].val]);\r\n                    }\r\n                    // add start and end\r\n                    if (_series.length) {\r\n                        if (_series[0][0] > option.start) _series.unshift([option.start, '']);\r\n                        if (_series[_series.length - 1][0] < option.end) _series.push([option.end, '']);\r\n                    } else {\r\n                        _series.push([option.start, '']);\r\n                        _series.push([option.end,   '']);\r\n                    }\r\n                    // free memory\r\n                    res = null;\r\n                    ticks = _series;\r\n                }\r\n                if (callback) callback(_series);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nfunction readMarkings(cb, m) {\r\n    m = m || 0;\r\n    if (!config.m || !config.m.length || m >= config.m.length) {\r\n        return cb && cb();\r\n    } else {\r\n        if (!config.m[m].oid && config.m[m].v && parseFloat(config.m[m].v) != config.m[m].v && config.m[m].v.indexOf('.') !== -1) {\r\n            if (subscribes.indexOf(config.m[m].v) === -1) subscribes.push(config.m[m].v);\r\n\r\n            readValue(config.m[m].v, m, function (index, val) {\r\n                config.m[index].oid = config.m[index].v;\r\n                config.m[index].v   = val;\r\n\r\n                if (!config.m[m].oidl && config.m[m].vl && parseFloat(config.m[m].vl) != config.m[m].vl && config.m[m].vl.indexOf('.') !== -1) {\r\n                    if (subscribes.indexOf(config.m[m].vl) === -1) subscribes.push(config.m[m].vl);\r\n                    readValue(config.m[m].vl, m, function (index, val) {\r\n                        config.m[index].oidl = config.m[index].vl;\r\n                        config.m[index].vl   = val;\r\n                        setTimeout(readMarkings, 0, cb, m + 1);\r\n                    });\r\n                } else {\r\n                    setTimeout(readMarkings, 0, cb, m + 1);\r\n                }\r\n            });\r\n        } else\r\n        if (!config.m[m].oidl && config.m[m].vl && parseFloat(config.m[m].vl) != config.m[m].vl && config.m[m].vl.indexOf('.') !== -1) {\r\n            if (subscribes.indexOf(config.m[m].vl) === -1) subscribes.push(config.m[m].vl);\r\n            readValue(config.m[m].vl, m, function (index, val) {\r\n                config.m[index].oidl = config.m[index].vl;\r\n                config.m[index].vl   = val;\r\n                setTimeout(readMarkings, 0, cb, m + 1);\r\n            });\r\n        } else {\r\n            setTimeout(readMarkings, 0, cb, m + 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction _readData(callback, j) {\r\n    j = j || 0;\r\n    if (j >= config.l.length) {\r\n        return callback && callback();\r\n    } else {\r\n        if (config.l[j] !== '' && config.l[j] !== undefined) seriesData.push([]);\r\n        _readOneLine(j, function () {\r\n            setTimeout(function () {\r\n                _readData(callback, j + 1);\r\n            }, 10);\r\n        });\r\n    }\r\n}\r\n\r\nfunction subscribeAll(subscribes, cb, s) {\r\n    s = s || 0;\r\n    if (!subscribes || !subscribes.length || s >= subscribes.length) {\r\n        cb && cb();\r\n    } else {\r\n        socket.emit('subscribe', subscribes[s], function () {\r\n            setTimeout(function () {\r\n                subscribeAll(subscribes, cb, s + 1);\r\n            }, 0);\r\n        });\r\n    }\r\n}\r\n\r\nfunction readData(hidden) {\r\n    if (disconnectTimeout) {\r\n        $('#no-connection').hide();\r\n        clearTimeout(disconnectTimeout);\r\n        disconnectTimeout = null;\r\n    }\r\n    sessionId++;\r\n\r\n    if (config.l) {\r\n        if (!hidden) $('#server-disconnect').show();\r\n\r\n        // todo\r\n//            if (config.renderer === 'pie' || (config.renderer === 'bar' && config._ids.length > 1)) {\r\n//\r\n//                seriesData = [[]];\r\n//                for (var j = 0; j < config._ids.length; j++) {\r\n//                    readOneValue(config._ids[j], j, function (_id, _index, value) {\r\n//                        if (config.renderer === 'pie') {\r\n//                            seriesData[0][_index] = {label: config.l[_index].name, data: value};\r\n//                        } else {\r\n//                            seriesData[0][_index] = [config.l[_index].name, value];\r\n//                        }\r\n//                        if (_index === config._ids.length - 1) {\r\n//                            graphCreate(divId, );\r\n//                        }\r\n//                    });\r\n//                }\r\n//            } else {\r\n        _readData(function () {\r\n            readTicks(function (_ticks) {\r\n                readMarkings(function () {\r\n                    if (!subscribed) {\r\n                        subscribed = true;\r\n                        subscribeAll();\r\n                    }\r\n\r\n                    $('#server-disconnect').hide();\r\n                    prepareChart();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    if (!config.noedit) {\r\n        // install edit button\r\n        $('#edit')\r\n            .show()\r\n            .click(function () {\r\n                var win = window.open(location.href.replace('index.html', 'edit.html'), 'flot');\r\n                win.focus();\r\n            });\r\n    }\r\n}\r\n\r\nfunction startLiveUpdate() {\r\n    liveInterval = setInterval(function () {\r\n        if (config.zoomed) {\r\n            var max = 0;\r\n            var min = null;\r\n\r\n            // Find min and max of all lines\r\n            for (var index = 0; index < config.l.length; index++) {\r\n                if (max < config.l[index].zMax) max = config.l[index].zMax;\r\n                if (min === null || min > config.l[index].zMin) min = config.l[index].zMin;\r\n            }\r\n\r\n            // if 20%\r\n            if ((max + ((max - min) / 20)) >= new Date().getTime()) {\r\n                max = new Date().getTime() - now.getTime();\r\n                var result = [];\r\n                for (var _index = 0; _index < config.l.length; _index++) {\r\n                    config.l[_index].zMax += max;\r\n                    config.l[_index].zMin += max;\r\n                    result.push({min: config.l[_index].zMin, max: config.l[_index].zMax});\r\n                }\r\n                chart.setRange(result);\r\n            } else {\r\n                return;\r\n            }\r\n        }\r\n\r\n        console.log('on time');\r\n        updateLive();\r\n    }, config.live * 1000);\r\n}\r\n\r\nfunction updateLive() {\r\n    var ready = 0;\r\n    now = new Date();\r\n    $('.loader').show();\r\n    sessionId++;\r\n\r\n    config.zoom && chart.resetZoom(now);\r\n\r\n    for (var index = 0; index < config.l.length; index++) {\r\n        ready++;\r\n        seriesData[index] = [];\r\n        readOneChart(config.l[index].id, config.l[index].instance, index, function () {\r\n            if (!--ready) {\r\n                readTicks(function (_ticks) {\r\n                    chart.update(seriesData, null, _ticks);\r\n                    $('.loader').hide();\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction avg(data, range) {\r\n    var r = [];\r\n    var rd;\r\n    var i1;\r\n    var s;\r\n    var cnt;\r\n    for(var i = 0; i < data.length; i++) {\r\n        if (i < range) {\r\n            i1 = 0;\r\n        } else {\r\n            i1 = i - range + 1;\r\n        }\r\n        rd = [data[i][0], null];\r\n        if (data[i][1] !== null) {\r\n            s   = 0;\r\n            cnt = 0;\r\n            for(var j = i1; j <= i; j++) {\r\n                if (data[j][1] === null) continue;\r\n                s += data[j][1];\r\n                cnt++;\r\n            }\r\n            rd[1] = s / cnt;\r\n        }\r\n        r.push(rd);\r\n    }\r\n    return r;\r\n}\r\n\r\nfunction onZoom() {\r\n    if (!config.zoomed) {\r\n        $('#resetZoom').show();\r\n        config.zoomed = true;\r\n    }\r\n\r\n    var result = chart.getRange();\r\n\r\n    for (var r = 0; r < result.length; r++) {\r\n        config.l[r].zMin = result[r].min;\r\n        config.l[r].zMax = result[r].max;\r\n    }\r\n\r\n    console.log('on zoom');\r\n    updateLive();\r\n}\r\n"]}